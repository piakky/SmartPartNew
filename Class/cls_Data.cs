using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using AForge.Imaging.Filters;
using System.Drawing.Drawing2D;
using DevExpress.XtraEditors;
using System.Windows.Forms;

namespace SmartPart.Class
{
    class cls_Data
    {

        #region Old
        public static double GetBalanceStock(string Stockcode, string Stocode, DateTime Sdate)
        {
            DataTable dt = new DataTable("Balance");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            double Quanin = 0, Quanout = 0, QuanBalance = 0;
            DateTime DT;
            DateTime CaldateT;
            int i = 0;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                //DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                CaldateT = cls_Global_class.GetDateCulture(Sdate);

                //Get Quan in
                sql = "Select sum(StockBF_quan) as Quanin from StockBF where StockBF_Delete=@StockBF_Delete";
                sql += " and StockBF_date <= @StockBF_date and StockBF_stk=@StockBF_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and StockBF_sto=@StockBF_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@StockBF_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@StockBF_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@StockBF_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@StockBF_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanin = Quanin + cls_Library.DBDouble(dt.Rows[i]["Quanin"]);
                    }
                }
                da.Dispose();

                //Get Quan in
                sql = "Select sum(GoodsReceived_Detail_quan) as Quanin from GoodsReceived_Detail where GoodsReceived_Detail_Delete=@GoodsReceived_Detail_Delete";
                sql += " and GoodsReceived_Detail_date <= @GoodsReceived_Detail_date and GoodsReceived_Detail_stk=@GoodsReceived_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and GoodsReceived_Detail_sto=@GoodsReceived_Detail_sto";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@GoodsReceived_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@GoodsReceived_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@GoodsReceived_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@GoodsReceived_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanin = Quanin + cls_Library.DBDouble(dt.Rows[i]["Quanin"]);
                    }
                }
                da.Dispose();

                //Get Quan in StoreShift
                sql = "Select sum(StoreShift_Detail_quan) as Quanin from StoreShift_Detail where StoreShift_Detail_Delete=@StoreShift_Detail_Delete";
                sql += " and StoreShift_Detail_date <= @StoreShift_Detail_date and StoreShift_Detail_stk=@StoreShift_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and StoreShift_Detail_stoMT=@StoreShift_Detail_stoMT";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@StoreShift_Detail_stoMT", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanin = Quanin + cls_Library.DBDouble(dt.Rows[i]["Quanin"]);
                    }
                }
                da.Dispose();

                //Get Quan in IP,JX
                sql = "Select sum(Voucher_Detail_quan) as Quanin from Voucher_Detail where (Voucher_Detail_Type='IP' or Voucher_Detail_Type='JX') and Voucher_Detail_Delete=@Voucher_Detail_Delete";
                sql += " and Voucher_Detail_date <= @Voucher_Detail_date and Voucher_Detail_stk=@Voucher_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and Voucher_Detail_sto=@Voucher_Detail_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Voucher_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@Voucher_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanin = Quanin + cls_Library.DBDouble(dt.Rows[i]["Quanin"]);
                    }
                }
                da.Dispose();

                //Get Quan in MX
                sql = "Select sum(Voucher_Detail_quan) as Quanin from Voucher_Detail where Voucher_Detail_Type='MX' and Voucher_Detail_Delete=@Voucher_Detail_Delete";
                sql += " and Voucher_Detail_date <= @Voucher_Detail_date and Voucher_Detail_stk=@Voucher_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and Voucher_Detail_stoMT=@Voucher_Detail_stoMT";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Voucher_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@Voucher_Detail_stoMT", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanin = Quanin + cls_Library.DBDouble(dt.Rows[i]["Quanin"]);
                    }
                }
                da.Dispose();

                //Get Quan out Vtype=1
                sql = "Select sum(GoodsIssued_Detail_quan) as Quanout from GoodsIssued_Detail where GoodsIssued_Detail_quan_mac=0 and GoodsIssued_Detail_Delete=@GoodsIssued_Detail_Delete";
                sql += " and GoodsIssued_Detail_date <= @GoodsIssued_Detail_date and GoodsIssued_Detail_stk=@GoodsIssued_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and GoodsIssued_Detail_sto=@GoodsIssued_Detail_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanout = cls_Library.DBDouble(dt.Rows[i]["Quanout"]);
                    }
                }
                da.Dispose();

                //Get Quan out Vtype=1
                sql = "Select sum(GoodsIssued_Detail_quan_mac) as Quanout from GoodsIssued_Detail where GoodsIssued_Detail_Delete=@GoodsIssued_Detail_Delete";
                sql += " and GoodsIssued_Detail_date <= @GoodsIssued_Detail_date and GoodsIssued_Detail_stk=@GoodsIssued_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and GoodsIssued_Detail_sto=@GoodsIssued_Detail_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@GoodsIssued_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanout = cls_Library.DBDouble(dt.Rows[i]["Quanout"]);
                    }
                }
                da.Dispose();

                //Get Quan out StoreShift
                sql = "Select sum(StoreShift_Detail_quan) as Quanout from StoreShift_Detail where StoreShift_Detail_Delete=@StoreShift_Detail_Delete";
                sql += " and StoreShift_Detail_date <= @StoreShift_Detail_date and StoreShift_Detail_stk=@StoreShift_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and StoreShift_Detail_sto=@StoreShift_Detail_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@StoreShift_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@StoreShift_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanout = Quanout + cls_Library.DBDouble(dt.Rows[i]["Quanout"]);
                    }
                }
                da.Dispose();

                //Get Quan out MX
                sql = "Select sum(Voucher_Detail_quan) as Quanout from Voucher_Detail where Voucher_Detail_Type='MX' and Voucher_Detail_Delete=@Voucher_Detail_Delete";
                sql += " and Voucher_Detail_date <= @Voucher_Detail_date and Voucher_Detail_stk=@Voucher_Detail_stk ";
                if (Stocode.Length > 0)
                {
                    sql += " and Voucher_Detail_sto=@Voucher_Detail_sto";
                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Voucher_Detail_Delete", SqlDbType.Bit).Value = 0;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_date", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@Voucher_Detail_stk", SqlDbType.NVarChar, 15).Value = Stockcode;
                if (Stocode.Length > 0)
                {
                    da.SelectCommand.Parameters.Add("@Voucher_Detail_sto", SqlDbType.NVarChar, 15).Value = Stocode;
                }
                dt = new DataTable("Balance");
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        Quanout = Quanout + cls_Library.DBDouble(dt.Rows[i]["Quanout"]);
                    }
                }
                da.Dispose();

                QuanBalance = Quanin - Math.Abs(Quanout);
            }
            catch
            {
                QuanBalance = 0;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return QuanBalance;
        }

        public static DataTable GetCodeCUS(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("CUS");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length > 0)
                {
                    sql = "Select " + Xf + " From Customer where Cus_Delete =@Cus_Delete";
                }
                else
                {
                    sql = "Select * From Customer where Cus_Delete =@Cus_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Cus_id=@Cus_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Cus_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Cus_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeCreditor(int mode, string code, string Xf)
        {
            DataTable dt = new DataTable("CRE");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length > 0)
                {
                    sql = "Select " + Xf + " From Creditor where CREhide=0 and CRElock=0";
                }
                else
                {
                    sql = "Select * From Creditor where CREhide=0 and CRElock=0";
                }
                if (mode == 1)
                {
                    sql += " and CREcode=@CREcode";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                //da.SelectCommand.Parameters.Add("@Cus_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@CREcode", SqlDbType.NVarChar, 15).Value = code;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeDebtor(int mode, string code, string Xf)
        {
            DataTable dt = new DataTable("DEB");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length > 0)
                {
                    sql = "Select " + Xf + " From Debtor where DEBhide=0 and DEBlock=0";
                }
                else
                {
                    sql = "Select * From Debtor where DEBhide=0 and DEBlock=0";
                }
                if (mode == 1)
                {
                    sql += " and DEBcode=@DEBcode";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                //da.SelectCommand.Parameters.Add("@Cus_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@DEBcode", SqlDbType.NVarChar, 15).Value = code;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeEN(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("EN");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Engineer where En_Delete=@En_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Engineer where En_Delete=@En_Delete";
                }
                if (mode == 1)
                {
                    sql += " and En_id=@En_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@En_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@En_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeIns(int mode, int id, string Xf, int cusid = 0)
        {
            DataTable dt = new DataTable("Ins");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Instrument where Ins_Delete=@Ins_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Instrument where Ins_Delete=@Ins_Delete";
                }
                if (cusid > 0)
                {
                    sql += " and Ins_Cus_id=@Ins_Cus_id";
                }
                if (mode == 1)
                {
                    sql += " and Ins_id=@Ins_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Ins_Delete", SqlDbType.Bit).Value = 0;
                if (cusid > 0)
                {
                    da.SelectCommand.Parameters.Add("@Ins_Cus_id", SqlDbType.Int).Value = cusid;
                }
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Ins_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeModel(int mode, int id, string Xf, int cusid = 0)
        {
            DataTable dt = new DataTable("Model");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Instrument where Ins_Delete=@Ins_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Instrument where Ins_Delete=@Ins_Delete";
                }
                if (cusid > 0)
                {
                    sql += " and Ins_Cus_id=@Ins_Cus_id";
                }
                if (mode == 1)
                {
                    sql += " and Ins_id=@Ins_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Ins_Delete", SqlDbType.Bit).Value = 0;
                if (cusid > 0)
                {
                    da.SelectCommand.Parameters.Add("@Ins_Cus_id", SqlDbType.Int).Value = cusid;
                }
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Ins_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodePart(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("Part");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From SparePart where Part_Delete=@Part_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From SparePart where Part_Delete=@Part_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Part_id=@Part_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Part_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Part_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodePartBalace(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("Part");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From SparePart where Part_Delete=@Part_Delete";
                }
                else
                {
                    //sql = "Select " + Xf + " From SparePart LEFT OUTER JOIN SBL ON SparePart.Part_id = SBL.SBL_id where Part_Delete=@Part_Delete";
                    //sql = "SELECT  SparePart.Part_No, SparePart.Part_Code, SparePart.Part_NameT, SparePart.Part_NameE, Specification.Spec_Name,"
                    //    + "SparePart.Part_Spec_Model, SparePart.Part_Version FROM SparePart INNER JOIN Specification ON SparePart.Part_Spec_id = Specification.Spec_id LEFT OUTER JOIN"
                    //    + "SBL ON SparePart.Part_id = SBL.SBL_Spare_id";
                    sql = "SELECT  " + Xf + " FROM SparePart INNER JOIN Specification on SparePart.Part_Spec_id = Specification.Spec_id LEFT OUTER JOIN SBL on SparePart.Part_id = SBL.SBL_Spare_id where Part_Delete=@Part_Delete ";

                }
                if (mode == 1)
                {
                    sql += " and Part_id=@Part_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Part_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Part_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static double GetBalancePart(int id)
        {
            DataTable dt = new DataTable("SBL");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            double Xquan = 0;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {

                sql = "Select SBLquan From SBL where SBL_Spare_id=@SBL_Spare_id";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@SBL_Spare_id", SqlDbType.Int).Value = id;
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xquan = cls_Library.DBDouble(dt.Rows[0]["SBLquan"]);
                }
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xquan;
        }

        public static bool GetBalanceSBL(int id)
        {
            DataTable dt = new DataTable("SBL");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            bool OK = false;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {

                sql = "Select SBLquan From SBL where SBL_Spare_id=@SBL_Spare_id";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@SBL_Spare_id", SqlDbType.Int).Value = id;
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    OK = true;
                }
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
                da.Dispose();
            }
            return OK;
        }

        public static double GetBalanceStockOnhand(int id)
        {
            DataTable dt = new DataTable("Onh");
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            bool OK = false;
            double BSqty, RCqty, OHqty;
            double QTY = 0;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                cmd = new SqlCommand("select dbo.[GetStockBSByID](@itemID);", cn);
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("@itemID",id);

                BSqty = cls_Library.DBDouble(cmd.ExecuteScalar());

                cmd = new SqlCommand("select dbo.[GetStockRCByID](@itemID);", cn);
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("@itemID", id);

                RCqty = cls_Library.DBDouble(cmd.ExecuteScalar());

                cmd = new SqlCommand("select dbo.[GetStockOnhandByID](@itemID);", cn);
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("@itemID", id);

                OHqty = cls_Library.DBDouble(cmd.ExecuteScalar());

                QTY = RCqty - BSqty + OHqty;



            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                QTY = 0;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return QTY;
        }

        public static DataTable GetCodeREC(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("REC");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Recorder where Record_Delete=@Record_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Recorder where Record_Delete=@Record_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Record_id=@Record_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Record_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Record_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeSN(int mode, int id, string Xf, int cusid = 0)
        {
            DataTable dt = new DataTable("SN");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Instrument where Ins_Delete=@Ins_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Instrument where Ins_Delete=@Ins_Delete";
                }
                if (cusid > 0)
                {
                    sql += " and Ins_Cus_id=@Ins_Cus_id";
                }
                if (mode == 1)
                {
                    sql += " and Ins_id=@Ins_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Ins_Delete", SqlDbType.Bit).Value = 0;
                if (cusid > 0)
                {
                    da.SelectCommand.Parameters.Add("@Ins_Cus_id", SqlDbType.Int).Value = cusid;
                }
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Ins_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeSpec(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("Spec");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Specification where Spec_Delete=@Spec_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Specification where Spec_Delete=@Spec_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Spec_id=@Spec_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Spec_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Spec_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeShelf(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("Shelf");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Shelf where Shelf_Delete=@Shelf_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Shelf where Shelf_Delete=@Shelf_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Shelf_id=@Shelf_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Shelf_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Shelf_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeStock(int mode, string code, string Xf)
        {
            DataTable dt = new DataTable("Stock");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Stock where STKhide=0 and STKlock=0";
                }
                else
                {
                    sql = "Select " + Xf + " From Stock where STKhide=0 and STKlock=0";
                }
                if (mode == 1)
                {
                    sql += " and STKcode=@STKcode";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@STKcode", SqlDbType.NVarChar, 30).Value = code;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeStockBF(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("StockBF");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From StockBF where StockBF_Delete=@StockBF_Delete";
                }
                else
                {
                    sql = "SELECT  StockBF_id, StockBF_date, StockBF_stk, StockBF_stkname, StockBF_sto, StockBF_quan,";
                    sql += "StockBF_CreateUser, StockBF_CreateDate, StockBF_EditUser, StockBF_EditDate,StockBF_Delete, StockBF_DeleteUser, StockBF_DeleteDate FROM StockBF";
                    sql += " where StockBF_Delete=@StockBF_Delete";
                }
                if (mode == 1)
                {
                    sql += " and StockBF_id=@StockBF_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@StockBF_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@StockBF_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeStore(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("Store");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From Store where Store_Delete=@Store_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From Store where Store_Delete=@Store_Delete";
                }
                if (mode == 1)
                {
                    sql += " and Store_id=@Store_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@Store_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@Store_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeStoreType(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("StoreType");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From StoreType where StoreType_Delete=@StoreType_Delete";
                }
                else
                {
                    sql = "Select " + Xf + " From StoreType where StoreType_Delete=@StoreType_Delete";
                }
                if (mode == 1)
                {
                    sql += " and StoreType_id=@StoreType_id";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@StoreType_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@StoreType_id", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataSet GetCodeUser(int mode, int id)
        {

            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            DataSet _dataSet = new DataSet();
            StringBuilder sqlcmd = new StringBuilder();
            SqlCommand cmd = conn.CreateCommand();
            string sql = "";
            string SQL1 = "SELECT USRid,USRcode,USRnameT,USRnameE,USRlevel,USRemail,USRlock "
                        + "FROM USR WHERE USRdelete=0 and USRcode <> 'ADMIN'";
            string SQL2 = " AND USR.USRid=" + id;

            cls_Global_DB.ConnectDatabase(ref conn);
            try
            {
                if (mode == 1)
                {
                    sql = SQL1 + "ORDER BY USR.USRcode";
                    _dataAdapter = new SqlDataAdapter(sql, conn);
                    _dataAdapter.SelectCommand = new SqlCommand(sql, conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.Fill(_dataSet, "USR");
                }


                if (mode == 2)
                {
                    sql = SQL1 + SQL2 + " ORDER BY USR.USRcode";
                    _dataAdapter = new SqlDataAdapter(sql, conn);
                    _dataAdapter.SelectCommand = new SqlCommand(sql, conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.Fill(_dataSet, "USR");
                }
            }
            catch (Exception e)
            {
                XtraMessageBox.Show(e.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return _dataSet;
        }

        public static DataTable GetImageAll(int id, int type)
        {
            DataTable dt = new DataTable("Image");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                sql = "Select * From PIC where PICcode_id=@PICcode_id and PICtype=@PICtype";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@PICcode_id", SqlDbType.Int).Value = id;
                da.SelectCommand.Parameters.Add("@PICtype", SqlDbType.Int).Value = type;
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetCodeUser(int mode, int id, string Xf)
        {
            DataTable dt = new DataTable("User");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length == 0)
                {
                    sql = "Select * From USR where USRdelete=@USRdelete";
                }
                else
                {
                    sql = "Select " + Xf + " From USR where USRdelete=@USRdelete";
                }
                if (mode == 1)
                {
                    sql += " and USRid=@USRid";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@USRdelete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@USRid", SqlDbType.Int).Value = id;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static DataTable GetVoucher(int mode, int id, int type, string Xf)
        {
            DataTable dt = new DataTable("Voucher");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (Xf.Length > 0)
                {
                    sql = "Select " + Xf + " From Voucher where V_Delete =@V_Delete";
                }
                else
                {
                    sql = "Select * From Voucher where V_Delete =@V_Delete";
                }
                if (mode == 1)
                {
                    sql += " and V_id=@V_id and V_Type=@V_Type";
                }
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@V_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    da.SelectCommand.Parameters.Add("@V_id", SqlDbType.Int).Value = id;
                    da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = type;
                }
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static string GetLastVoucher(int mode, int id, int type, string Xf, int Xyear, string H_V = "")
        {
            DataTable dt = new DataTable("Voucher");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xvnos = "";

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                if (H_V == "H")
                {
                    if (Xf.Length > 0)
                    {
                        sql = "Select top 1 " + Xf + " From H_Voucher where V_Delete =@V_Delete";
                    }
                    else
                    {
                        sql = "Select top 1 V_Nos From H_Voucher where V_Delete =@V_Delete";
                    }
                    if (mode == 1)
                    {
                        sql += " and V_Type=@V_Type and year(V_Date)=@V_date";
                    }
                }
                else
                {
                    if (Xf.Length > 0)
                    {
                        sql = "Select top 1 " + Xf + " From Voucher where V_Delete =@V_Delete";
                    }
                    else
                    {
                        sql = "Select top 1 V_Nos From Voucher where V_Delete =@V_Delete";
                    }
                    if (mode == 1)
                    {
                        sql += " and V_Type=@V_Type and year(V_Date)=@V_date ";
                    }
                }
                sql += " Order By V_Nos desc ";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@V_Delete", SqlDbType.Bit).Value = 0;
                if (mode == 1)
                {
                    //da.SelectCommand.Parameters.Add("@V_id", SqlDbType.Int).Value = id;
                    da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = type;
                    da.SelectCommand.Parameters.Add("@V_Date", SqlDbType.Int).Value = Xyear;
                }
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xvnos = cls_Library.DBString(dt.Rows[0]["V_Nos"]);
                }
            }
            catch
            {
                dt = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xvnos;
        }

        public static string GetTBname(string code, string tb, string xf,bool Rowfirst = false)
        {
            DataTable dt = new DataTable(tb);
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xcap = "";
            string table = "";


            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
            switch (tb)
            {
                case "DEB":
                    table = "Debtor";
                    break;
                case "CRE":
                    table = "Creditor";
                    break;
                case "STK":
                    table = "Stock";
                    break;
                case "Store_":
                    table = "Store";
                    break;
                case "StoreType":
                    table = "StoreType";
                    break;
                case "D_ITEM_LOCATIONS":
                table = "D_ITEM_LOCATIONS";
                break;
            }

            sql = "Select " + xf + " From " + table;
            if (Rowfirst)
            {
                sql = "Select Top 1" + xf + " From " + table;
            }
            sql += " where " + tb + "code=@" + tb + "code";
            da = new SqlDataAdapter(sql, cn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("@" + tb + "code", SqlDbType.NVarChar, 15).Value = code;
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                Xcap = cls_Library.DBString(dt.Rows[0][xf]);
            }
            }
            catch
            {
                Xcap = "";
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static string GetStockCodeFromBarcode(string code, string xf)
        {
            DataTable dt = new DataTable("Stock");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xcap = "";


            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {

                sql = "Select STKcode From Stock";
                sql += " where STKbarC1=@STKbarC1";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@STKbarC1", SqlDbType.NVarChar, 30).Value = code;
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xcap = cls_Library.DBString(dt.Rows[0][xf]);
                }
            }
            catch
            {
                Xcap = "";
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static DataTable GetAlert()
        {
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            DataTable dt, dt1;
            string sql = string.Empty;
            DateTime CaldateT = DateTime.Now.Date;
            DateTime DT = DateTime.Now.Date;
            int i = 0;
            DataRow Drow;

            cls_Global_DB.ConnectDatabase(ref cn);
            dt = new DataTable("Voucher");

            try
            {
                //CaldateF = cls_Library_PI.GetDateCulture(txtDateStart.DateTime);
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                CaldateT = cls_Global_class.GetDateCulture(DT);

                i = GetReminder(2);
                if (i == 0) i = 14;
                CaldateT = CaldateT.AddDays(i);
                //_DS = new DataSet();
                //_DS.Tables.Clear();

                //Installation
                //sql = "Select * From Voucher Where V_Delete=0 and V_Approve=@V_Approve";
                //sql += " and V_Type=@V_Type and (V_AnualDate1<=@V_AnualDate1 or V_AnualDate2<=@V_AnualDate2)";
                //da = new SqlDataAdapter(sql, cn);
                //da.SelectCommand.Parameters.Clear();
                //da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = 201;
                //da.SelectCommand.Parameters.Add("@V_AnualDate1", SqlDbType.DateTime).Value = CaldateT;
                //da.SelectCommand.Parameters.Add("@V_AnualDate2", SqlDbType.DateTime).Value = CaldateT;
                //da.SelectCommand.Parameters.Add("@V_Approve", SqlDbType.Bit).Value = false;
                //da.SelectCommand.CommandTimeout = 1200;
                //da.Fill(dt);

                //Validation
                sql = "Select * From Voucher Where V_Delete=0 and V_Approve=@V_Approve";
                sql += " and V_Type=@V_Type and (V_AnualDate1<=@V_AnualDate1)";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = 202;
                da.SelectCommand.Parameters.Add("@V_AnualDate1", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@V_Approve", SqlDbType.Bit).Value = false;
                da.SelectCommand.CommandTimeout = 1200;
                da.Fill(dt);

                //dt1 = new DataTable("Voucher");
                //da.Fill(dt1);
                //if (dt1.Rows.Count > 0)
                //{
                //  for (i = 0; i < dt1.Rows.Count; i++)
                //  {
                //    Drow = dt1.Rows[i];
                //    dt.ImportRow(Drow);
                //  }
                //}

                //ASC
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                CaldateT = cls_Global_class.GetDateCulture(DT);
                i = GetReminder(1);
                if (i == 0) i = 30;
                CaldateT = CaldateT.AddDays(i);
                sql = "Select * From Voucher Where V_Delete=0 and V_Approve=@V_Approve";
                sql += " and V_Type=@V_Type and (V_AnualDate1<=@V_AnualDate1)";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = 205;
                da.SelectCommand.Parameters.Add("@V_AnualDate1", SqlDbType.DateTime).Value = CaldateT;
                da.SelectCommand.Parameters.Add("@V_Approve", SqlDbType.Bit).Value = false;
                da.SelectCommand.CommandTimeout = 1200;
                dt1 = new DataTable("Voucher");
                da.Fill(dt1);
                //DataRow Drow;
                if (dt1.Rows.Count > 0)
                {
                    for (i = 0; i < dt1.Rows.Count; i++)
                    {
                        Drow = dt1.Rows[i];
                        dt.ImportRow(Drow);
                    }
                }

                //_DS.Tables.Add(dt);
            }
            catch
            {
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return dt;
        }

        public static int GetReminder(int Xcode)
        {
            //string User = "";
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlDataReader rd = null;
            int iday = 0;

            cls_Global_DB.ConnectDatabase(ref conn);

            cmd = new SqlCommand();
            cmd.CommandText = "SELECT * FROM TimeAlert WHERE Alert_No=" + Xcode + "";
            cmd.Connection = conn;
            cmd.CommandTimeout = 30;
            cmd.CommandType = CommandType.Text;
            rd = cmd.ExecuteReader();
            if (rd.HasRows)
            {
                rd.Read();
                iday = Convert.ToInt32(rd["Alert_Day"]);
            }

            if (!rd.IsClosed) rd.Close();

            return iday;

        }

        public static bool DeleteCodeCUS(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Customer WITH (UPDLOCK) set Cus_Delete=1,Cus_DeleteUser=@Cus_DeleteUser,Cus_DeleteDate=@Cus_DeleteDate Where Cus_id=@Cus_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Cus_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Cus_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Cus_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeDEP(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = cls_Global_class.GB_Userid;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Department WITH (UPDLOCK) set Dep_Delete=1,Dep_DeleteUser=@Dep_DeleteUser,Dep_DeleteDate=@Dep_DeleteDate Where Dep_id=@Dep_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Dep_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Dep_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Dep_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeEN(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Engineer WITH (UPDLOCK) set En_Delete=1,En_DeleteUser=@En_DeleteUser,En_DeleteDate=@En_DeleteDate Where En_id=@En_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@En_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@En_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@En_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeShelf(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Shelf WITH (UPDLOCK) set Shelf_Delete=1,Shelf_DeleteUser=@Shelf_DeleteUser,Shelf_DeleteDate=@Shelf_DeleteDate Where Shelf_id=@Shelf_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Shelf_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Shelf_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Shelf_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeIns(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Instrument WITH (UPDLOCK) set Ins_Delete=1,Ins_DeleteUser=@Ins_DeleteUser,Ins_DeleteDate=@Ins_DeleteDate Where Ins_id=@Ins_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Ins_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Ins_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Ins_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeREC(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Recorder WITH (UPDLOCK) set Record_Delete=1,Record_DeleteUser=@Record_DeleteUser,Record_DeleteDate=@Record_DeleteDate Where Record_id=@Record_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Record_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Record_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Record_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeSparePart(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update SparePart WITH (UPDLOCK) set Part_Delete=1,Part_DeleteUser=@Part_DeleteUser,Part_DeleteDate=@Part_DeleteDate Where Part_id=@Part_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Part_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Part_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Part_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;



                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeStockBF(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update StockBF WITH (UPDLOCK) set StockBF_Delete=1,StockBF_DeleteUser=@StockBF_DeleteUser,StockBF_DeleteDate=@StockBF_DeleteDate Where StockBF_id=@StockBF_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@StockBF_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@StockBF_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@StockBF_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeStore(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Store WITH (UPDLOCK) set Store_Delete=1,Store_DeleteUser=@Store_DeleteUser,Store_DeleteDate=@Store_DeleteDate Where Store_id=@Store_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Store_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Store_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Store_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeStoreType(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update StoreType WITH (UPDLOCK) set StoreType_Delete=1,StoreType_DeleteUser=@StoreType_DeleteUser,StoreType_DeleteDate=@StoreType_DeleteDate Where StoreType_id=@StoreType_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@StoreType_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@StoreType_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@StoreType_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeSpec(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Specification WITH (UPDLOCK) set Spec_Delete=1,Spec_DeleteUser=@Spec_DeleteUser,Spec_DeleteDate=@Spec_DeleteDate Where Spec_id=@Spec_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Spec_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Spec_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Spec_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteVoucher(int id)
        {
            // for Budget
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update Budget WITH (UPDLOCK) set Budget_Delete=1,Budget_DeleteUser=@Budget_DeleteUser,Budget_DeleteDate=@Budget_DeleteDate Where Budget_id=@Budget_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@Budget_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@Budget_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@Budget_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteVoucherSpare(int id, int Type)
        {
            bool ok = false;
            DataTable dtt = new DataTable("Voucher");
            SqlConnection cn = new SqlConnection();
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd;
            SqlCommand comm;
            SqlDataReader rd = null;
            SqlDataAdapter da = null;
            DataRow Drow;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = 0;

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update H_Voucher WITH (UPDLOCK) set V_Delete=1,V_DeleteUser=@V_DeleteUser,V_DeleteDate=@V_DeleteDate Where V_id=@V_id";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@V_DeleteUser", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@V_DeleteDate", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@V_id", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;


                tran.Commit();

                int j = 0;
                if (Type == 301) j = -1;
                if (Type == 302) j = 1;

                sql = "Select * From D_Voucher Where V_Hid=@V_id ";
                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@V_id", SqlDbType.Int).Value = id;
                //da.SelectCommand.Parameters.Add("@V_Type", SqlDbType.Int).Value = Type;
                da.SelectCommand.CommandTimeout = 300;
                //dtCST = new DataTable("CPP");
                da.Fill(dtt);
                for (int i = 0; i < dtt.Rows.Count; i++)
                {
                    Drow = dtt.Rows[i];
                    sql = "UPDATE SBL set";
                    sql += " SBLquan = SBLquan + @SBLquan";
                    sql += " WHERE SBL_Spare_id = @SBL_Spare_id";
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                    cls_Global_DB.ConnectDatabase(ref conn);
                    comm = new SqlCommand(sql, conn);
                    comm.CommandText = sql;
                    comm.CommandTimeout = 30;
                    comm.CommandType = CommandType.Text;
                    comm.Parameters.Clear();
                    comm.Parameters.Add("@SBL_Spare_id", SqlDbType.Int).Value = System.Convert.ToUInt32(Drow["V_Stock"]);
                    comm.Parameters.Add("@SBLquan", SqlDbType.Real).Value = Math.Abs(System.Convert.ToUInt32(Drow["V_Quantity"])) * j;
                    //comm.Transaction = tran;
                    comm.ExecuteNonQuery();
                }
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteCodeUser(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            int Xid;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            Xid = cls_Global_class.GB_Userid;
            //cmd = new SqlCommand();
            //cmd.CommandText = "SELECT USRid FROM USR WHERE USRcode='" + cls_General_PI.GB_UserCode + "' And USRdelete=0";
            //cmd.Connection = cn;
            //cmd.CommandTimeout = 30;
            //cmd.CommandType = CommandType.Text;
            //rd = cmd.ExecuteReader();
            //if (rd.HasRows)
            //{
            //  rd.Read();
            //  Xid = Convert.ToInt32(rd["USRid"]);
            //}

            //if (!rd.IsClosed) rd.Close();

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
                //Xdate = DateTime.Now.ToShortDateString;
                DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                cmd = new SqlCommand();
                cmd.Connection = cn;
                //Voucher
                sql = "Update USR WITH (UPDLOCK) set USRdelete=1,USRdeleteBy=@USRdeleteBy,USRdeleteDT=@USRdeleteDT Where USRid=@USRid";
                cmd.CommandText = sql;
                cmd.CommandTimeout = 60;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@USRdeleteBy", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@USRdeleteDT", SqlDbType.DateTime).Value = DT;
                cmd.Parameters.Add("@USRid", SqlDbType.Int, 4).Value = id;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                ok = true;

                //if (ok)
                //{
                //  //Voucher_Details
                //  sql = "Delete From USM WITH (UPDLOCK) Where USR_id=@USR_id";
                //  cmd.CommandText = sql;
                //  cmd.CommandTimeout = 60;
                //  cmd.CommandType = CommandType.Text;
                //  cmd.Parameters.Clear();
                //  cmd.Parameters.Add("@USR_id", SqlDbType.Int, 4).Value = id;
                //  cmd.Transaction = tran;
                //  cmd.ExecuteNonQuery();
                //  ok = true;
                //}
                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                ok = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }
        #endregion

        #region ZONE
        #region Brands
        public static bool CheckUseBrandByItem(int BRAND_ID)
        {
            bool ret = false;

            SqlConnection conn = new SqlConnection();
            SqlDataAdapter Adap = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    sb.AppendLine("Select TOP 1 BRAND_ID From M_ITEMS Where 1=1 And BRAND_ID=@BRAND_ID And DELETED = 0");

                    Adap.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    Adap.SelectCommand.Parameters.Clear();

                    Adap.SelectCommand.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BRAND_ID;
                   
                    Adap.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        ret = true;
                    }
                    Adap.Dispose();                   
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("CheckUseBrandByItem :" + ex.Message);
                ret = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }
        #endregion

        #region Customer
        public static string CheckCodeUser(string Xpass)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataReader reader;
            StringBuilder sb = new StringBuilder();
            string Suser = "";

            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    //Head
                    sb.Clear();
                    sb.AppendLine("Select USER_CODE From M_USERS Where PASSWORD = @PASSWORD");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@PASSWORD", SqlDbType.VarChar,10).Value = Xpass;
                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {

                        reader.Read();

                        Suser = cls_Library.DBString(reader["USER_CODE"]);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return Suser;
        }
        public static bool DeleteCustomer(int _id)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DateTime _date;
            try
            {
                _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    sb.AppendLine("Update M_CUSTOMERS WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where CUSTOMER_ID =@CUSTOMER_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int, 4).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ชื่อผู้ติดต่อ
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_CONTRACTORS WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ที่อยู่
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_ADDRESSES WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ชื่อจ่ายเช็ค
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_CHEQUES WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //บัญชีธนาคาร          
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_BANKS WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ทะเบียนรถยนต์
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_CARS WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ประวัติการติดตามหนี้
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_TRACKS WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ยี่ห้อสินค้าที่ได้รับส่วนลด
                    sb.Clear();
                    sb.AppendLine("Delete From D_CUSTOMER_BRAND_DISCOUNT_STEPS WHERE CUSTOMER_ID =@CUSTOMER_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                result = false;
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetListCustomer()
        {
            DataSet ds = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select * From M_CUSTOMERS Where DELETED = 0 Order by CUSTOMER_CODE");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.Fill(ds, "M_CUSTOMERS");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListCustomer :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return ds;
        }

        public static DataSet GetCustomerById(int CusId)
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";
            try
            {
                //รหัสลูกค้า
                sqltex = string.Format("Select * From M_CUSTOMERS Where CUSTOMER_ID = {0}", CusId);
                LoadSpecifyData(sqltex, out dt, "M_CUSTOMERS");
                ds.Tables.Add(dt);

                //ผู้ติดต่อ
                sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_CUSTOMER_CONTRACTORS Where CUSTOMER_ID = {0} Order By LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_CONTRACTORS");
                ds.Tables.Add(dt);

                //ที่อยู่
                //sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_CUSTOMER_ADDRESSES Where CUSTOMER_ID = {0} Order By SEQUENSE_NO", CusId);
                //LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_ADDRESSES");
                //ds.Tables.Add(dt);

                //ชื่อจ่ายเช็ค
                sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_CUSTOMER_CHEQUES Where CUSTOMER_ID = {0} Order By LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_CHEQUES");
                ds.Tables.Add(dt);

                //บัญชีธนาคาร
                //sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.ABBREVIATE_NAME, B.FULL_NAME, C.BRANCH_NAME From D_CUSTOMER_BANKS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID INNER JOIN D_BANK_BRANCHS C ON A.BRANCH_ID = C.BRANCH_ID And A.BANK_ID = C.BANK_ID Where A.CUSTOMER_ID = {0} Order By A.LIST_NO", CusId);
                sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.ABBREVIATE_NAME, B.FULL_NAME From D_CUSTOMER_BANKS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID Where A.CUSTOMER_ID = {0} Order By A.LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_BANKS");
                ds.Tables.Add(dt);

                //ทะเบียนรถยนต์
                sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_CUSTOMER_CARS Where CUSTOMER_ID = {0} Order By LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_CARS");
                ds.Tables.Add(dt);

                //ประวัติการติดตามหนี้
                sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.USER_CODE, B.USER_NAME From D_CUSTOMER_TRACKS A LEFT JOIN M_USERS B ON A.USER_ID = B.USER_ID Where A.CUSTOMER_ID = {0} Order By A.LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_TRACKS");
                ds.Tables.Add(dt);

                //ยี่ห้อสินค้าที่ได้รับส่วนลด
                sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.BRAND_CODE, B.BRAND_NAME, B.DESCRIPTION From D_CUSTOMER_BRAND_DISCOUNT_STEPS A LEFT JOIN M_BRANDS B ON A.BRAND_ID = B.BRAND_ID Where A.CUSTOMER_ID = {0} Order By A.BRAND_ID, A.LIST_NO", CusId);
                LoadSpecifyData(sqltex, out dt, "D_CUSTOMER_BRAND_DISCOUNT_STEPS");
                ds.Tables.Add(dt);
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetCustomerById :" + ex.Message);
            }
            return ds;

        }

        public static bool SaveCustomerCode(cls_Struct.ActionMode mode, cls_Struct.StructCUSTOMERS CUS, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal CUSid = 0;
            int irow = 0;
            string strBasePath = Application.StartupPath + "\\Photos";
            if (!Directory.Exists(strBasePath)) Directory.CreateDirectory(strBasePath);

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region รหัสลูกค้า
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_CUSTOMERS WITH (UPDLOCK) (");
                            sb.AppendLine("CUSTOMER_CODE,");
                            sb.AppendLine("CUSTOMER_NAME,");
                            sb.AppendLine("DETAIL_1,");
                            sb.AppendLine("DETAIL_2,");
                            sb.AppendLine("DETAIL_3,");
                            sb.AppendLine("REMARK,");
                            sb.AppendLine("E_MAIL,");
                            sb.AppendLine("ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4,");
                            sb.AppendLine("LOCATION,");
                            sb.AppendLine("TAX_ID,");
                            sb.AppendLine("START_CONTRACT_DATE,");
                            sb.AppendLine("LAST_CONTRACT_DATE,");
                            sb.AppendLine("SALE_ENABLED_STATUS,");
                            sb.AppendLine("PRICE_STEP,");
                            sb.AppendLine("CREDIT_LIMIT,");
                            sb.AppendLine("CUSTOMER_CREDIT_TERM,");
                            sb.AppendLine("BILL_TYPE_CODE,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@CUSTOMER_CODE,");
                            sb.AppendLine("@CUSTOMER_NAME,");
                            sb.AppendLine("@DETAIL_1,");
                            sb.AppendLine("@DETAIL_2,");
                            sb.AppendLine("@DETAIL_3,");
                            sb.AppendLine("@REMARK,");
                            sb.AppendLine("@E_MAIL,");
                            sb.AppendLine("@ADDRESS_1,");
                            sb.AppendLine("@ADDRESS_2,");
                            sb.AppendLine("@ADDRESS_3,");
                            sb.AppendLine("@ADDRESS_4,");
                            sb.AppendLine("@LOCATION,");
                            sb.AppendLine("@TAX_ID,");
                            sb.AppendLine("@START_CONTRACT_DATE,");
                            sb.AppendLine("@LAST_CONTRACT_DATE,");
                            sb.AppendLine("@SALE_ENABLED_STATUS,");
                            sb.AppendLine("@PRICE_STEP,");
                            sb.AppendLine("@CREDIT_LIMIT,");
                            sb.AppendLine("@CUSTOMER_CREDIT_TERM,");
                            sb.AppendLine("@BILL_TYPE_CODE,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY]");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE M_CUSTOMERS WITH (UPDLOCK) SET");
                            sb.AppendLine("CUSTOMER_CODE =@CUSTOMER_CODE,");
                            sb.AppendLine("CUSTOMER_NAME = @CUSTOMER_NAME,");
                            sb.AppendLine("DETAIL_1 =@DETAIL_1,");
                            sb.AppendLine("DETAIL_2 =@DETAIL_2,");
                            sb.AppendLine("DETAIL_3 =@DETAIL_3,");
                            sb.AppendLine("REMARK =@REMARK,");
                            sb.AppendLine("E_MAIL =@E_MAIL,");
                            sb.AppendLine("ADDRESS_1 =@ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2 =@ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3 =@ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4 =@ADDRESS_4,");
                            sb.AppendLine("LOCATION =@LOCATION,");
                            sb.AppendLine("TAX_ID =@TAX_ID,");
                            sb.AppendLine("START_CONTRACT_DATE =@START_CONTRACT_DATE,");
                            sb.AppendLine("LAST_CONTRACT_DATE =@LAST_CONTRACT_DATE,");
                            sb.AppendLine("SALE_ENABLED_STATUS =@SALE_ENABLED_STATUS,");
                            sb.AppendLine("PRICE_STEP =@PRICE_STEP,");
                            sb.AppendLine("CREDIT_LIMIT =@CREDIT_LIMIT,");
                            sb.AppendLine("CUSTOMER_CREDIT_TERM =@CUSTOMER_CREDIT_TERM,");
                            sb.AppendLine("BILL_TYPE_CODE =@BILL_TYPE_CODE,");
                            sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                            sb.AppendLine("WHERE CUSTOMER_ID =@CUSTOMER_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    if (mode == cls_Struct.ActionMode.Add) CUS.CUSTOMER_CODE = cls_Data.GetLastCodeMaster("CUSTOMERS", 4);
                    cmd.Parameters.Add("@CUSTOMER_CODE", SqlDbType.Char, 4).Value = CUS.CUSTOMER_CODE;
                    cmd.Parameters.Add("@CUSTOMER_NAME", SqlDbType.VarChar, 100).Value = CUS.CUSTOMER_NAME;
                    cmd.Parameters.Add("@DETAIL_1", SqlDbType.VarChar, 255).Value = CUS.DETAIL_1;
                    cmd.Parameters.Add("@DETAIL_2", SqlDbType.VarChar, 255).Value = CUS.DETAIL_2;
                    cmd.Parameters.Add("@DETAIL_3", SqlDbType.VarChar, 255).Value = CUS.DETAIL_3;
                    cmd.Parameters.Add("@REMARK", SqlDbType.NVarChar, 500).Value = CUS.REMARK;
                    cmd.Parameters.Add("@E_MAIL", SqlDbType.VarChar, 50).Value = CUS.E_MAIL;
                    cmd.Parameters.Add("@ADDRESS_1", SqlDbType.VarChar, 100).Value = CUS.ADDRESS_1;
                    cmd.Parameters.Add("@ADDRESS_2", SqlDbType.VarChar, 100).Value = CUS.ADDRESS_2;
                    cmd.Parameters.Add("@ADDRESS_3", SqlDbType.VarChar, 100).Value = CUS.ADDRESS_3;
                    cmd.Parameters.Add("@ADDRESS_4", SqlDbType.VarChar, 100).Value = CUS.ADDRESS_4;
                    cmd.Parameters.Add("@LOCATION", SqlDbType.VarChar, 100).Value = CUS.LOCATION;
                    cmd.Parameters.Add("@TAX_ID", SqlDbType.VarChar, 50).Value = CUS.TAX_ID;
                    if ((CUS.START_CONTRACT_DATE == DateTime.MinValue) || (CUS.START_CONTRACT_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@START_CONTRACT_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@START_CONTRACT_DATE", SqlDbType.DateTime).Value = CUS.START_CONTRACT_DATE;

                    if ((CUS.LAST_CONTRACT_DATE == DateTime.MinValue) || (CUS.LAST_CONTRACT_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@LAST_CONTRACT_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@LAST_CONTRACT_DATE", SqlDbType.DateTime).Value = CUS.LAST_CONTRACT_DATE;
                    cmd.Parameters.Add("@SALE_ENABLED_STATUS", SqlDbType.Bit).Value = CUS.SALE_ENABLED_STATUS;
                    cmd.Parameters.Add("@PRICE_STEP", SqlDbType.Char, 1).Value = CUS.PRICE_STEP;
                    cmd.Parameters.Add("@CREDIT_LIMIT", SqlDbType.Decimal).Value = CUS.CREDIT_LIMIT;
                    cmd.Parameters.Add("@CUSTOMER_CREDIT_TERM", SqlDbType.SmallInt).Value = CUS.CUSTOMER_CREDIT_TERM;
                    cmd.Parameters.Add("@BILL_TYPE_CODE", SqlDbType.Char, 1).Value = CUS.BILL_TYPE_CODE;
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUS.CUSTOMER_ID;
                            break;
                    }

                    cmd.Transaction = tran;
                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        CUSid = CUS.CUSTOMER_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        CUSid = (decimal)cmd.ExecuteScalar();
                        CUS.CUSTOMER_ID = Convert.ToInt32(CUSid);
                    }

                    #endregion

                    #region ผู้ติดต่อ
                    if (dsData.Tables.Contains("D_CUSTOMER_CONTRACTORS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_CONTRACTORS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CONTRACTORS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_CONTRACTORS WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("CONTRACTOR_NAME,");
                                    sb.AppendLine("DEPARTMENT,");
                                    sb.AppendLine("CONTRACTTOR_POSITION,");
                                    sb.AppendLine("TEL_NO,");
                                    sb.AppendLine("TEL_NO_EXT,");
                                    sb.AppendLine("MEDIA_TYPE,");
                                    sb.AppendLine("REMARK,");
                                    sb.AppendLine("HIRE_DATE,");
                                    sb.AppendLine("PICTURE_FILE_NAME,");
                                    sb.AppendLine("PICTURE_IMAGE,");
                                    sb.AppendLine("SIGNATURE_FILE_NAME");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@CONTRACTOR_NAME,");
                                    sb.AppendLine("@DEPARTMENT,");
                                    sb.AppendLine("@CONTRACTTOR_POSITION,");
                                    sb.AppendLine("@TEL_NO,");
                                    sb.AppendLine("@TEL_NO_EXT,");
                                    sb.AppendLine("@MEDIA_TYPE,");
                                    sb.AppendLine("@REMARK,");
                                    sb.AppendLine("@HIRE_DATE,");
                                    sb.AppendLine("@PICTURE_FILE_NAME,");
                                    sb.AppendLine("@PICTURE_IMAGE,");
                                    sb.AppendLine("@SIGNATURE_FILE_NAME)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CONTRACTORS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("CONTRACTOR_NAME =@CONTRACTOR_NAME,");
                                    sb.AppendLine("DEPARTMENT =@DEPARTMENT,");
                                    sb.AppendLine("CONTRACTTOR_POSITION =@CONTRACTTOR_POSITION,");
                                    sb.AppendLine("TEL_NO =@TEL_NO,");
                                    sb.AppendLine("TEL_NO_EXT =@TEL_NO_EXT,");
                                    sb.AppendLine("MEDIA_TYPE =@MEDIA_TYPE,");
                                    sb.AppendLine("REMARK =@REMARK,");
                                    sb.AppendLine("HIRE_DATE =@HIRE_DATE,");
                                    sb.AppendLine("PICTURE_FILE_NAME =@PICTURE_FILE_NAME,");
                                    sb.AppendLine("PICTURE_IMAGE =@PICTURE_IMAGE,");
                                    sb.AppendLine("SIGNATURE_FILE_NAME =@SIGNATURE_FILE_NAME");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_CONTRACTORS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@CONTRACTOR_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CONTRACTOR_NAME"]);
                            cmd.Parameters.Add("@DEPARTMENT", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["DEPARTMENT"]);
                            cmd.Parameters.Add("@CONTRACTTOR_POSITION", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CONTRACTTOR_POSITION"]);
                            cmd.Parameters.Add("@TEL_NO", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["TEL_NO"]);
                            cmd.Parameters.Add("@TEL_NO_EXT", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["TEL_NO_EXT"]);
                            cmd.Parameters.Add("@MEDIA_TYPE", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["MEDIA_TYPE"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);
                            cmd.Parameters.Add("@HIRE_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["HIRE_DATE"]);
                            cmd.Parameters.Add("@PICTURE_FILE_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["PICTURE_FILE_NAME"]);

                            if (string.IsNullOrEmpty(dr["PICTURE_FILE_NAME"].ToString()))
                            {
                                cmd.Parameters.Add("@PICTURE_IMAGE", SqlDbType.Image).Value = DBNull.Value;
                            }
                            else
                            {
                                var picbyte = (Byte[])(dr["PICTURE_IMAGE"]);
                                MemoryStream MemoryStreamData = new MemoryStream(picbyte);
                                Image image = System.Drawing.Image.FromStream(MemoryStreamData);
                                image.Save(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                                byte[] imageData = Class_ImageResize.ReadFile(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                                cmd.Parameters.Add(new SqlParameter("@PICTURE_IMAGE", (object)imageData));
                            }
                            cmd.Parameters.Add("@SIGNATURE_FILE_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["SIGNATURE_FILE_NAME"]);
                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ที่อยู่
                    //if (dsData.Tables.Contains("D_CUSTOMER_ADDRESSES"))
                    //{
                    //  foreach (DataRow dr in dsData.Tables["D_CUSTOMER_ADDRESSES"].Rows)
                    //  {
                    //    //irow++;
                    //    switch (cls_Library.DBInt(dr["mode"]))
                    //    {
                    //      case (int)cls_Struct.ActionMode.Add:
                    //        irow++;
                    //        sb.Clear();
                    //        sb.AppendLine("INSERT INTO D_CUSTOMER_ADDRESSES WITH (UPDLOCK) (");
                    //        sb.AppendLine("CUSTOMER_ID,");
                    //        sb.AppendLine("LIST_NO,");
                    //        sb.AppendLine("ADDRESS_TYPE,");
                    //        sb.AppendLine("ADDRESS_1,");
                    //        sb.AppendLine("ADDRESS_2,");
                    //        sb.AppendLine("ADDRESS_3,");
                    //        sb.AppendLine("ADDRESS_4");
                    //        sb.AppendLine(") VALUES (");
                    //        sb.AppendLine("@CUSTOMER_ID,");
                    //        sb.AppendLine("@LIST_NO,");
                    //        sb.AppendLine("@ADDRESS_TYPE,");
                    //        sb.AppendLine("@ADDRESS_1,");
                    //        sb.AppendLine("@ADDRESS_2,");
                    //        sb.AppendLine("@ADDRESS_3,");
                    //        sb.AppendLine("@ADDRESS_4)");
                    //        break;
                    //      case (int)cls_Struct.ActionMode.Edit:
                    //        irow++;
                    //        sb.Clear();
                    //        sb.AppendLine("UPDATE D_CUSTOMER_ADDRESSES WITH (UPDLOCK) SET");
                    //        sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                    //        sb.AppendLine("LIST_NO =@LIST_NO,");
                    //        sb.AppendLine("ADDRESS_TYPE =@ADDRESS_TYPE,");
                    //        sb.AppendLine("ADDRESS_1 =@ADDRESS_1,");
                    //        sb.AppendLine("ADDRESS_2 =@ADDRESS_2,");
                    //        sb.AppendLine("ADDRESS_3 =@ADDRESS_3,");
                    //        sb.AppendLine("ADDRESS_4 =@ADDRESS_4");
                    //        sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                    //        break;
                    //      case (int)cls_Struct.ActionMode.Delete:
                    //        //XXXXXXXXX
                    //        break;
                    //    }

                    //    cmd = new SqlCommand();
                    //    cmd.Connection = conn;
                    //    cmd.CommandText = sb.ToString();
                    //    cmd.CommandTimeout = 30;
                    //    cmd.CommandType = CommandType.Text;
                    //    cmd.Parameters.Clear();

                    //    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                    //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    //    cmd.Parameters.Add("@ADDRESS_TYPE", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ADDRESS_TYPE"]);
                    //    cmd.Parameters.Add("@ADDRESS_1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ADDRESS_1"]);
                    //    cmd.Parameters.Add("@ADDRESS_2", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ADDRESS_2"]);
                    //    cmd.Parameters.Add("@ADDRESS_3", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ADDRESS_3"]);
                    //    cmd.Parameters.Add("@ADDRESS_4", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ADDRESS_4"]);
                    //    if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                    //    {
                    //      cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    //    }

                    //    cmd.Transaction = tran;
                    //    cmd.ExecuteNonQuery();
                    //  }
                    //}
                    #endregion

                    #region ชื่อจ่ายเช็ค
                    if (dsData.Tables.Contains("D_CUSTOMER_CHEQUES"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_CHEQUES"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CHEQUES WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_CHEQUES WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("CHEQUE_NAME,");
                                    sb.AppendLine("REMARK,");
                                    sb.AppendLine("CHEQUE_STATUS");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@CHEQUE_NAME,");
                                    sb.AppendLine("@REMARK,");
                                    sb.AppendLine("@CHEQUE_STATUS)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CHEQUES WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("CHEQUE_NAME =@CHEQUE_NAME,");
                                    sb.AppendLine("REMARK =@REMARK,");
                                    sb.AppendLine("CHEQUE_STATUS =@CHEQUE_STATUS");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_CHEQUES WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@CHEQUE_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CHEQUE_NAME"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);
                            cmd.Parameters.Add("@CHEQUE_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["CHEQUE_STATUS"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region บัญชีธนาคาร
                    if (dsData.Tables.Contains("D_CUSTOMER_BANKS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_BANKS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_BANKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_BANKS WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("BANK_ID,");
                                    sb.AppendLine("BRANCH_ID,");
                                    sb.AppendLine("BRANCH_NAME,");
                                    sb.AppendLine("ACCOUNT_NO,");
                                    sb.AppendLine("ACCOUNT_NAME,");
                                    sb.AppendLine("ACCOUNT_STATUS,");
                                    sb.AppendLine("REMARK");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@BANK_ID,");
                                    sb.AppendLine("@BRANCH_ID,");
                                    sb.AppendLine("@BRANCH_NAME,");
                                    sb.AppendLine("@ACCOUNT_NO,");
                                    sb.AppendLine("@ACCOUNT_NAME,");
                                    sb.AppendLine("@ACCOUNT_STATUS,");
                                    sb.AppendLine("@REMARK)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_BANKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("BANK_ID =@BANK_ID,");
                                    sb.AppendLine("BRANCH_ID =@BRANCH_ID,");
                                    sb.AppendLine("BRANCH_NAME =@BRANCH_NAME,");
                                    sb.AppendLine("ACCOUNT_NO =@ACCOUNT_NO,");
                                    sb.AppendLine("ACCOUNT_NAME =@ACCOUNT_NAME,");
                                    sb.AppendLine("ACCOUNT_STATUS =@ACCOUNT_STATUS,");
                                    sb.AppendLine("REMARK =@REMARK");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_BANKS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@BANK_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BANK_ID"]);
                            cmd.Parameters.Add("@BRANCH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRANCH_ID"]);
                            cmd.Parameters.Add("@BRANCH_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["BRANCH_NAME"]);
                            cmd.Parameters.Add("@ACCOUNT_NO", SqlDbType.Char, 10).Value = cls_Library.DBString(dr["ACCOUNT_NO"]);
                            cmd.Parameters.Add("@ACCOUNT_NAME", SqlDbType.NVarChar, 50).Value = cls_Library.DBString(dr["ACCOUNT_NAME"]);
                            cmd.Parameters.Add("@ACCOUNT_STATUS", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["ACCOUNT_STATUS"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ทะเบียนรถยนต์
                    if (dsData.Tables.Contains("D_CUSTOMER_CARS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_CARS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CARS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_CARS WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("CAR_LICENSE_PLATE,");
                                    sb.AppendLine("CAR_BRAND_NAME,");
                                    sb.AppendLine("CAR_MODEL,");
                                    sb.AppendLine("CAR_YEAR,");
                                    sb.AppendLine("REMARK");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@CAR_LICENSE_PLATE,");
                                    sb.AppendLine("@CAR_BRAND_NAME,");
                                    sb.AppendLine("@CAR_MODEL,");
                                    sb.AppendLine("@CAR_YEAR,");
                                    sb.AppendLine("@REMARK)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_CARS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("CAR_LICENSE_PLATE =@CAR_LICENSE_PLATE,");
                                    sb.AppendLine("CAR_BRAND_NAME =@CAR_BRAND_NAME,");
                                    sb.AppendLine("CAR_MODEL =@CAR_MODEL,");
                                    sb.AppendLine("CAR_YEAR =@CAR_YEAR,");
                                    sb.AppendLine("REMARK =@REMARK");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_CARS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@CAR_LICENSE_PLATE", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CAR_LICENSE_PLATE"]);
                            cmd.Parameters.Add("@CAR_BRAND_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CAR_BRAND_NAME"]);
                            cmd.Parameters.Add("@CAR_MODEL", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CAR_MODEL"]);
                            cmd.Parameters.Add("@CAR_YEAR", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CAR_YEAR"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["REMARK"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ประวัติการติดตามหนี้
                    if (dsData.Tables.Contains("D_CUSTOMER_TRACKS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_TRACKS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_TRACKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_TRACKS WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("TRACK_DATE,");
                                    sb.AppendLine("USER_ID,");
                                    sb.AppendLine("REMARK");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@TRACK_DATE,");
                                    sb.AppendLine("@USER_ID,");
                                    sb.AppendLine("@REMARK)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_TRACKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("TRACK_DATE =@TRACK_DATE,");
                                    sb.AppendLine("USER_ID =@USER_ID,");
                                    sb.AppendLine("REMARK =@REMARK");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_TRACKS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@TRACK_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["TRACK_DATE"]);
                            cmd.Parameters.Add("@USER_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["USER_ID"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ยี่ห้อสินค้าที่ได้รับส่วนลด
                    if (dsData.Tables.Contains("D_CUSTOMER_BRAND_DISCOUNT_STEPS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_CUSTOMER_BRAND_DISCOUNT_STEPS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_BRAND_DISCOUNT_STEPS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_CUSTOMER_BRAND_DISCOUNT_STEPS WITH (UPDLOCK) (");
                                    sb.AppendLine("CUSTOMER_ID,");
                                    sb.AppendLine("BRAND_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP1,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP2,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP3,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP4");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@CUSTOMER_ID,");
                                    sb.AppendLine("@BRAND_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@DISCOUNT_RATE_STEP1,");
                                    sb.AppendLine("@DISCOUNT_RATE_STEP2,");
                                    sb.AppendLine("@DISCOUNT_RATE_STEP3,");
                                    sb.AppendLine("@DISCOUNT_RATE_STEP4)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_CUSTOMER_BRAND_DISCOUNT_STEPS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("CUSTOMER_ID =@CUSTOMER_ID,");
                                    sb.AppendLine("BRAND_ID =@BRAND_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP1 =@DISCOUNT_RATE_STEP1,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP2 =@DISCOUNT_RATE_STEP2,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP3 =@DISCOUNT_RATE_STEP3,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP4 =@DISCOUNT_RATE_STEP4");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_CUSTOMER_BRAND_DISCOUNT_STEPS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CUSid;
                            cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@DISCOUNT_RATE_STEP1", SqlDbType.Decimal).Value = cls_Library.DBDouble(dr["DISCOUNT_RATE_STEP1"]);
                            cmd.Parameters.Add("@DISCOUNT_RATE_STEP2", SqlDbType.Decimal).Value = cls_Library.DBDouble(dr["DISCOUNT_RATE_STEP2"]);
                            cmd.Parameters.Add("@DISCOUNT_RATE_STEP3", SqlDbType.Decimal).Value = cls_Library.DBDouble(dr["DISCOUNT_RATE_STEP3"]);
                            cmd.Parameters.Add("@DISCOUNT_RATE_STEP4", SqlDbType.Decimal).Value = cls_Library.DBDouble(dr["DISCOUNT_RATE_STEP4"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion


                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                result = false;
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = CUS.CUSTOMER_ID;
            }

            return result;
        }

        #endregion

        #region Vendors

        public static bool DeleteVendor(int _id)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DateTime _date;
            try
            {
                _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    sb.AppendLine("Update M_VENDORS WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where VENDOR_ID =@VENDOR_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int, 4).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ชื่อผู้ติดต่อ
                    sb.Clear();
                    sb.AppendLine("Delete From D_VENDOR_CONTRACTORS WHERE VENDOR_ID=@VENDOR_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();


                    //ชื่อจ่ายเช็ค
                    sb.Clear();
                    sb.AppendLine("Delete From D_VENDOR_CHEQUES WHERE VENDOR_ID=@VENDOR_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //บัญชีธนาคาร
                    sb.Clear();
                    sb.AppendLine("Delete From D_VENDOR_BANKS WHERE VENDOR_ID=@VENDOR_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ประเภทสินค้า
                    sb.Clear();
                    sb.AppendLine("Delete From D_VENDOR_CREDIT_TERMS WHERE VENDOR_ID=@VENDOR_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ที่อยู่
                    sb.Clear();
                    sb.AppendLine("Delete From D_VENDOR_ADDRESSES WHERE VENDOR_ID=@VENDOR_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = _id;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                result = false;
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetListVendors()
        {
            DataSet ds = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select * From M_VENDORS Where DELETED = 0 Order by VENDOR_CODE");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.Fill(ds, "M_VENDORS");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListVendors :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return ds;
        }

        public static DataSet GetVendorById(int VendorId)
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";
            try
            {
                //รหัสลูกค้า
                sqltex = string.Format("Select * From M_VENDORS Where VENDOR_ID = {0}", VendorId);
                LoadSpecifyData(sqltex, out dt, "M_VENDORS");
                ds.Tables.Add(dt);

                //ผู้ติดต่อ
                sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_VENDOR_CONTRACTORS Where VENDOR_ID = {0} Order By LIST_NO", VendorId);
                LoadSpecifyData(sqltex, out dt, "D_VENDOR_CONTRACTORS");
                ds.Tables.Add(dt);

                //ที่อยู่
                //sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_VENDOR_ADDRESSES Where VENDOR_ID = {0} Order By SEQUENSE_NO", VendorId);
                //LoadSpecifyData(sqltex, out dt, "D_VENDOR_ADDRESSES");
                //ds.Tables.Add(dt);

                //ชื่อจ่ายเช็ค
                sqltex = string.Format("Select -1 AS mode, -1 AS change,* From D_VENDOR_CHEQUES Where VENDOR_ID = {0} Order By LIST_NO", VendorId);
                LoadSpecifyData(sqltex, out dt, "D_VENDOR_CHEQUES");
                ds.Tables.Add(dt);

                //บัญชีธนาคาร
                //sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.ABBREVIATE_NAME, B.FULL_NAME, C.BRANCH_NAME From D_VENDOR_BANKS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID INNER JOIN D_BANK_BRANCHS C ON A.BRANCH_ID = C.BRANCH_ID And A.BANK_ID = C.BANK_ID Where A.VENDOR_ID = {0} Order By A.LIST_NO", VendorId);
                sqltex = string.Format("Select -1 AS mode, -1 AS change,A.*, B.ABBREVIATE_NAME, B.FULL_NAME From D_VENDOR_BANKS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID Where A.VENDOR_ID = {0} Order By A.LIST_NO", VendorId);
                LoadSpecifyData(sqltex, out dt, "D_VENDOR_BANKS");
                ds.Tables.Add(dt);


                //ประเภทสินค้า
                sqltex = string.Format("Select -1 AS mode, -1 AS change,*,case VAT_STATUS when 'E' then 'Vat นอก' when 'I' then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS From D_VENDOR_CREDIT_TERMS Where VENDOR_ID = {0} Order By LIST_NO", VendorId);
                LoadSpecifyData(sqltex, out dt, "D_VENDOR_CREDIT_TERMS");
                ds.Tables.Add(dt);
            }
            catch (Exception)
            {
            }
            return ds;

        }

        public static bool SaveVendorCode(cls_Struct.ActionMode mode, cls_Struct.StructVENDORS VEN, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal VENid = 0;
            int irow = 0;
            string strBasePath = Application.StartupPath + "\\Photos";
            if (!Directory.Exists(strBasePath)) Directory.CreateDirectory(strBasePath);

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region รหัสพ่อค้า
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_VENDORS WITH (UPDLOCK) (");
                            sb.AppendLine("VENDOR_CODE,");
                            sb.AppendLine("VENDOR_NAME,");
                            sb.AppendLine("DETAIL_1,");
                            sb.AppendLine("DETAIL_2,");
                            sb.AppendLine("DETAIL_3,");
                            sb.AppendLine("REMARK,");
                            sb.AppendLine("E_MAIL,");
                            sb.AppendLine("ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4,");
                            sb.AppendLine("LOCATION,");
                            sb.AppendLine("TAX_ID,");
                            sb.AppendLine("START_CONTRACT_DATE,");
                            sb.AppendLine("LAST_CONTRACT_DATE,");
                            sb.AppendLine("MAP_FILE_NAME,");
                            sb.AppendLine("MAP_IMAGE,");
                            sb.AppendLine("MDETAIL_1,");
                            sb.AppendLine("MDETAIL_2,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@VENDOR_CODE,");
                            sb.AppendLine("@VENDOR_NAME,");
                            sb.AppendLine("@DETAIL_1,");
                            sb.AppendLine("@DETAIL_2,");
                            sb.AppendLine("@DETAIL_3,");
                            sb.AppendLine("@REMARK,");
                            sb.AppendLine("@E_MAIL,");
                            sb.AppendLine("@ADDRESS_1,");
                            sb.AppendLine("@ADDRESS_2,");
                            sb.AppendLine("@ADDRESS_3,");
                            sb.AppendLine("@ADDRESS_4,");
                            sb.AppendLine("@LOCATION,");
                            sb.AppendLine("@TAX_ID,");
                            sb.AppendLine("@START_CONTRACT_DATE,");
                            sb.AppendLine("@LAST_CONTRACT_DATE,");
                            sb.AppendLine("@MAP_FILE_NAME,");
                            sb.AppendLine("@MAP_IMAGE,");
                            sb.AppendLine("@MDETAIL_1,");
                            sb.AppendLine("@MDETAIL_2,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY]");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE M_VENDORS WITH (UPDLOCK) SET");
                            sb.AppendLine("VENDOR_CODE =@VENDOR_CODE,");
                            sb.AppendLine("VENDOR_NAME =@VENDOR_NAME,");
                            sb.AppendLine("DETAIL_1 =@DETAIL_1,");
                            sb.AppendLine("DETAIL_2 =@DETAIL_2,");
                            sb.AppendLine("DETAIL_3 =@DETAIL_3,");
                            sb.AppendLine("REMARK =@REMARK,");
                            sb.AppendLine("E_MAIL =@E_MAIL,");
                            sb.AppendLine("ADDRESS_1 =@ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2 =@ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3 =@ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4 =@ADDRESS_4,");
                            sb.AppendLine("LOCATION =@LOCATION,");
                            sb.AppendLine("TAX_ID =@TAX_ID,");
                            sb.AppendLine("START_CONTRACT_DATE =@START_CONTRACT_DATE,");
                            sb.AppendLine("LAST_CONTRACT_DATE =@LAST_CONTRACT_DATE,");
                            sb.AppendLine("MAP_FILE_NAME =@MAP_FILE_NAME,");
                            sb.AppendLine("MAP_IMAGE =@MAP_IMAGE,");
                            sb.AppendLine("MDETAIL_1 =@MDETAIL_1,");
                            sb.AppendLine("MDETAIL_2 =@MDETAIL_2,");
                            sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                            sb.AppendLine("WHERE VENDOR_ID =@VENDOR_ID");
                            break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@VENDOR_CODE", SqlDbType.Char, 4).Value = VEN.VENDOR_CODE;
                    cmd.Parameters.Add("@VENDOR_NAME", SqlDbType.VarChar, 100).Value = VEN.VENDOR_NAME;
                    cmd.Parameters.Add("@DETAIL_1", SqlDbType.VarChar, 255).Value = VEN.DETAIL_1;
                    cmd.Parameters.Add("@DETAIL_2", SqlDbType.VarChar, 255).Value = VEN.DETAIL_2;
                    cmd.Parameters.Add("@DETAIL_3", SqlDbType.VarChar, 255).Value = VEN.DETAIL_3;
                    cmd.Parameters.Add("@REMARK", SqlDbType.NVarChar, 500).Value = VEN.REMARK;
                    cmd.Parameters.Add("@E_MAIL", SqlDbType.VarChar, 50).Value = VEN.E_MAIL;
                    cmd.Parameters.Add("@ADDRESS_1", SqlDbType.VarChar, 100).Value = VEN.ADDRESS_1;
                    cmd.Parameters.Add("@ADDRESS_2", SqlDbType.VarChar, 100).Value = VEN.ADDRESS_2;
                    cmd.Parameters.Add("@ADDRESS_3", SqlDbType.VarChar, 100).Value = VEN.ADDRESS_3;
                    cmd.Parameters.Add("@ADDRESS_4", SqlDbType.VarChar, 100).Value = VEN.ADDRESS_4;
                    cmd.Parameters.Add("@LOCATION", SqlDbType.VarChar, 100).Value = VEN.LOCATION;
                    cmd.Parameters.Add("@TAX_ID", SqlDbType.VarChar, 50).Value = VEN.TAX_ID;
                    if ((VEN.START_CONTRACT_DATE == DateTime.MinValue) || (VEN.START_CONTRACT_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@START_CONTRACT_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@START_CONTRACT_DATE", SqlDbType.DateTime).Value = VEN.START_CONTRACT_DATE;

                    if ((VEN.LAST_CONTRACT_DATE == DateTime.MinValue) || (VEN.LAST_CONTRACT_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@LAST_CONTRACT_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@LAST_CONTRACT_DATE", SqlDbType.DateTime).Value = VEN.LAST_CONTRACT_DATE;
                    cmd.Parameters.Add("@MAP_FILE_NAME", SqlDbType.VarChar, 50).Value = VEN.MAP_FILE_NAME;

                    if (string.IsNullOrEmpty(VEN.MAP_FILE_NAME))
                        cmd.Parameters.Add("@MAP_IMAGE", SqlDbType.Image).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add(new SqlParameter("@MAP_IMAGE", (object)VEN.MAP_IMAGE));

                    cmd.Parameters.Add("@MDETAIL_1", SqlDbType.VarChar, 500).Value = VEN.MDETAIL_1;
                    cmd.Parameters.Add("@MDETAIL_2", SqlDbType.VarChar, 500).Value = VEN.MDETAIL_2;
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = VEN.VENDOR_ID;
                            break;
                    }

                    cmd.Transaction = tran;
                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        VENid = VEN.VENDOR_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        VENid = (decimal)cmd.ExecuteScalar();
                        VEN.VENDOR_ID = Convert.ToInt32(VENid);
                    }

                    #endregion

                    #region ผู้ติดต่อ
                    if (dsData.Tables.Contains("D_VENDOR_CONTRACTORS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_VENDOR_CONTRACTORS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CONTRACTORS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_VENDOR_CONTRACTORS WITH (UPDLOCK) (");
                                    sb.AppendLine("VENDOR_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("CONTRACTOR_NAME,");
                                    sb.AppendLine("DEPARTMENT,");
                                    sb.AppendLine("CONTRACTOR_POSITION,");
                                    sb.AppendLine("TEL_NO,");
                                    sb.AppendLine("TEL_NO_EXT,");
                                    sb.AppendLine("MEDIA_TYPE,");
                                    sb.AppendLine("REMARK,");
                                    sb.AppendLine("HIRE_DATE,");
                                    sb.AppendLine("PICTURE_FILE_NAME,");
                                    sb.AppendLine("PICTURE_IMAGE,");
                                    sb.AppendLine("SIGNATURE_FILE_NAME");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@VENDOR_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@CONTRACTOR_NAME,");
                                    sb.AppendLine("@DEPARTMENT,");
                                    sb.AppendLine("@CONTRACTOR_POSITION,");
                                    sb.AppendLine("@TEL_NO,");
                                    sb.AppendLine("@TEL_NO_EXT,");
                                    sb.AppendLine("@MEDIA_TYPE,");
                                    sb.AppendLine("@REMARK,");
                                    sb.AppendLine("@HIRE_DATE,");
                                    sb.AppendLine("@PICTURE_FILE_NAME,");
                                    sb.AppendLine("@PICTURE_IMAGE,");
                                    sb.AppendLine("@SIGNATURE_FILE_NAME)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CONTRACTORS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("VENDOR_ID =@VENDOR_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("CONTRACTOR_NAME =@CONTRACTOR_NAME,");
                                    sb.AppendLine("DEPARTMENT =@DEPARTMENT,");
                                    sb.AppendLine("CONTRACTOR_POSITION =@CONTRACTOR_POSITION,");
                                    sb.AppendLine("TEL_NO =@TEL_NO,");
                                    sb.AppendLine("TEL_NO_EXT =@TEL_NO_EXT,");
                                    sb.AppendLine("MEDIA_TYPE =@MEDIA_TYPE,");
                                    sb.AppendLine("REMARK =@REMARK,");
                                    sb.AppendLine("HIRE_DATE =@HIRE_DATE,");
                                    sb.AppendLine("PICTURE_FILE_NAME =@PICTURE_FILE_NAME,");
                                    sb.AppendLine("PICTURE_IMAGE =@PICTURE_IMAGE,");
                                    sb.AppendLine("SIGNATURE_FILE_NAME =@SIGNATURE_FILE_NAME");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_VENDOR_CONTRACTORS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = VENid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@CONTRACTOR_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CONTRACTOR_NAME"]);
                            cmd.Parameters.Add("@DEPARTMENT", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["DEPARTMENT"]);
                            cmd.Parameters.Add("@CONTRACTOR_POSITION", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CONTRACTOR_POSITION"]);
                            cmd.Parameters.Add("@TEL_NO", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["TEL_NO"]);
                            cmd.Parameters.Add("@TEL_NO_EXT", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["TEL_NO_EXT"]);
                            cmd.Parameters.Add("@MEDIA_TYPE", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["MEDIA_TYPE"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);
                            cmd.Parameters.Add("@HIRE_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["HIRE_DATE"]);
                            cmd.Parameters.Add("@PICTURE_FILE_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["PICTURE_FILE_NAME"]);

                            if (string.IsNullOrEmpty(dr["PICTURE_FILE_NAME"].ToString()))
                            {
                                cmd.Parameters.Add("@PICTURE_IMAGE", SqlDbType.Image).Value = DBNull.Value;
                            }
                            else
                            {
                                var _picbyte = (Byte[])(dr["PICTURE_IMAGE"]);
                                MemoryStream _MemoryStreamData = new MemoryStream(_picbyte);
                                Image _image = System.Drawing.Image.FromStream(_MemoryStreamData);
                                _image.Save(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                                byte[] _imageData = Class_ImageResize.ReadFile(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                                cmd.Parameters.Add(new SqlParameter("@PICTURE_IMAGE", (object)_imageData));
                            }
                            cmd.Parameters.Add("@SIGNATURE_FILE_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["SIGNATURE_FILE_NAME"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ชื่อจ่ายเช็ค
                    if (dsData.Tables.Contains("D_VENDOR_CHEQUES"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_VENDOR_CHEQUES"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CHEQUES WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_VENDOR_CHEQUES WITH (UPDLOCK) (");
                                    sb.AppendLine("VENDOR_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("CHEQUE_NAME,");
                                    sb.AppendLine("REMARK,");
                                    sb.AppendLine("CHEQUE_STATUS");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@VENDOR_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@CHEQUE_NAME,");
                                    sb.AppendLine("@REMARK,");
                                    sb.AppendLine("@CHEQUE_STATUS)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CHEQUES WITH (UPDLOCK) SET ");
                                    sb.AppendLine("VENDOR_ID =@VENDOR_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("CHEQUE_NAME =@CHEQUE_NAME,");
                                    sb.AppendLine("REMARK =@REMARK,");
                                    sb.AppendLine("CHEQUE_STATUS =@CHEQUE_STATUS");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_VENDOR_CHEQUES WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = VENid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@CHEQUE_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CHEQUE_NAME"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);
                            cmd.Parameters.Add("@CHEQUE_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["CHEQUE_STATUS"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region บัญชีธนาคาร
                    if (dsData.Tables.Contains("D_VENDOR_BANKS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_VENDOR_BANKS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_BANKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_VENDOR_BANKS WITH (UPDLOCK) (");
                                    sb.AppendLine("VENDOR_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("BANK_ID,");
                                    sb.AppendLine("BRANCH_ID,");
                                    sb.AppendLine("BRANCH_NAME,");
                                    sb.AppendLine("ACCOUNT_NO,");
                                    sb.AppendLine("ACCOUNT_NAME,");
                                    sb.AppendLine("ACCOUNT_STATUS,");
                                    sb.AppendLine("REMARK");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@VENDOR_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@BANK_ID,");
                                    sb.AppendLine("@BRANCH_ID,");
                                    sb.AppendLine("@BRANCH_NAME,");
                                    sb.AppendLine("@ACCOUNT_NO,");
                                    sb.AppendLine("@ACCOUNT_NAME,");
                                    sb.AppendLine("@ACCOUNT_STATUS,");
                                    sb.AppendLine("@REMARK)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_BANKS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("VENDOR_ID =@VENDOR_ID,");
                                    sb.AppendLine("BANK_ID =@BANK_ID,");
                                    sb.AppendLine("BRANCH_ID =@BRANCH_ID,");
                                    sb.AppendLine("BRANCH_NAME =@BRANCH_NAME,");
                                    sb.AppendLine("ACCOUNT_NO =@ACCOUNT_NO,");
                                    sb.AppendLine("ACCOUNT_NAME =@ACCOUNT_NAME,");
                                    sb.AppendLine("ACCOUNT_STATUS =@ACCOUNT_STATUS,");
                                    sb.AppendLine("REMARK =@REMARK");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_VENDOR_BANKS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = VENid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@BANK_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BANK_ID"]);
                            cmd.Parameters.Add("@BRANCH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRANCH_ID"]);
                            cmd.Parameters.Add("@BRANCH_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["BRANCH_NAME"]);
                            cmd.Parameters.Add("@ACCOUNT_NO", SqlDbType.Char, 10).Value = cls_Library.DBString(dr["ACCOUNT_NO"]);
                            cmd.Parameters.Add("@ACCOUNT_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ACCOUNT_NAME"]);
                            cmd.Parameters.Add("@ACCOUNT_STATUS", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["ACCOUNT_STATUS"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["REMARK"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ประเภทสินค้า
                    if (dsData.Tables.Contains("D_VENDOR_CREDIT_TERMS"))
                    {
                        irow = 0;
                        foreach (DataRow dr in dsData.Tables["D_VENDOR_CREDIT_TERMS"].Rows)
                        {
                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case -1:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CREDIT_TERMS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                    continue;
                                case (int)cls_Struct.ActionMode.Add:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_VENDOR_CREDIT_TERMS WITH (UPDLOCK) (");
                                    sb.AppendLine("VENDOR_ID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("ITEM_TYPE,");
                                    sb.AppendLine("VAT_STATUS,");
                                    sb.AppendLine("CREDIT_TERM,");
                                    sb.AppendLine("REMARK");
                                    sb.AppendLine(") VALUES(");
                                    sb.AppendLine("@VENDOR_ID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@ITEM_TYPE,");
                                    sb.AppendLine("@VAT_STATUS,");
                                    sb.AppendLine("@CREDIT_TERM,");
                                    sb.AppendLine("@REMARK)");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_VENDOR_CREDIT_TERMS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("VENDOR_ID =@VENDOR_ID,");
                                    sb.AppendLine("LIST_NO =@LIST_NO,");
                                    sb.AppendLine("ITEM_TYPE =@ITEM_TYPE,");
                                    sb.AppendLine("VAT_STATUS =@VAT_STATUS,");
                                    sb.AppendLine("CREDIT_TERM =@CREDIT_TERM,");
                                    sb.AppendLine("REMARK =@REMARK");
                                    sb.AppendLine("WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    {
                                        sb.Clear();
                                        sb.AppendLine("Delete From D_VENDOR_CREDIT_TERMS WHERE SEQUENSE_NO =@SEQUENSE_NO");

                                        cmd = new SqlCommand();
                                        cmd.Connection = conn;
                                        cmd.CommandText = sb.ToString();
                                        cmd.CommandTimeout = 30;
                                        cmd.CommandType = CommandType.Text;
                                        cmd.Parameters.Clear();
                                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                        cmd.Transaction = tran;
                                        cmd.ExecuteNonQuery();
                                        continue;
                                    }
                                default:
                                    continue;
                            }

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = VENid;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Parameters.Add("@ITEM_TYPE", SqlDbType.VarChar, 30).Value = cls_Library.DBString(dr["ITEM_TYPE"]);
                            cmd.Parameters.Add("@VAT_STATUS", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["VAT_STATUS"]);
                            cmd.Parameters.Add("@CREDIT_TERM", SqlDbType.Int).Value = cls_Library.DBInt(dr["CREDIT_TERM"]);
                            cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["REMARK"]);

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ที่อยู่

                    #endregion

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                result = false;
                throw ex;
            }

            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = VEN.VENDOR_ID;
            }

            return result;
        }

        #endregion

        public static bool LoadSpecifyData(string sqlcmd, out DataTable ReturnDatatable, string TableName)
        {
            SqlConnection conn = new SqlConnection();
            using (SqlDataAdapter _dataAdapter = new SqlDataAdapter())
            {
                DataSet _dataSet = new DataSet();

                bool retok = false;

                ReturnDatatable = new DataTable(TableName);
                cls_Global_DB.ConnectDatabase(ref conn);
                if (conn.State == ConnectionState.Open)
                {
                    try
                    {
                        _dataAdapter.SelectCommand = new SqlCommand(sqlcmd, conn);
                        _dataAdapter.SelectCommand.Parameters.Clear();
                        _dataAdapter.Fill(_dataSet, TableName);
                        ReturnDatatable = _dataSet.Tables[0].Copy();
                        retok = true;
                    }
                    catch
                    {
                        ReturnDatatable = null;
                        retok = false;
                    }
                    finally
                    {
                        cls_Global_DB.CloseDB(ref conn);
                        conn.Dispose();
                        GC.Collect();
                    }
                }
                else
                {
                    ReturnDatatable = null;
                    retok = false;
                }
                return retok;
            }
        }

        public static bool LoadSpecifyDataSP(out DataTable ReturnDatatable, string TableName, string SPname, int ItemID)
        {
            SqlConnection conn = new SqlConnection();
            using (SqlDataAdapter _dataAdapter = new SqlDataAdapter())
            {
                DataSet _dataSet = new DataSet();
                SqlCommand command = new SqlCommand();

                bool retok = false;

                ReturnDatatable = new DataTable(TableName);
                cls_Global_DB.ConnectDatabase(ref conn);
                if (conn.State == ConnectionState.Open)
                {
                    try
                    {
                        command.Connection = conn;
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = SPname;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("@ITEM_ID", ItemID);

                        _dataAdapter.SelectCommand = command;
                        //_dataAdapter.SelectCommand.Parameters.Clear();
                        _dataAdapter.Fill(_dataSet, TableName);
                        ReturnDatatable = _dataSet.Tables[0].Copy();
                        retok = true;
                    }
                    catch
                    {
                        ReturnDatatable = null;
                        retok = false;
                    }
                    finally
                    {
                        cls_Global_DB.CloseDB(ref conn);
                        conn.Dispose();
                        GC.Collect();
                    }
                }
                else
                {
                    ReturnDatatable = null;
                    retok = false;
                }
                return retok;
            }
        }

        public static bool DeleteProduct(int pdtid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    sb.AppendLine("Delete From M_ITEMS WHERE ITEM_ID=@ITEM_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //กลุ่มสินค้า
                    //sb.Clear();
                    //sb.AppendLine("Delete From D_ITEM_MAIN_PRODUCTS WHERE ITEM_ID=@ITEM_ID");

                    //cmd = new SqlCommand();
                    //cmd.Connection = conn;
                    //cmd.CommandText = sb.ToString();
                    //cmd.CommandTimeout = 30;
                    //cmd.CommandType = CommandType.Text;
                    //cmd.Parameters.Clear();
                    //cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    //cmd.Transaction = tran;
                    //cmd.ExecuteNonQuery();

                    //คลังสินค้า
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_LOCATIONS WHERE ITEM_ID=@ITEM_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ผู้แทนจำหน่าย
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_VENDORS WHERE ITEM_ID=@ITEM_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //หน่วยนับ
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_UNITS WHERE ITEM_ID=@ITEM_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //หมายเลขอะไหล่
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_ALTERNATE_PARTS WHERE ITEM_ID=@ITEM_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //เอกสาร
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_DOCUMENTS WHERE ITEM_ID=@ITEM_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //สินค้าที่เป็นสมาชิก
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_SETS WHERE SET_ITEM_ID=@SET_ITEM_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SET_ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ส่วนประกอบ
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_COMPONENTS WHERE ITEM_ID=@ITEM_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //กลุ่มสั่งซื้อสินค้า
                    sb.Clear();
                    sb.AppendLine("Delete From D_ITEM_PO_GROUPS WHERE ITEM_ID=@ITEM_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = pdtid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetListProduct()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select A.ITEM_ID, A.ITEM_CODE, A.ABBREVIATE_NAME, A.FULL_NAME, A.MODEL1, A.MODEL2, A.MODEL3, A.SET_STATUS, A.COMPONENT_STATUS, A.COMPONENT_STATUS, B.BRAND_CODE,B.BRAND_NAME, C.CATEGORY_NAME,D.TYPE_NAME From M_ITEMS A ");
                    //sb.AppendLine("LEFT JOIN D_ITEM_MAIN_PRODUCTS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS B ON A.BRAND_ID = B.BRAND_ID ");
                    sb.AppendLine("LEFT JOIN M_CATEGORIES C ON A.CATEGORY_ID = C.CATEGORY_ID ");
                    sb.AppendLine("LEFT JOIN M_TYPES D ON A.TYPE_ID = D.TYPE_ID ");
                    sb.AppendLine("order by A.ITEM_CODE");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.Fill(dsResult, "M_ITEMS");
                }
                //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
                //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListProduct :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetListProductById(int ProductID)
        {
            DataSet dsResult = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";

            try
            {
                //รหัสสินค้า
                sqltex = string.Format("SP_GTB_M_ITEMS_BY_ID", ProductID);
                LoadSpecifyDataSP(out dt, "M_ITEMS", sqltex, ProductID);
                dsResult.Tables.Add(dt);

                //กลุ่มสินค้า
                //sqltex = string.Format("Select A.*, B.MAIN_PRODUCT_CODE, B.MAIN_PRODUCT_NAME From D_ITEM_MAIN_PRODUCTS A LEFT JOIN M_MAIN_PRODUCTS B ON A.MAIN_PRODUCT_ID = B.MAIN_PRODUCT_ID Where A.ITEM_ID = {0}", ProductID);
                //LoadSpecifyData(sqltex, out dt, "D_ITEM_MAIN_PRODUCTS");
                //dsResult.Tables.Add(dt);          //รุ่น ต้องเป็น int และ join ไหม

                //คลังสินค้า   1
                sqltex = string.Format("Select 2 as [mode], A.* From D_ITEM_LOCATIONS A  Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_LOCATIONS");
                dsResult.Tables.Add(dt);

                //หน่วยนับที่ผูกกับสินค้า   2
                //sqltex = string.Format("Select 2 as [mode],A.*, B.UNIT_CODE, B.UNIT_NAME From D_ITEM_UNITS A LEFT JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID Where A.ITEM_ID = {0} order by A.LIST_NO desc", ProductID);
                sqltex = string.Format("Select 2 as [mode],A.*, B.UNIT_CODE, B.UNIT_NAME From D_ITEM_UNITS A LEFT JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID Where A.ITEM_ID = {0} order by A.LIST_NO", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_UNITS");
                dsResult.Tables.Add(dt);

                //รหัสสินค้าของผู้ผลิตที่ใช้แทนกัน  3
                sqltex = string.Format("Select 2 as [mode],A.* From D_ITEM_ALTERNATE_PARTS A Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_ALTERNATE_PARTS");
                dsResult.Tables.Add(dt);

                //กลุ่มสั่งซื้อสินค้า  4
                sqltex = string.Format("Select 2 as [mode],A.*,B.PO_GROUP_CODE,B.PO_GROUP_NAME From D_ITEM_PO_GROUPS A LEFT JOIN M_PO_GROUPS B ON A.PO_GROUP_ID = B.PO_GROUP_ID Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_PO_GROUPS");
                dsResult.Tables.Add(dt);

                //ผู้แทนจำหน่าย    5 
                sqltex = string.Format("Select 2 as [mode],A.*, B.VENDOR_CODE, B.VENDOR_NAME From D_ITEM_VENDORS A LEFT JOIN M_VENDORS B ON A.VENDOR_ID = B.VENDOR_ID Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_VENDORS");
                dsResult.Tables.Add(dt);

                //สินค้าที่เป็นสมาชิก     6     
                sqltex = string.Format("SELECT 2 as [mode],A.*,B.BRAND_NAME,C.ITEM_CODE,C.FULL_NAME,C.MODEL1,C.GENUIN_PART_ID,C.BRAND_PART_ID FROM D_ITEM_SETS A ");
                sqltex += "LEFT JOIN M_BRANDS B ON A.BRAND_ID = B.BRAND_ID ";
                sqltex += "LEFT JOIN M_ITEMS C ON A.SET_ITEM_ID = C.ITEM_ID ";
                sqltex += string.Format("Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_SETS");
                dsResult.Tables.Add(dt);

                //ส่วนประกอบสินค้า   7
                sqltex = string.Format("Select 2 as [mode],A.* From D_ITEM_COMPONENTS A Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_COMPONENTS");
                dsResult.Tables.Add(dt);

                ////คุณสมบัติอย่างละเอียด
                //sqltex = string.Format("Select A.*, B.PROPERTY_NAME, C.DETAIL_NAME From D_ITEM_PROPERTY_DETAILS A LEFT JOIN M_PROPERTIES B ON A.PROPERTY_ID = B.PROPERTY_ID LEFT JOIN D_PROPERTY_DETAILS C ON A.DETAIL_ID = C.DETAIL_ID Where A.ITEM_ID = {0}", ProductID);
                //LoadSpecifyData(sqltex, out dt, "D_ITEM_PROPERTY_DETAILS");
                //dsResult.Tables.Add(dt);

                //รูปสินค้า    8
                sqltex = string.Format("Select 2 as [mode],A.* From D_ITEM_PICTURES A Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_PICTURES");
                dsResult.Tables.Add(dt);

                ////รุ่นอย่างละเอียด 
                //sqltex = string.Format("Select A.*, B.MODEL_NAME, C.DETAIL_NAME From D_ITEM_MODEL_DETAILS A LEFT JOIN M_MODELS B ON A.MODEL_ID = B.MODEL_ID LEFT JOIN D_MODEL_DETAILS C ON A.DETAIL_ID = C.DETAIL_ID Where A.ITEM_ID = {0}", ProductID);
                //LoadSpecifyData(sqltex, out dt, "D_ITEM_MODEL_DETAILS");
                //dsResult.Tables.Add(dt);

                //เอกสาร    9
                sqltex = string.Format("Select 2 as [mode],A.*, B.DOCUMENT_CODE, B.DOCUMENT_NAME, B.DOCUMENT_DESCRIPTION, B.DOCUMENT_ADDRESS From D_ITEM_DOCUMENTS A LEFT JOIN M_DOCUMENTS B ON A.DOCUMENT_ID = B.DOCUMENT_ID Where A.ITEM_ID = {0}", ProductID);
                LoadSpecifyData(sqltex, out dt, "D_ITEM_DOCUMENTS");
                dsResult.Tables.Add(dt);




            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetProductById :" + ex.Message);
            }
            return dsResult;
        }

        public static DataTable GetDataTable(string tbName, int _id = 0, string Xcode = "",bool CodeName = false,int SP = 0)
        {
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            DataTable dt = new DataTable(tbName);
            string sqltext = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    switch (tbName)
                    {
                        case "M_ITEMS":
                            sqltext = "select ITEM_ID AS _id, ITEM_CODE AS code, FULL_NAME AS name from M_ITEMS order by ITEM_CODE";
                            break;
                        case "M_SIZES":  //ประเภทสินค้า+ขนาด
                            sqltext = "select SIZE_ID AS _id, SIZE_CODE AS code, SIZE_NAME AS name from M_SIZES order by SIZE_CODE";
                            break;
                        case "M_TYPES":  //ประเภทสินค้า
                            sqltext = "select TYPE_ID AS _id, TYPE_CODE AS code, TYPE_NAME AS name from M_TYPES order by TYPE_CODE";
                            break;
                        case "M_BRANDS":  //ยี่ห้อสินค้า
                            sqltext = "select BRAND_ID AS _id, BRAND_CODE AS code, BRAND_NAME AS name ,DESCRIPTION AS description, CONCAT(BRAND_CODE, '   ', BRAND_NAME) AS codename from M_BRANDS order by BRAND_CODE";
                            break;
                        case "M_VENDORS":     //ผู้จำหน่ายสินค้า
                            sqltext = "select VENDOR_ID AS _id, VENDOR_CODE AS code, VENDOR_NAME AS name from M_VENDORS order by VENDOR_CODE";
                            break;
                        case "M_PROPERTIES":  //คุณลักษณะสินค้า
                            sqltext = "select PROPERTY_ID AS _id, PROPERTY_CODE AS code, PROPERTY_NAME AS name from M_PROPERTIES order by PROPERTY_CODE";
                            break;
                        case "M_PO_GROUPS":   //กลุ่มสั่งซื้อสินค้า
                            sqltext = "select PO_GROUP_ID AS _id, PO_GROUP_CODE AS code, PO_GROUP_NAME AS name from M_PO_GROUPS order by PO_GROUP_CODE";
                            break;
                        case "M_MODELS":  //รุ่นสินค้า
                            sqltext = "select MODEL_ID AS _id, MODEL_CODE AS code, MODEL_NAME AS name from M_MODELS order by MODEL_CODE";
                            break;
                        case "M_CATEGORIES":  //หมวดหมู่สินค้า
                            sqltext = "select CATEGORY_ID AS _id, CATEGORY_CODE AS code, CATEGORY_NAME AS name from M_CATEGORIES order by CATEGORY_CODE";
                            break;
                        case "M_DOCUMENTS":   //เอกสารสินค้า
                            sqltext = "select DOCUMENT_ID AS _id, DOCUMENT_CODE AS code, DOCUMENT_NAME AS name from M_DOCUMENTS order by DOCUMENT_CODE";
                            break;
                        case "M_UNITS":  //หน่วยนับสินค้า
                            sqltext = "select UNIT_ID AS _id, UNIT_CODE AS code, UNIT_NAME AS name from M_UNITS order by UNIT_CODE";
                            break;
                        case "M_BANKS":
                            sqltext = "select BANK_ID AS _id, ABBREVIATE_NAME AS code, FULL_NAME AS name from M_BANKS order by ABBREVIATE_NAME";
                            break;
                        case "D_BANK_BRANCHS":
                            sqltext = string.Format("select BRANCH_ID AS _id, BRANCH_CODE AS code, BRANCH_NAME AS name from D_BANK_BRANCHS Where BANK_ID ={0} order by BRANCH_CODE", _id);
                            break;
                        case "M_ITEMS_SPECIALS":
                            sqltext = "select ITEMS_SPECIAL_ID AS _id, ITEMS_SPECIAL_CODE AS code, ITEMS_SPECIAL_NAME AS name from M_ITEMS_SPECIALS order by ITEMS_SPECIAL_CODE";
                            break;
                        case "M_ITEMS_SPECIALS_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB1 order by SUB_CODE";
                            if (Xcode.Length > 0)
                            {
                                sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB1 where ITEMS_SPECIAL_CODE = '" + Xcode + "' order by SUB_CODE";
                            }
                            break;
                        case "M_ITEMS_SPECIALS_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB2 order by SUB_CODE";
                            if (Xcode.Length > 0)
                            {
                                sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB2 where SUB1_CODE = '" + Xcode + "' order by SUB_CODE";
                            }
                            break;
                        case "M_COMPLEMENTARIES_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB1 order by SUB_CODE";
                            break;
                        case "M_COMPLEMENTARIES_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB2 order by SUB_CODE";
                            break;
                        case "M_COMPLEMENTARIES_SUB3":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB3 order by SUB_CODE";
                            break;
                        case "M_SUBSTITUTES_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_SUBSTITUTES_SUB1 order by SUB_CODE";
                            break;
                        case "M_SUBSTITUTES_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_SUBSTITUTES_SUB2 order by SUB_CODE";
                            break;
                        case "M_USERS":
                            sqltext = "select USER_ID AS _id, USER_CODE AS code, USER_NAME AS name, CONCAT(USER_CODE, '   ', USER_NAME) AS codename from M_USERS where USER_NAME not like 'admin' order by USER_CODE";
                            break;
                        case "M_CUSTOMERS":
                            sqltext = "select CUSTOMER_ID AS _id, CUSTOMER_CODE AS code, CUSTOMER_NAME AS name, CONCAT(CUSTOMER_CODE, '   ', CUSTOMER_NAME) AS codename from M_CUSTOMERS order by CUSTOMER_CODE";
                            break;
                        case "M_JOB_TYPES":
                            sqltext = "select JOB_TYPE_ID AS _id, JOB_TYPE_CODE AS code, JOB_TYPE_NAME AS name, CONCAT(JOB_TYPE_CODE, '   ', JOB_TYPE_NAME) AS codename from M_JOB_TYPES order by JOB_TYPE_CODE";
                            break;
                        case "D_ITEM_LOCATIONS":
                            sqltext = string.Format("select LOCATION_NAME AS name from D_ITEM_LOCATIONS Where ITEM_ID ={0} order by LOCATION_NAME", _id);
                            break;
                        case "D_ITEM_UNITS":
                            sqltext = string.Format("select ROW_NUMBER() OVER(ORDER BY A.LIST_NO) as Listno,A.*,case WHEN A.MULTIPLY_QTY > 1 THEN CONCAT(B.UNIT_NAME, '/', A.MULTIPLY_QTY) ELSE B.UNIT_NAME END as codename, B.UNIT_ID AS _id, B.UNIT_CODE AS code, B.UNIT_NAME AS name from D_ITEM_UNITS A "
                                    + "INNER JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID ");
                            if (_id > 0)
                            {
                                if (SP == 0)
                                {
                                    sqltext += string.Format(" Where A.ITEM_ID ={0} order by A.LIST_NO", _id);
                                }
                                else
                                {
                                    if (SP == 1)
                                    {
                                        sqltext += string.Format(" Where A.ITEM_ID ={0} and A.SALE_STATUS = 1 order by A.LIST_NO", _id);
                                    }
                                    else
                                    {
                                        sqltext += string.Format(" Where A.ITEM_ID ={0} and A.BUY_STATUS = 1 order by A.LIST_NO", _id);
                                    }
                                }
                                
                                
                            }
                            else
                            {
                                if (SP == 0)
                                {
                                    sqltext += "order by A.LIST_NO";
                                }
                                else
                                {
                                    if (SP == 1)
                                    {
                                        sqltext += "Where A.SALE_STATUS = 1 order by A.LIST_NO";
                                    }
                                    else
                                    {
                                        sqltext += "Where A.BUY_STATUS = 1 order by A.LIST_NO";
                                    }
                                }
                            }
                      
                            //+ "order by A.LIST_NO");
                            break;
                        case "D_ITEM_UNITS_SALE":
                            sqltext = string.Format("select A.*,case WHEN A.MULTIPLY_QTY > 1 THEN CONCAT(B.UNIT_NAME, '/', A.MULTIPLY_QTY) ELSE B.UNIT_NAME END as codename, B.UNIT_ID AS _id, B.UNIT_CODE AS code, B.UNIT_NAME AS name from D_ITEM_UNITS A "
                                    + "INNER JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID Where A.SALE_STATUS = 1 ");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" and A.ITEM_ID ={0} order by A.LIST_NO", _id);
                            }
                            else
                            {
                                sqltext += "order by A.LIST_NO";
                            }

                            //+ "order by A.LIST_NO");
                            break;
                        case "D_BRAND_SALE_DISCOUNT_STEPS":
                            sqltext = string.Format("select * from D_BRAND_SALE_DISCOUNT_STEPS");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" where BRAND_ID ={0} order by DISCOUNT_CODE", _id);
                            }
                            else
                            {
                                sqltext += " order by DISCOUNT_CODE";
                            }
                            break;
                        case "D_BRAND_REFERENCE_DISCOUNTS":
                            sqltext = string.Format("select * from D_BRAND_REFERENCE_DISCOUNTS");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" where BRAND_ID ={0} order by LIST_NO", _id);
                            }
                            else
                            {
                                sqltext += " order by LIST_NO";
                            }
                            break;
                        case "M_TRANSPORTS":
                            sqltext = "select TRANSPORT_ID AS _id, TRANSPORT_CODE AS code, TRANSPORT_NAME AS name from M_TRANSPORTS order by TRANSPORT_CODE";
                            break;
                        case "M_CONTACTS":
                            sqltext = "select CONTACT_ID AS _id, CONTACT_CODE AS code, CONTACT_NAME AS name from M_CONTACTS order by CONTACT_CODE";
                            break;
                        case "M_SPECIALS":
                            sqltext = "select SPECIAL_ID AS _id, SPECIAL_CODE AS code, SPECIAL_NAME AS name from M_SPECIALS order by SPECIAL_CODE";
                            break;
                        case "M_ITEMS_PRICELIST":
                            sqltext = "select ITEM_ID AS _id, ITEM_CODE AS code, FULL_NAME AS name,BRAND_PART_ID as brandpart,GENUIN_PART_ID as Genuinpart  from M_ITEMS order by ITEM_CODE";
                            break;
                        //case "D_VENDOR_CREDIT_TERMS":
                        //  sqltext = string.Format("select A.ITEM_TYPE AS _id, B.CATEGORY_CODE AS code, B.CATEGORY_NAME AS name, A.VAT_STATUS, A.CREDIT_TERM from D_VENDOR_CREDIT_TERMS A "
                        //  + " INNER JOIN M_CATEGORIES B ON A.ITEM_TYPE = B.CATEGORY_ID"
                        //  + " Where A.VENDOR_ID = {0} order by A.LIST_NO", _id);
                        //  break;
                        case "D_VENDOR_CREDIT_TERMS":
                            sqltext = string.Format("select SEQUENSE_NO AS _id, ITEM_TYPE AS code, ITEM_TYPE AS name, CASE WHEN VAT_STATUS = 'E' THEN 'VAT นอก' WHEN VAT_STATUS = 'I' THEN 'VAT ใน' ELSE 'ไม่มี VAT' END as VAT_STATUS, CREDIT_TERM  from D_VENDOR_CREDIT_TERMS Where VENDOR_ID = {0} order by LIST_NO", _id);
                            break;
                        case "M_RETURN_REASONS":  //เหตุผลการคืน
                            sqltext = "select RETURN_REASON_ID AS _id, RETURN_REASON_CODE AS code, RETURN_REASON_NAME AS name from M_RETURN_REASONS order by RETURN_REASON_CODE";
                            break;
                        case "M_PERSONALS":
                            sqltext = "select PERSONAL_ID AS _id, PERSONAL_CODE AS code, PERSONAL_NAME AS name from M_PERSONALS order by PERSONAL_CODE";
                            break;
                        case "M_BANKS_ACCOUNTS":
                            sqltext = "select BANKS_ACCOUNT_ID AS _id, BANKS_ACCOUNT_CODE AS code, BANKS_ACCOUNT_NAME AS name from M_BANKS_ACCOUNTS order by BANKS_ACCOUNT_CODE";
                            break;
                        case "M_CREDITCARDS":
                            sqltext = "select CREDITCARD_ID AS _id, CREDITCARD_CODE AS code, CREDITCARD_DESCRIPTION AS name from M_CREDITCARDS order by CREDITCARD_CODE";
                            break;
                    }
                    _dataAdapter = new SqlDataAdapter(sqltext, conn);
                    _dataAdapter.Fill(dt);
            }
        }
        catch (Exception ex)
        {
        throw ex;
        }
        finally
        {
        cls_Global_DB.CloseDB(ref conn); conn.Dispose();
        }
        return dt;
    }

        public static DataTable GetDataTableSP(string tbName, int _id = 0, string Xcode = "", bool CodeName = false, int SP = 0)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            DataTable dt = new DataTable(tbName);
            string sqltext = "";
            string SPname = "";
            int Param1 = 0;
            string Param2 = "";


            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    switch (tbName)
                    {
                        case "M_ITEMS":
                            SPname = "SP_GTB_M_ITEMS";
                            
                            break;
                        case "M_SIZES":  //ประเภทสินค้า+ขนาด
                            SPname = "SP_GTB_M_SIZES";
                            break;
                        case "M_TYPES":  //ประเภทสินค้า
                            SPname = "SP_GTB_M_TYPES";
                            break;
                        case "M_BRANDS":  //ยี่ห้อสินค้า
                            SPname = "SP_GTB_M_BRANDS";
                            break;
                        case "M_VENDORS":     //ผู้จำหน่ายสินค้า
                            SPname = "SP_GTB_M_VENDORS";
                            break;
                        case "M_PROPERTIES":  //คุณลักษณะสินค้า
                            SPname = "SP_GTB_M_PROPERTIES";
                            break;
                        case "M_PO_GROUPS":   //กลุ่มสั่งซื้อสินค้า
                            SPname = "SP_GTB_M_PO_GROUPS";
                            break;
                        case "M_MODELS":  //รุ่นสินค้า
                            SPname = "SP_GTB_M_MODELS";
                            break;
                        case "M_CATEGORIES":  //หมวดหมู่สินค้า
                            SPname = "SP_GTB_M_CATEGORIES";
                            break;
                        case "M_DOCUMENTS":   //เอกสารสินค้า
                            SPname = "SP_GTB_M_DOCUMENTS";
                            break;
                        case "M_UNITS":  //หน่วยนับสินค้า
                            SPname = "SP_GTB_M_UNITS";
                            break;
                        case "M_BANKS":
                            SPname = "SP_GTB_M_BANKS";
                            break;
                        case "D_BANK_BRANCHS":
                            sqltext = string.Format("select BRANCH_ID AS _id, BRANCH_CODE AS code, BRANCH_NAME AS name from D_BANK_BRANCHS Where BANK_ID ={0} order by BRANCH_CODE", _id);
                            break;
                        case "M_ITEMS_SPECIALS":
                            sqltext = "select ITEMS_SPECIAL_ID AS _id, ITEMS_SPECIAL_CODE AS code, ITEMS_SPECIAL_NAME AS name from M_ITEMS_SPECIALS order by ITEMS_SPECIAL_CODE";
                            break;
                        case "M_ITEMS_SPECIALS_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB1 order by SUB_CODE";
                            if (Xcode.Length > 0)
                            {
                                sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB1 where ITEMS_SPECIAL_CODE = '" + Xcode + "' order by SUB_CODE";
                            }
                            break;
                        case "M_ITEMS_SPECIALS_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB2 order by SUB_CODE";
                            if (Xcode.Length > 0)
                            {
                                sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name from M_ITEMS_SPECIALS_SUB2 where SUB1_CODE = '" + Xcode + "' order by SUB_CODE";
                            }
                            break;
                        case "M_COMPLEMENTARIES_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB1 order by SUB_CODE";
                            break;
                        case "M_COMPLEMENTARIES_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB2 order by SUB_CODE";
                            break;
                        case "M_COMPLEMENTARIES_SUB3":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_COMPLEMENTARIES_SUB3 order by SUB_CODE";
                            break;
                        case "M_SUBSTITUTES_SUB1":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_SUBSTITUTES_SUB1 order by SUB_CODE";
                            break;
                        case "M_SUBSTITUTES_SUB2":
                            sqltext = "select SUB_ID AS _id, SUB_CODE AS code, SUB_NAME AS name,SUB_DESCRIPTION as description from M_SUBSTITUTES_SUB2 order by SUB_CODE";
                            break;
                        case "M_USERS":
                            SPname = "SP_GTB_M_USERS";
                            break;
                        case "M_CUSTOMERS":
                            SPname = "SP_GTB_M_CUSTOMERS";
                            break;
                        case "M_JOB_TYPES":
                            SPname = "SP_GTB_M_JOB_TYPES";
                            break;
                        case "D_ITEM_LOCATIONS":
                            sqltext = string.Format("select LOCATION_NAME AS name from D_ITEM_LOCATIONS Where ITEM_ID ={0} order by LOCATION_NAME", _id);
                            break;
                        case "D_ITEM_UNITS":
                            sqltext = string.Format("select A.*,case WHEN A.MULTIPLY_QTY > 1 THEN CONCAT(B.UNIT_NAME, '/', A.MULTIPLY_QTY) ELSE B.UNIT_NAME END as codename, B.UNIT_ID AS _id, B.UNIT_CODE AS code, B.UNIT_NAME AS name from D_ITEM_UNITS A "
                                    + "INNER JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID ");
                            if (_id > 0)
                            {
                                if (SP == 0)
                                {
                                    sqltext += string.Format(" Where A.ITEM_ID ={0} order by A.LIST_NO", _id);
                                }
                                else
                                {
                                    if (SP == 1)
                                    {
                                        sqltext += string.Format(" Where A.ITEM_ID ={0} and A.SALE_STATUS = 1 order by A.LIST_NO", _id);
                                    }
                                    else
                                    {
                                        sqltext += string.Format(" Where A.ITEM_ID ={0} and A.BUY_STATUS = 1 order by A.LIST_NO", _id);
                                    }
                                }


                            }
                            else
                            {
                                if (SP == 0)
                                {
                                    sqltext += "order by A.LIST_NO";
                                }
                                else
                                {
                                    if (SP == 1)
                                    {
                                        sqltext += "Where A.SALE_STATUS = 1 order by A.LIST_NO";
                                    }
                                    else
                                    {
                                        sqltext += "Where A.BUY_STATUS = 1 order by A.LIST_NO";
                                    }
                                }
                            }

                            //+ "order by A.LIST_NO");
                            break;
                        case "D_ITEM_UNITS_SALE":
                            sqltext = string.Format("select A.*,case WHEN A.MULTIPLY_QTY > 1 THEN CONCAT(B.UNIT_NAME, '/', A.MULTIPLY_QTY) ELSE B.UNIT_NAME END as codename, B.UNIT_ID AS _id, B.UNIT_CODE AS code, B.UNIT_NAME AS name from D_ITEM_UNITS A "
                                    + "INNER JOIN M_UNITS B ON A.UNIT_ID = B.UNIT_ID Where A.SALE_STATUS = 1 ");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" and A.ITEM_ID ={0} order by A.LIST_NO", _id);
                            }
                            else
                            {
                                sqltext += "order by A.LIST_NO";
                            }

                            //+ "order by A.LIST_NO");
                            break;
                        case "D_BRAND_SALE_DISCOUNT_STEPS":
                            sqltext = string.Format("select * from D_BRAND_SALE_DISCOUNT_STEPS");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" where BRAND_ID ={0} order by DISCOUNT_CODE", _id);
                            }
                            else
                            {
                                sqltext += " order by DISCOUNT_CODE";
                            }
                            break;
                        case "D_BRAND_REFERENCE_DISCOUNTS":
                            sqltext = string.Format("select * from D_BRAND_REFERENCE_DISCOUNTS");
                            if (_id > 0)
                            {
                                sqltext += string.Format(" where BRAND_ID ={0} order by LIST_NO", _id);
                            }
                            else
                            {
                                sqltext += " order by LIST_NO";
                            }
                            break;
                        case "M_TRANSPORTS":
                            SPname = "SP_GTB_M_TRANSPORTS";
                            break;
                        case "M_CONTACTS":
                            SPname = "SP_GTB_M_CONTACTS";
                            break;
                        case "M_SPECIALS":
                            SPname = "SP_GTB_M_SPECIALS";
                            break;
                        case "M_ITEMS_PRICELIST":
                            sqltext = "select ITEM_ID AS _id, ITEM_CODE AS code, FULL_NAME AS name,BRAND_PART_ID as brandpart,GENUIN_PART_ID as Genuinpart  from M_ITEMS order by ITEM_CODE";
                            break;
                        //case "D_VENDOR_CREDIT_TERMS":
                        //  sqltext = string.Format("select A.ITEM_TYPE AS _id, B.CATEGORY_CODE AS code, B.CATEGORY_NAME AS name, A.VAT_STATUS, A.CREDIT_TERM from D_VENDOR_CREDIT_TERMS A "
                        //  + " INNER JOIN M_CATEGORIES B ON A.ITEM_TYPE = B.CATEGORY_ID"
                        //  + " Where A.VENDOR_ID = {0} order by A.LIST_NO", _id);
                        //  break;
                        case "D_VENDOR_CREDIT_TERMS":
                            sqltext = string.Format("select SEQUENSE_NO AS _id, ITEM_TYPE AS code, ITEM_TYPE AS name, CASE WHEN VAT_STATUS = 'E' THEN 'VAT นอก' WHEN VAT_STATUS = 'I' THEN 'VAT ใน' ELSE 'ไม่มี VAT' END as VAT_STATUS, CREDIT_TERM  from D_VENDOR_CREDIT_TERMS Where VENDOR_ID = {0} order by LIST_NO", _id);
                            break;
                        case "M_RETURN_REASONS":  //เหตุผลการคืน
                            sqltext = "select RETURN_REASON_ID AS _id, RETURN_REASON_CODE AS code, RETURN_REASON_NAME AS name from M_RETURN_REASONS order by RETURN_REASON_CODE";
                            break;
                        case "M_PERSONALS":
                            SPname = "SP_GTB_M_PERSONALS";
                            break;
                        case "M_BANKS_ACCOUNTS":
                            SPname = "SP_GTB_M_BANKS_ACCOUNTS";
                            break;
                        case "M_CREDITCARDS":
                            SPname = "SP_GTB_M_CREDITCARDS";
                            break;
                    }

                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = SPname;

                    command.Parameters.Clear();
                    switch (tbName)
                    {
                        
                        case "M_BRANDS":
                        case "M_BANKS":
                        case "M_BANKS_ACCOUNTS":
                        case "M_CATEGORIES":
                        case "M_CONTACTS":
                        case "M_CREDITCARDS":
                        case "M_CUSTOMERS":
                        case "M_DOCUMENTS":
                        case "M_ITEMS":
                        case "M_JOB_TYPES":
                        case "M_MODELS":
                        case "M_PERSONALS":
                        case "M_PO_GROUPS":
                        case "M_PROPERTIES":
                        case "M_SIZES":
                        case "M_SPECIALS":
                        case "M_TRANSPORTS":
                        case "M_TYPES":
                        case "M_UNITS":
                        case "M_USERS":
                        case "M_VENDORS":
                            break;
                        default:
                            command.Parameters.AddWithValue("@ID", Param1);
                            break;
                    }
                            
                    dt = new DataTable(tbName);
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                    
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return dt;
        }

        public static DataSet GetDataInitial()
        {
            DataSet ds = new DataSet();
            try
            {
                ds.Tables.Add(GetDataTableSP("M_BANKS"));
                ds.Tables.Add(GetDataTableSP("M_CATEGORIES"));
                ds.Tables.Add(GetDataTableSP("M_SIZES"));
                ds.Tables.Add(GetDataTableSP("M_TYPES"));
                ds.Tables.Add(GetDataTableSP("M_BRANDS"));
                ds.Tables.Add(GetDataTableSP("M_VENDORS"));
                ds.Tables.Add(GetDataTableSP("M_PROPERTIES"));
                ds.Tables.Add(GetDataTableSP("M_PO_GROUPS"));
                ds.Tables.Add(GetDataTableSP("M_MODELS"));
                ds.Tables.Add(GetDataTableSP("M_DOCUMENTS"));
                ds.Tables.Add(GetDataTableSP("M_UNITS"));
                ds.Tables.Add(GetDataTableSP("M_ITEMS"));
                ds.Tables.Add(GetDataTableSP("M_CUSTOMERS"));
                ds.Tables.Add(GetDataTableSP("M_JOB_TYPES"));
                ds.Tables.Add(GetDataTableSP("M_USERS"));
                ds.Tables.Add(GetDataTableSP("M_SPECIALS"));
                ds.Tables.Add(GetDataTableSP("M_PERSONALS"));
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetDataInitial : " + ex.Message);
            }
            return ds;
        }

        public static DataSet GetDataInitialComplementary()
        {
            DataSet ds = new DataSet();
            try
            {
                ds.Tables.Add(GetDataTable("M_COMPLEMENTARIES_SUB1"));
                ds.Tables.Add(GetDataTable("M_COMPLEMENTARIES_SUB2"));
                ds.Tables.Add(GetDataTable("M_COMPLEMENTARIES_SUB3"));
                ds.Tables.Add(GetDataTable("M_ITEMS"));
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetDataInitialComplementary : " + ex.Message);
            }
            return ds;
        }

        public static DataSet GetDataInitialItemSpecial()
        {
            DataSet ds = new DataSet();
            try
            {
                ds.Tables.Add(GetDataTable("M_ITEMS_SPECIALS_SUB1"));
                ds.Tables.Add(GetDataTable("M_ITEMS_SPECIALS_SUB2"));
                ds.Tables.Add(GetDataTable("M_ITEMS"));
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetDataInitialItemSpecial : " + ex.Message);
            }
            return ds;
        }

        public static DataSet GetDataInitialSubstitute()
        {
            DataSet ds = new DataSet();
            try
            {
                ds.Tables.Add(GetDataTable("M_SUBSTITUTES_SUB1"));
                ds.Tables.Add(GetDataTable("M_SUBSTITUTES_SUB2"));
                ds.Tables.Add(GetDataTable("M_ITEMS"));
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetDataInitialSubstitute : " + ex.Message);
            }
            return ds;
        }

        public static DataSet GetDataInitialVersatile()
        {
            DataSet ds = new DataSet();
            try
            {
            ds.Tables.Add(GetDataTable("M_ITEMS"));
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetDataInitialVersatile : " + ex.Message);
            }
            return ds;
        }

        public static bool SaveProductCode(int mode, cls_Struct.StructPDT PDT, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            string sql = "";

            Savemode = mode;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region รหัสสินค้า
                switch (mode)
                {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO M_ITEMS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_CODE,");
                        sb.AppendLine("MAKER_BARCODE_NO,");
                        sb.AppendLine("SET_STATUS,");
                        sb.AppendLine("COMPONENT_STATUS,");
                        sb.AppendLine("BRAND_ID,");
                        sb.AppendLine("PROMOTION_ID,");
                        sb.AppendLine("GENUIN_PART_ID,");
                        sb.AppendLine("BRAND_PART_ID,");
                        sb.AppendLine("PO_NAME,");
                        sb.AppendLine("PO_BRAND,");
                        sb.AppendLine("PO_MODEL,");
                        sb.AppendLine("CATEGORY_ID,");
                        sb.AppendLine("TYPE_ID,");
                        sb.AppendLine("ABBREVIATE_NAME,");
                        sb.AppendLine("FULL_NAME,");
                        sb.AppendLine("MODEL1,");
                        sb.AppendLine("MODEL2,");
                        sb.AppendLine("MODEL3,");
                        sb.AppendLine("FULL_NAME_PRINT,");
                        sb.AppendLine("MODEL_PRINT,");
                        sb.AppendLine("BRAND_PRINT,");
                        sb.AppendLine("QTY,");
                        sb.AppendLine("PO_GROUP_ID,");
                        sb.AppendLine("LAST_BUY_CODE,");
                        sb.AppendLine("CURRENT_SALE_CODE,");
                        sb.AppendLine("CURRENT_QTY,");
                        sb.AppendLine("CURRENT_QTY_VAT,");
                        sb.AppendLine("CURRENT_VAT_STATUS,");
                        sb.AppendLine("TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("SETUP_PRICE_DATE,");
                        sb.AppendLine("ENABLED_PRICE_STATUS,");
                        sb.AppendLine("ENABLED_PRICE_STATUS_DATE,");
                        sb.AppendLine("SERIAL_NO_STATUS,");
                        sb.AppendLine("MINIMUM_QTY,");
                        sb.AppendLine("MAXIMUM_QTY,");
                        sb.AppendLine("COUNTING_DATE,");
                        sb.AppendLine("MINIMUM_DATE,");
                        sb.AppendLine("MINIMUM_ORDER_QTY,");
                        sb.AppendLine("MINIMUM_SALE_QTY,");
                        sb.AppendLine("INVOICE_PRICE,");
                        sb.AppendLine("INVOICE_DATE,");
                        sb.AppendLine("DEFECT_QTY,");
                        sb.AppendLine("RESERVE_QTY,");
                        sb.AppendLine("SIZE_ID,");
                        sb.AppendLine("SIZE_INNER,");
                        sb.AppendLine("SIZE_OUTSIDE,");
                        sb.AppendLine("SIZE_THICK,");
                        sb.AppendLine("REMARK,");
                        sb.AppendLine("ACTIVE_STOCK,");
                        sb.AppendLine("CUSTOMER_DISCOUNT_STATUS,");
                        sb.AppendLine("DISPLAY_SEQUENSE_NO,");
                        sb.AppendLine("DISPLAY_HIDING_STATUS,");
                        sb.AppendLine("CREATED_DATE,");
                        sb.AppendLine("CREATED_BY,");
                        //sb.AppendLine("UPDATED_DATE,");
                        //sb.AppendLine("UPDATED_BY,");
                        sb.AppendLine("DELETED)");
                        sb.AppendLine("VALUES(");
                        sb.AppendLine("@ITEM_CODE,");
                        sb.AppendLine("@MAKER_BARCODE_NO,");
                        sb.AppendLine("@SET_STATUS,");
                        sb.AppendLine("@COMPONENT_STATUS,");
                        sb.AppendLine("@BRAND_ID,");
                        sb.AppendLine("@PROMOTION_ID,");
                        sb.AppendLine("@GENUIN_PART_ID,");
                        sb.AppendLine("@BRAND_PART_ID,");
                        sb.AppendLine("@PO_NAME,");
                        sb.AppendLine("@PO_BRAND,");
                        sb.AppendLine("@PO_MODEL,");
                        sb.AppendLine("@CATEGORY_ID,");
                        sb.AppendLine("@TYPE_ID,");
                        sb.AppendLine("@ABBREVIATE_NAME,");
                        sb.AppendLine("@FULL_NAME,");
                        sb.AppendLine("@MODEL1,");
                        sb.AppendLine("@MODEL2,");
                        sb.AppendLine("@MODEL3,");
                        sb.AppendLine("@FULL_NAME_PRINT,");
                        sb.AppendLine("@MODEL_PRINT,");
                        sb.AppendLine("@BRAND_PRINT,");
                        sb.AppendLine("@QTY,");
                        sb.AppendLine("@PO_GROUP_ID,");
                        sb.AppendLine("@LAST_BUY_CODE,");
                        sb.AppendLine("@CURRENT_SALE_CODE,");
                        sb.AppendLine("@CURRENT_QTY,");
                        sb.AppendLine("@CURRENT_QTY_VAT,");
                        sb.AppendLine("@CURRENT_VAT_STATUS,");
                        sb.AppendLine("@TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("@SETUP_PRICE_DATE,");
                        sb.AppendLine("@ENABLED_PRICE_STATUS,");
                        sb.AppendLine("@ENABLED_PRICE_STATUS_DATE,");
                        sb.AppendLine("@SERIAL_NO_STATUS,");
                        sb.AppendLine("@MINIMUM_QTY,");
                        sb.AppendLine("@MAXIMUM_QTY,");
                        sb.AppendLine("@COUNTING_DATE,");
                        sb.AppendLine("@MINIMUM_DATE,");
                        sb.AppendLine("@MINIMUM_ORDER_QTY,");
                        sb.AppendLine("@MINIMUM_SALE_QTY,");
                        sb.AppendLine("@INVOICE_PRICE,");
                        sb.AppendLine("@INVOICE_DATE,");
                        sb.AppendLine("@DEFECT_QTY,");
                        sb.AppendLine("@RESERVE_QTY,");
                        sb.AppendLine("@SIZE_ID,");
                        sb.AppendLine("@SIZE_INNER,");
                        sb.AppendLine("@SIZE_OUTSIDE,");
                        sb.AppendLine("@SIZE_THICK,");
                        sb.AppendLine("@REMARK,");
                        sb.AppendLine("@ACTIVE_STOCK,");
                        sb.AppendLine("@CUSTOMER_DISCOUNT_STATUS,");
                        sb.AppendLine("@DISPLAY_SEQUENSE_NO,");
                        sb.AppendLine("@DISPLAY_HIDING_STATUS,");
                        sb.AppendLine("@CREATED_DATE,");
                        sb.AppendLine("@CREATED_BY,");
                        //sb.AppendLine("@UPDATED_DATE,");
                        //sb.AppendLine("@UPDATED_BY)");
                        sb.AppendLine("@DELETED)");
                        sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                        sb.AppendLine("ITEM_CODE = @ITEM_CODE,");
                        sb.AppendLine("MAKER_BARCODE_NO = @MAKER_BARCODE_NO,");
                        sb.AppendLine("SET_STATUS = @SET_STATUS,");
                        sb.AppendLine("COMPONENT_STATUS =@COMPONENT_STATUS,");
                        sb.AppendLine("BRAND_ID =@BRAND_ID,");
                        sb.AppendLine("PROMOTION_ID =@PROMOTION_ID,");
                        sb.AppendLine("GENUIN_PART_ID =@GENUIN_PART_ID,");
                        sb.AppendLine("BRAND_PART_ID =@BRAND_PART_ID,");
                        sb.AppendLine("PO_NAME = @PO_NAME,");
                        sb.AppendLine("PO_BRAND =@PO_BRAND,");
                        sb.AppendLine("PO_MODEL =@PO_MODEL,");
                        sb.AppendLine("CATEGORY_ID =@CATEGORY_ID,");
                        sb.AppendLine("TYPE_ID =@TYPE_ID,");
                        sb.AppendLine("ABBREVIATE_NAME =@ABBREVIATE_NAME,");
                        sb.AppendLine("FULL_NAME =@FULL_NAME,");
                        sb.AppendLine("MODEL1 =@MODEL1,");
                        sb.AppendLine("MODEL2 =@MODEL2,");
                        sb.AppendLine("MODEL3 =@MODEL3,");
                        sb.AppendLine("FULL_NAME_PRINT =@FULL_NAME_PRINT,");
                        sb.AppendLine("MODEL_PRINT =@MODEL_PRINT,");
                        sb.AppendLine("BRAND_PRINT =@BRAND_PRINT,");
                        sb.AppendLine("QTY =@QTY,");
                        sb.AppendLine("PO_GROUP_ID =@PO_GROUP_ID,");
                        sb.AppendLine("LAST_BUY_CODE =@LAST_BUY_CODE,");
                        sb.AppendLine("CURRENT_SALE_CODE =@CURRENT_SALE_CODE,");
                        sb.AppendLine("CURRENT_QTY =@CURRENT_QTY,");
                        sb.AppendLine("CURRENT_QTY_VAT =@CURRENT_QTY_VAT,");
                        sb.AppendLine("CURRENT_VAT_STATUS =@CURRENT_VAT_STATUS,");
                        sb.AppendLine("TAX_INVOICE_VAT_STATUS =@TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("SETUP_PRICE_DATE =@SETUP_PRICE_DATE,");
                        sb.AppendLine("ENABLED_PRICE_STATUS =@ENABLED_PRICE_STATUS,");
                        sb.AppendLine("ENABLED_PRICE_STATUS_DATE =@ENABLED_PRICE_STATUS_DATE,");
                        sb.AppendLine("SERIAL_NO_STATUS =@SERIAL_NO_STATUS,");
                        sb.AppendLine("MINIMUM_QTY =@MINIMUM_QTY,");
                        sb.AppendLine("MAXIMUM_QTY =@MAXIMUM_QTY,");
                        sb.AppendLine("COUNTING_DATE = @COUNTING_DATE,");
                        sb.AppendLine("MINIMUM_DATE =@MINIMUM_DATE,");
                        sb.AppendLine("MINIMUM_ORDER_QTY =@MINIMUM_ORDER_QTY,");
                        sb.AppendLine("MINIMUM_SALE_QTY =@MINIMUM_SALE_QTY,");
                        sb.AppendLine("INVOICE_PRICE =@INVOICE_PRICE,");
                        sb.AppendLine("INVOICE_DATE =@INVOICE_DATE,");
                        sb.AppendLine("DEFECT_QTY =@DEFECT_QTY,");
                        sb.AppendLine("RESERVE_QTY =@RESERVE_QTY,");
                        sb.AppendLine("SIZE_ID =@SIZE_ID,");
                        sb.AppendLine("SIZE_INNER =@SIZE_INNER,");
                        sb.AppendLine("SIZE_OUTSIDE =@SIZE_OUTSIDE,");
                        sb.AppendLine("SIZE_THICK =@SIZE_THICK,");
                        sb.AppendLine("REMARK =@REMARK,");
                        sb.AppendLine("ACTIVE_STOCK =@ACTIVE_STOCK,");
                        sb.AppendLine("CUSTOMER_DISCOUNT_STATUS =@CUSTOMER_DISCOUNT_STATUS,");
                        sb.AppendLine("DISPLAY_SEQUENSE_NO =@DISPLAY_SEQUENSE_NO,");
                        sb.AppendLine("DISPLAY_HIDING_STATUS =@DISPLAY_HIDING_STATUS,");
                        //sb.AppendLine("CREATED_DATE =@CREATED_DATE,");
                        //sb.AppendLine("CREATED_BY =@CREATED_BY,");
                        sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                        sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                        sb.AppendLine(" WHERE ITEM_ID=@ITEM_ID");
                        break;
                }
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@ITEM_CODE", SqlDbType.Char, 8).Value = PDT.ITEM_CODE;
                cmd.Parameters.Add("@MAKER_BARCODE_NO", SqlDbType.Char, 13).Value = PDT.MAKER_BARCODE_NO;
                cmd.Parameters.Add("@SET_STATUS", SqlDbType.Bit).Value = PDT.SET_STATUS;
                cmd.Parameters.Add("@COMPONENT_STATUS", SqlDbType.Bit).Value = PDT.COMPONENT_STATUS;
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = PDT.BRAND_ID;
                cmd.Parameters.Add("@PROMOTION_ID", SqlDbType.Int).Value = PDT.PROMOTION_ID;
                cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = PDT.GENUIN_PART_ID;
                cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = PDT.BRAND_PART_ID;
                cmd.Parameters.Add("@PO_NAME", SqlDbType.VarChar, 200).Value = PDT.PO_NAME;
                cmd.Parameters.Add("@PO_BRAND", SqlDbType.VarChar, 200).Value = PDT.PO_BRAND;
                cmd.Parameters.Add("@PO_MODEL", SqlDbType.VarChar, 200).Value = PDT.PO_MODEL;
                cmd.Parameters.Add("@CATEGORY_ID", SqlDbType.Int).Value = PDT.CATEGORY_ID;
                cmd.Parameters.Add("@TYPE_ID", SqlDbType.Int).Value = PDT.TYPE_ID;
                cmd.Parameters.Add("@ABBREVIATE_NAME", SqlDbType.Char, 5).Value = PDT.ABBREVIATE_NAME;
                cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = PDT.FULL_NAME;
                cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = PDT.MODEL1;
                cmd.Parameters.Add("@MODEL2", SqlDbType.VarChar, 50).Value = PDT.MODEL2;
                cmd.Parameters.Add("@MODEL3", SqlDbType.VarChar, 50).Value = PDT.MODEL3;
                cmd.Parameters.Add("@FULL_NAME_PRINT", SqlDbType.VarChar, 50).Value = PDT.FULL_NAME_PRINT;
                cmd.Parameters.Add("@MODEL_PRINT", SqlDbType.VarChar, 50).Value = PDT.MODEL_PRINT;
                cmd.Parameters.Add("@BRAND_PRINT", SqlDbType.VarChar, 50).Value = PDT.BRAND_PRINT;
                cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = PDT.QTY;
                cmd.Parameters.Add("@PO_GROUP_ID", SqlDbType.Int).Value = PDT.PO_GROUP_ID;
                cmd.Parameters.Add("@LAST_BUY_CODE", SqlDbType.Char, 1).Value = PDT.LAST_BUY_CODE;
                cmd.Parameters.Add("@CURRENT_SALE_CODE", SqlDbType.Char, 1).Value = PDT.CURRENT_SALE_CODE;
                cmd.Parameters.Add("@CURRENT_QTY", SqlDbType.Decimal).Value = PDT.CURRENT_QTY;
                cmd.Parameters.Add("@CURRENT_QTY_VAT", SqlDbType.Decimal).Value = PDT.CURRENT_QTY_VAT;
                cmd.Parameters.Add("@CURRENT_VAT_STATUS", SqlDbType.Char, 1).Value = PDT.CURRENT_VAT_STATUS;
                cmd.Parameters.Add("@TAX_INVOICE_VAT_STATUS", SqlDbType.Char, 1).Value = PDT.TAX_INVOICE_VAT_STATUS;
                if ((PDT.SETUP_PRICE_DATE == DateTime.MinValue) || (PDT.SETUP_PRICE_DATE == DateTime.MaxValue))
                {
                    cmd.Parameters.Add("@SETUP_PRICE_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@SETUP_PRICE_DATE", SqlDbType.DateTime).Value = PDT.SETUP_PRICE_DATE;
                }
                cmd.Parameters.Add("@ENABLED_PRICE_STATUS", SqlDbType.Char, 1).Value = PDT.ENABLED_PRICE_STATUS;
                if ((PDT.ENABLED_PRICE_STATUS_DATE == DateTime.MinValue) || (PDT.ENABLED_PRICE_STATUS_DATE == DateTime.MaxValue))
                {
                    cmd.Parameters.Add("@ENABLED_PRICE_STATUS_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@ENABLED_PRICE_STATUS_DATE", SqlDbType.DateTime).Value = PDT.ENABLED_PRICE_STATUS_DATE;
                }
                cmd.Parameters.Add("@SERIAL_NO_STATUS", SqlDbType.Bit).Value = PDT.SERIAL_NO_STATUS;
                cmd.Parameters.Add("@MINIMUM_QTY", SqlDbType.Decimal).Value = PDT.MINIMUM_QTY;
                cmd.Parameters.Add("@MAXIMUM_QTY", SqlDbType.Decimal).Value = PDT.MAXIMUM_QTY;
                if ((PDT.COUNTING_DATE == DateTime.MinValue) || (PDT.COUNTING_DATE == DateTime.MaxValue))
                {
                    cmd.Parameters.Add("@COUNTING_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@COUNTING_DATE", SqlDbType.DateTime).Value = PDT.COUNTING_DATE;
                }
                if ((PDT.MINIMUM_DATE == DateTime.MinValue) || (PDT.MINIMUM_DATE == DateTime.MaxValue))
                {
                    cmd.Parameters.Add("@MINIMUM_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@MINIMUM_DATE", SqlDbType.DateTime).Value = PDT.MINIMUM_DATE;
                }
                cmd.Parameters.Add("@MINIMUM_ORDER_QTY", SqlDbType.Decimal).Value = PDT.MINIMUM_ORDER_QTY;
                cmd.Parameters.Add("@MINIMUM_SALE_QTY", SqlDbType.Decimal).Value = PDT.MINIMUM_SALE_QTY;
                cmd.Parameters.Add("@INVOICE_PRICE", SqlDbType.Decimal).Value = PDT.INVOICE_PRICE;
                if ((PDT.INVOICE_DATE == DateTime.MinValue) || (PDT.INVOICE_DATE == DateTime.MaxValue))
                {
                    cmd.Parameters.Add("@INVOICE_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@INVOICE_DATE", SqlDbType.DateTime).Value = PDT.INVOICE_DATE;
                }
                cmd.Parameters.Add("@DEFECT_QTY", SqlDbType.Decimal).Value = PDT.DEFECT_QTY;
                cmd.Parameters.Add("@RESERVE_QTY", SqlDbType.Decimal).Value = PDT.RESERVE_QTY;
                cmd.Parameters.Add("@SIZE_ID", SqlDbType.Int).Value = PDT.SIZE_ID;
                cmd.Parameters.Add("@SIZE_INNER", SqlDbType.VarChar, 50).Value = PDT.SIZE_INNER;
                cmd.Parameters.Add("@SIZE_OUTSIDE", SqlDbType.VarChar, 50).Value = PDT.SIZE_OUTSIDE;
                cmd.Parameters.Add("@SIZE_THICK", SqlDbType.VarChar, 50).Value = PDT.SIZE_THICK;
                cmd.Parameters.Add("@REMARK", SqlDbType.VarChar, 500).Value = PDT.REMARK;
                cmd.Parameters.Add("@ACTIVE_STOCK", SqlDbType.Bit).Value = PDT.ACTIVE_STOCK;
                cmd.Parameters.Add("@CUSTOMER_DISCOUNT_STATUS", SqlDbType.Bit).Value = PDT.CUSTOMER_DISCOUNT_STATUS;
                cmd.Parameters.Add("@DISPLAY_SEQUENSE_NO", SqlDbType.Int).Value = PDT.DISPLAY_SEQUENSE_NO;
                cmd.Parameters.Add("@DISPLAY_HIDING_STATUS", SqlDbType.Bit).Value = PDT.DISPLAY_HIDING_STATUS;
                switch (mode)
                {
                    case 1:
                        cmd.Parameters.Add("@CREATED_DATE", SqlDbType.DateTime).Value = PDT.CREATED_DATE;
                        cmd.Parameters.Add("@CREATED_BY", SqlDbType.Int).Value = PDT.CREATED_BY;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        break;
                    case 2:
                        cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = PDT.UPDATED_DATE;
                        cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = PDT.UPDATED_BY;
                        break;
                }

                cmd.Transaction = tran;
                if (mode == 2)
                {
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = PDT.ITEM_ID;
                    id = PDT.ITEM_ID;
                    cmd.ExecuteNonQuery();
                }
                else
                {
                    shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                    shipperIdParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(shipperIdParam);
                    cmd.ExecuteNonQuery();

                    id = (int)shipperIdParam.Value;
                }
                #endregion

                #region คลังสินค้า   1

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_LOCATIONS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_LOCATIONS"].Rows.Count < cls_Global_DB.GB_DitemLocation_count))
                {
                    k = dsData.Tables["D_ITEM_LOCATIONS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemLocation_count; j++)
                    {
                    sql = "Delete from D_ITEM_LOCATIONS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_LOCATIONS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                        case 1:
                            Savemode = 1;
                            break;
                        case 2:
                            Savemode = irow > cls_Global_DB.GB_DitemLocation_count ? 1 : 2;
                            break;
                    }
                    switch (Savemode)
                    {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO D_ITEM_LOCATIONS WITH (UPDLOCK) (");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("LOCATION_NAME,");
                            sb.AppendLine("SERIAL_NO,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("DEFAULT_LOCATION,");
                            sb.AppendLine("LIST_NO)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@LOCATION_NAME,");
                            sb.AppendLine("@SERIAL_NO,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@DEFAULT_LOCATION,");
                            sb.AppendLine("@LIST_NO)");
                            break;
                        case 2:
                            sb.Clear();
                            sb.AppendLine("UPDATE D_ITEM_LOCATIONS WITH (UPDLOCK) SET ");
                            sb.AppendLine("LOCATION_NAME =@LOCATION_NAME,");
                            sb.AppendLine("SERIAL_NO =@SERIAL_NO,");
                            sb.AppendLine("QTY =@QTY,");
                            sb.AppendLine("DEFAULT_LOCATION =@DEFAULT_LOCATION");
                            sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                            break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LOCATION_NAME", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["LOCATION_NAME"]);
                    cmd.Parameters.Add("@SERIAL_NO", SqlDbType.Char, 20).Value = cls_Library.DBString(dr["SERIAL_NO"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(dr["QTY"]);
                    cmd.Parameters.Add("@DEFAULT_LOCATION", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DEFAULT_LOCATION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_LOCATIONS"].Rows.Count < cls_Global_DB.GB_DitemLocation_count))
                //{
                //    k = dsData.Tables["D_ITEM_LOCATIONS"].Rows.Count;
                //    for (int j = k + 1; j <= cls_Global_DB.GB_DitemLocation_count; j++)
                //    {
                //        //Mark Details ไว้ก่อนลบจริง
                //        sql = "Delete from D_ITEM_LOCATIONS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //        cmd = new SqlCommand();
                //        cmd.Connection = conn;
                //        cmd.CommandText = sql;
                //        cmd.CommandTimeout = 60;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.Clear();
                //        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //        cmd.Transaction = tran;
                //        cmd.ExecuteNonQuery();
                //    }
                //}
                #endregion

                #endregion

                #region หน่วยนับ 2
                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_UNITS"))
                {
                if (mode == 2)
                {
                    if (dsData.Tables["D_ITEM_UNITS"].Rows.Count < cls_Global_DB.GB_DitemUnit_count)
                    {
                    k = dsData.Tables["D_ITEM_UNITS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemUnit_count; j++)
                    {
                        sql = "Delete from D_ITEM_UNITS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sql;
                        cmd.CommandTimeout = 60;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                    }
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_UNITS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemUnit_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO D_ITEM_UNITS WITH (UPDLOCK) (");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("DECIMAL_STATUS,");
                            sb.AppendLine("MULTIPLY_QTY,");
                            sb.AppendLine("BUY_STATUS,");
                            sb.AppendLine("SALE_STATUS,");
                            sb.AppendLine("LIST_NO)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@DECIMAL_STATUS,");
                            sb.AppendLine("@MULTIPLY_QTY,");
                            sb.AppendLine("@BUY_STATUS,");
                            sb.AppendLine("@SALE_STATUS,");
                            sb.AppendLine("@LIST_NO)");
                            break;
                        case 2:
                            sb.Clear();
                            sb.AppendLine("UPDATE D_ITEM_UNITS WITH (UPDLOCK) SET ");
                            sb.AppendLine("UNIT_ID =@UNIT_ID,");
                            sb.AppendLine("DECIMAL_STATUS =@DECIMAL_STATUS,");
                            sb.AppendLine("MULTIPLY_QTY= @MULTIPLY_QTY,");
                            sb.AppendLine("BUY_STATUS =@BUY_STATUS,");
                            sb.AppendLine("SALE_STATUS =@SALE_STATUS");
                            sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                            break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                    cmd.Parameters.Add("@DECIMAL_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DECIMAL_STATUS"]);
                    cmd.Parameters.Add("@MULTIPLY_QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["MULTIPLY_QTY"]);
                    cmd.Parameters.Add("@BUY_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["BUY_STATUS"]);
                    cmd.Parameters.Add("@SALE_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["SALE_STATUS"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_UNITS"].Rows.Count < cls_Global_DB.GB_DitemUnit_count))
                //{
                //    k = dsData.Tables["D_ITEM_UNITS"].Rows.Count;
                //    for (int j = k + 1; j <= cls_Global_DB.GB_DitemUnit_count; j++)
                //    {
                //        sql = "Delete from D_ITEM_UNITS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //        cmd = new SqlCommand();
                //        cmd.Connection = conn;
                //        cmd.CommandText = sql;
                //        cmd.CommandTimeout = 60;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.Clear();
                //        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //        cmd.Transaction = tran;
                //        cmd.ExecuteNonQuery();
                //    }
                //}
                #endregion

                #endregion

                #region หมายเลขอะไหล่  3
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_ALTERNATE_PARTS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_ALTERNATE_PARTS"].Rows.Count < cls_Global_DB.GB_DitemPart_count))
                {
                    k = dsData.Tables["D_ITEM_ALTERNATE_PARTS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemPart_count; j++)
                    {
                    sql = "Delete from D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_ALTERNATE_PARTS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemPart_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("PART_ID,");
                        sb.AppendLine("BRAND_DESCRIPTION,");
                        sb.AppendLine("STATUS,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@PART_ID,");
                        sb.AppendLine("@BRAND_DESCRIPTION,");
                        sb.AppendLine("@STATUS,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) SET ");
                        sb.AppendLine("PART_ID =@PART_ID,");
                        sb.AppendLine("BRAND_DESCRIPTION =@BRAND_DESCRIPTION,");
                        sb.AppendLine("STATUS =@STATUS");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@PART_ID", SqlDbType.Char, 20).Value = cls_Library.DBString(dr["PART_ID"]);
                    cmd.Parameters.Add("@BRAND_DESCRIPTION", SqlDbType.VarChar, 15).Value = cls_Library.DBString(dr["BRAND_DESCRIPTION"]);
                    cmd.Parameters.Add("@STATUS", SqlDbType.TinyInt).Value = cls_Library.DBInt(dr["STATUS"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_ALTERNATE_PARTS"].Rows.Count < cls_Global_DB.GB_DitemPart_count))
                //{
                //    k = dsData.Tables["D_ITEM_ALTERNATE_PARTS"].Rows.Count;
                //    for (int j = k + 1; j <= cls_Global_DB.GB_DitemPart_count; j++)
                //    {
                //        sql = "Delete from D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //        cmd = new SqlCommand();
                //        cmd.Connection = conn;
                //        cmd.CommandText = sql;
                //        cmd.CommandTimeout = 60;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.Clear();
                //        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //        cmd.Transaction = tran;
                //        cmd.ExecuteNonQuery();
                //    }
                //}
                #endregion
                #endregion

                #region กลุ่มสั่งซื้อสินค้า  4
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_PO_GROUPS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_PO_GROUPS"].Rows.Count < cls_Global_DB.GB_DitemPOgroup_count))
                {
                    k = dsData.Tables["D_ITEM_PO_GROUPS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemPOgroup_count; j++)
                    {
                    sql = "Delete from D_ITEM_PO_GROUPS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_PO_GROUPS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemPOgroup_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_PO_GROUPS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("PO_GROUP_ID,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@PO_GROUP_ID,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_PO_GROUPS WITH (UPDLOCK) SET ");
                        sb.AppendLine("PO_GROUP_ID =@PO_GROUP_ID");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    case 4:
                        break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@PO_GROUP_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PO_GROUP_ID"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_PO_GROUPS"].Rows.Count < cls_Global_DB.GB_DitemPOgroup_count))
                //{
                //  k = dsData.Tables["D_ITEM_PO_GROUPS"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemPOgroup_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_PO_GROUPS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion

                #endregion

                #region ผู้แทนจำหน่าย  5
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_VENDORS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_VENDORS"].Rows.Count < cls_Global_DB.GB_DitemVendor_count))
                {
                    k = dsData.Tables["D_ITEM_VENDORS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemVendor_count; j++)
                    {
                    sql = "Delete from D_ITEM_VENDORS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_VENDORS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemVendor_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_VENDORS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("VENDOR_ID,");
                        sb.AppendLine("PRIORITY,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@VENDOR_ID,");
                        sb.AppendLine("@PRIORITY,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_VENDORS WITH (UPDLOCK) SET");
                        sb.AppendLine("VENDOR_ID =@VENDOR_ID,");
                        sb.AppendLine("PRIORITY =@PRIORITY");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    case 4:
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["VENDOR_ID"]);
                    cmd.Parameters.Add("@PRIORITY", SqlDbType.SmallInt).Value = cls_Library.DBInt(dr["PRIORITY"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_VENDORS"].Rows.Count < cls_Global_DB.GB_DitemVendor_count))
                //{
                //  k = dsData.Tables["D_ITEM_VENDORS"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemVendor_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_VENDORS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion

                #endregion

                #region สินค้าที่เป็นสมาชิก  6
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_SETS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_SETS"].Rows.Count < cls_Global_DB.GB_DitemSet_count))
                {
                    k = dsData.Tables["D_ITEM_SETS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemSet_count; j++)
                    {
                    sql = "Delete from D_ITEM_SETS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_SETS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemSet_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_SETS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("SET_ORDER,");
                        sb.AppendLine("SET_ITEM_ID,");
                        sb.AppendLine("BRAND_ID,");
                        sb.AppendLine("QTY,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@SET_ORDER,");
                        sb.AppendLine("@SET_ITEM_ID,");
                        sb.AppendLine("@BRAND_ID,");
                        sb.AppendLine("@QTY,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_SETS WITH (UPDLOCK) SET ");
                        sb.AppendLine("SET_ORDER =@SET_ORDER,");
                        sb.AppendLine("SET_ITEM_ID =@SET_ITEM_ID,");
                        sb.AppendLine("BRAND_ID =@BRAND_ID,");
                        sb.AppendLine("QTY =@QTY");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    case 4:
                        break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SET_ORDER", SqlDbType.SmallInt).Value = cls_Library.DBInt(dr["SET_ORDER"]);
                    cmd.Parameters.Add("@SET_ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SET_ITEM_ID"]);
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(dr["QTY"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_SETS"].Rows.Count < cls_Global_DB.GB_DitemSet_count))
                //{
                //  k = dsData.Tables["D_ITEM_SETS"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemSet_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_SETS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion

                #endregion

                #region ส่วนประกอบ  7
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_COMPONENTS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_COMPONENTS"].Rows.Count < cls_Global_DB.GB_DitemComponent_count))
                {
                    k = dsData.Tables["D_ITEM_COMPONENTS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemComponent_count; j++)
                    {
                    sql = "Delete from D_ITEM_COMPONENTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_COMPONENTS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemComponent_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_COMPONENTS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("COMPONENT_CODE,");
                        sb.AppendLine("COMPONENT_NAME,");
                        sb.AppendLine("QTY,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@COMPONENT_CODE,");
                        sb.AppendLine("@COMPONENT_NAME,");
                        sb.AppendLine("@QTY,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_COMPONENTS WITH (UPDLOCK) SET ");
                        sb.AppendLine("COMPONENT_CODE =@COMPONENT_CODE,");
                        sb.AppendLine("COMPONENT_NAME =@COMPONENT_NAME,");
                        sb.AppendLine("QTY =@QTY");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@COMPONENT_CODE", SqlDbType.Char, 3).Value = cls_Library.DBString(dr["COMPONENT_CODE"]);
                    cmd.Parameters.Add("@COMPONENT_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["COMPONENT_NAME"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(dr["QTY"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;

                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                        idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_COMPONENTS"].Rows.Count < cls_Global_DB.GB_DitemComponent_count))
                //{
                //  k = dsData.Tables["D_ITEM_COMPONENTS"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemComponent_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_COMPONENTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion

                #endregion

                #region รูปภาพ  8
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_PICTURES"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_PICTURES"].Rows.Count < cls_Global_DB.GB_DitemPicture_count))
                {
                    k = dsData.Tables["D_ITEM_PICTURES"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemPicture_count; j++)
                    {
                    sql = "Delete from D_ITEM_PICTURES WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_PICTURES"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemPicture_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_PICTURES WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("PICTURE_FILE_NAME,");
                        sb.AppendLine("PICTURE_IMAGE,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@PICTURE_FILE_NAME,");
                        sb.AppendLine("@PICTURE_IMAGE,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_PICTURES WITH (UPDLOCK) SET ");
                        sb.AppendLine("PICTURE_FILE_NAME =@PICTURE_FILE_NAME,");
                        sb.AppendLine("PICTURE_IMAGE =@PICTURE_IMAGE");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@PICTURE_FILE_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["PICTURE_FILE_NAME"]);
                    string strBasePath = Application.StartupPath + "\\Photos";
                    if (!Directory.Exists(strBasePath))
                    {
                    Directory.CreateDirectory(strBasePath);
                    }
                    var picbyte = (Byte[])(dr["PICTURE_IMAGE"]);
                    //var stream = new MemoryStream(picbyte);
                    MemoryStream MemoryStreamData = new MemoryStream(picbyte);
                    Image image = System.Drawing.Image.FromStream(MemoryStreamData);
                    image.Save(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                    byte[] imageData = Class_ImageResize.ReadFile(strBasePath + "\\" + cls_Library.DBString(dr["PICTURE_FILE_NAME"]));
                    cmd.Parameters.Add(new SqlParameter("@PICTURE_IMAGE", (object)imageData));
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_PICTURES"].Rows.Count < cls_Global_DB.GB_DitemPicture_count))
                //{
                //  k = dsData.Tables["D_ITEM_PICTURES"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemPicture_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_PICTURES WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion
                #endregion

                #region เอกสาร  9
                #region Section 1
                irow = 0;
                if (dsData.Tables.Contains("D_ITEM_DOCUMENTS"))
                {
                if ((mode == 2) && (dsData.Tables["D_ITEM_DOCUMENTS"].Rows.Count < cls_Global_DB.GB_DitemDocument_count))
                {
                    k = dsData.Tables["D_ITEM_DOCUMENTS"].Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemDocument_count; j++)
                    {
                    sql = "Delete from D_ITEM_DOCUMENTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                    }
                }
                foreach (DataRow dr in dsData.Tables["D_ITEM_DOCUMENTS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemDocument_count ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEM_DOCUMENTS WITH (UPDLOCK) (");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("DOCUMENT_ID,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@DOCUMENT_ID,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEM_DOCUMENTS WITH (UPDLOCK) SET ");
                        sb.AppendLine("DOCUMENT_ID =@DOCUMENT_ID");
                        sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                        break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@DOCUMENT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["DOCUMENT_ID"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                //if ((mode == 2) && (dsData.Tables["D_ITEM_DOCUMENTS"].Rows.Count < cls_Global_DB.GB_DitemDocument_count))
                //{
                //  k = dsData.Tables["D_ITEM_DOCUMENTS"].Rows.Count;
                //  for (int j = k + 1; j <= cls_Global_DB.GB_DitemDocument_count; j++)
                //  {
                //    sql = "Delete from D_ITEM_DOCUMENTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                //    cmd = new SqlCommand();
                //    cmd.Connection = conn;
                //    cmd.CommandText = sql;
                //    cmd.CommandTimeout = 60;
                //    cmd.CommandType = CommandType.Text;
                //    cmd.Parameters.Clear();
                //    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                //    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //    cmd.Transaction = tran;
                //    cmd.ExecuteNonQuery();
                //  }
                //}
                #endregion

                #endregion



                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            result = false;
            throw;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            cls_Global_DB.GB_ItemID = id;
            }
            return result;
        }

        public bool SaveDOC(int mode, cls_Struct.StructDOC DOC)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    switch (mode)
                    {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_DOCUMENTS WITH (UPDLOCK) (");
                            sb.AppendLine("DOCUMENT_CODE,");
                            sb.AppendLine("DOCUMENT_NAME,");
                            sb.AppendLine("DOCUMENT_DESCRIPTION,");
                            sb.AppendLine("DOCUMENT_ADDRESS,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("REVISION)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@DOCUMENT_CODE,");
                            sb.AppendLine("@DOCUMENT_NAME,");
                            sb.AppendLine("@DOCUMENT_DESCRIPTION,");
                            sb.AppendLine("@DOCUMENT_ADDRESS,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@REVISION)");
                            sb.AppendLine("SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY]");
                            break;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@DOCUMENT_CODE", SqlDbType.Char, 3).Value = DOC.DOCUMENT_CODE;
                    cmd.Parameters.Add("@DOCUMENT_NAME", SqlDbType.VarChar, 100).Value = DOC.DOCUMENT_NAME;
                    cmd.Parameters.Add("@DOCUMENT_DESCRIPTION", SqlDbType.VarChar, 100).Value = DOC.DOCUMENT_DESCRIPTION;
                    cmd.Parameters.Add("@DOCUMENT_ADDRESS", SqlDbType.VarChar, 100).Value = DOC.DOCUMENT_ADDRESS;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = DOC.CREATE_BY;
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DOC.CREATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = DOC.UPDATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DOC.UPDATE_DATE;
                    cmd.Parameters.Add("@REVISION", SqlDbType.Int).Value = DOC.REVISION;
                    cmd.Transaction = tran;
                    if (mode == 2)
                    {
                        cmd.Parameters.Add("@VENDOR_ID", SqlDbType.Int).Value = DOC.DOCUMENT_ID;
                        id = DOC.DOCUMENT_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        id = (int)cmd.ExecuteScalar();
                        DOC.DOCUMENT_ID = Convert.ToInt32(id);
                    }

                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public bool SaveUnit(int mode, cls_Struct.StructUNIT UNIT)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    switch (mode)
                    {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_UNITS WITH (UPDLOCK) (");
                            sb.AppendLine("UNIT_CODE,");
                            sb.AppendLine("UNIT_NAME,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("REVISION)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@UNIT_CODE,");
                            sb.AppendLine("@UNIT_NAME,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@REVISION)");
                            break;
                    }
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@UNIT_CODE", SqlDbType.Char, 3).Value = UNIT.UNIT_CODE;
                    cmd.Parameters.Add("@UNIT_NAME", SqlDbType.VarChar, 100).Value = UNIT.UNIT_NAME;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = UNIT.CREATE_BY;
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = UNIT.CREATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = UNIT.UPDATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = UNIT.UPDATE_DATE;
                    cmd.Parameters.Add("@REVISION", SqlDbType.Int).Value = UNIT.REVISION;
                    cmd.Transaction = tran;
                    if (mode == 2)
                    {
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = UNIT.UNIT_ID;
                        id = UNIT.UNIT_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        id = (int)cmd.ExecuteScalar();
                        UNIT.UNIT_ID = Convert.ToInt32(id);
                    }

                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public bool SavePO_Group(int mode, cls_Struct.StructGroupPO GPO)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    switch (mode)
                    {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_PO_GROUPS WITH (UPDLOCK) (");
                            sb.AppendLine("PO_GROUP_CODE,");
                            sb.AppendLine("PO_GROUP_NAME,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("REVISION)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@PO_GROUP_CODE,");
                            sb.AppendLine("@PO_GROUP_NAME,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@REVISION)");
                            break;
                    }
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@PO_GROUP_CODE", SqlDbType.Char, 3).Value = GPO.PO_GROUP_CODE;
                    cmd.Parameters.Add("@PO_GROUP_NAME", SqlDbType.VarChar, 100).Value = GPO.PO_GROUP_NAME;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = GPO.CREATE_BY;
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = GPO.CREATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = GPO.UPDATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = GPO.UPDATE_DATE;
                    cmd.Parameters.Add("@REVISION", SqlDbType.Int).Value = GPO.REVISION;
                    cmd.Transaction = tran;
                    if (mode == 2)
                    {
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = GPO.PO_GROUP_ID;
                        id = GPO.PO_GROUP_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        id = (int)cmd.ExecuteScalar();
                        GPO.PO_GROUP_ID = Convert.ToInt32(id);
                    }

                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        #region เฟส 2
        public static void CheckClearJOB()
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataReader reader;
            StringBuilder sb = new StringBuilder();
            try
            {
            DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            if (cls_Global_DB.ConnectDatabase(ref conn))
            {

                //Head
                sb.Clear();
                sb.AppendLine("Select JOB_NO From PJOBHEAD Where JOB_DATE < @date1");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@date1", SqlDbType.DateTime).Value = _date;
                reader = cmd.ExecuteReader();

                if (reader.HasRows)
                {
                //Delete All Data

                reader.Close();

                sb.Clear();
                sb.AppendLine("TRUNCATE TABLE [PJOBHEAD]");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
                }
            }
            }
            catch (Exception ex)
            {
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
        }

        public static DataTable GetListJOB(cls_Struct.GetListJOB JOB)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select *,");
                sb.AppendLine("case JOB_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _JOB_STATUS");
                sb.AppendLine(" From JOBHEAD Where DELETED = 0");
                if (JOB.Operator > 0)
                sb.AppendLine("And JOB_OPERATOR = @JOB_OPERATOR");
                sb.AppendLine("And JOB_DATE BETWEEN @dateFrom AND @dateTo");
                if (JOB.JobStatus > 1) sb.AppendLine("And JOB_STATUS = @JOB_STATUS");
                sb.AppendLine("Order By JOB_DATE Desc, JOB_NO Desc");
                //JOB.Barcode   //XXX

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();

                if (JOB.Operator > 0) _dataAdapter.SelectCommand.Parameters.Add("@JOB_OPERATOR", SqlDbType.Int).Value = JOB.Operator;
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = JOB.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = JOB.DateTo;
                if (JOB.JobStatus > 1) _dataAdapter.SelectCommand.Parameters.Add("@JOB_STATUS", SqlDbType.TinyInt).Value = JOB.JobStatus;
                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListJOB :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static bool DeleteJOB(int jobid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update JOBHEAD WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where JOB_ID = @JOB_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = jobid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update JOBDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where JOBD_PID = @JOBD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = jobid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeletePJOB(int jobid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                //Head
                sb.Clear();
                sb.AppendLine("Update PJOBHEAD WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where JOB_ID = @JOB_ID");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                cmd.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = jobid;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //Detail
                sb.Clear();
                sb.AppendLine("Update PJOBDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where JOBD_PID = @JOBD_PID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = jobid;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetJOBById(int JobID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select * From JOBHEAD Where JOB_ID = @JOB_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = JobID;
                    _dataAdapter.Fill(dsResult, "JOBHEAD");

                    sb.Clear();
                    sb.AppendLine("Select A.*, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, C.LOCATION_NAME, E.BRAND_CODE, E.BRAND_NAME, F.UNIT_CODE, F.UNIT_NAME From JOBDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN D_ITEM_LOCATIONS C ON A.ITEM_ID = C.ITEM_ID And C.LIST_NO = 1");
                    sb.AppendLine("LEFT JOIN M_BRANDS E ON A.BRAND_ID = E.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS F ON A.UNIT_ID = F.UNIT_ID");
                    sb.AppendLine("Where JOBD_PID = @JOBD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = JobID;
                    _dataAdapter.Fill(dsResult, "JOBDETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetJOBById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListPJOB(cls_Struct.GetListJOB JOB)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From PJOBHEAD Where DELETED = 0");
                if (JOB.Operator > 0)
                {
                sb.AppendLine("And JOB_OPERATOR = @JOB_OPERATOR");
                }

                sb.AppendLine("And JOB_DATE BETWEEN @dateFrom AND @dateTo");
                sb.AppendLine("And JOB_STATUS = @JOB_STATUS");
                sb.AppendLine("Order By JOB_NO, JOB_DATE");
                //JOB.Barcode   //XXX

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();

                if (JOB.Operator > 0)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@JOB_OPERATOR", SqlDbType.Int).Value = JOB.Operator;
                }
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = JOB.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = JOB.DateTo;
                _dataAdapter.SelectCommand.Parameters.Add("@JOB_STATUS", SqlDbType.TinyInt).Value = JOB.JobStatus;
                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPJOB :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetListStockOnHandByItemID(int ItemID, byte mode)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                switch (mode)
                {
                case 1:
                    sb.AppendLine("Select A.*, B.USER_CODE From STOCKONHAND A");
                    sb.AppendLine("LEFT JOIN M_USERS B ON A.CREATE_BY = B.USER_ID");
                    sb.AppendLine("Where A.ITEM_ID=@ITEM_ID Order by A.CREATE_DATE desc");
                    break;
                case 2:
                    sb.AppendLine("Select * From STOCKONHAND Where 1=2");
                    break;
                default:
                    break;
                }
          

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemID;
                _dataAdapter.Fill(dsResult, "STOCKONHAND");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListStockOnHandByItemID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["STOCKONHAND"].Copy();
        }

        public static DataSet GetPJOBById(int JobID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.Clear();
                sb.AppendLine("Select * From PJOBHEAD Where JOB_ID = @JOB_ID");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = JobID;
                _dataAdapter.Fill(dsResult, "PJOBHEAD");

                sb.Clear();
                sb.AppendLine("Select A.*, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, C.LOCATION_NAME, E.BRAND_CODE, E.BRAND_NAME, F.UNIT_CODE, F.UNIT_NAME From PJOBDETAIL A");
                sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                sb.AppendLine("LEFT JOIN D_ITEM_LOCATIONS C ON A.ITEM_ID = C.ITEM_ID And C.LIST_NO = 1");
                sb.AppendLine("LEFT JOIN M_BRANDS E ON A.BRAND_ID = E.BRAND_ID");
                sb.AppendLine("LEFT JOIN M_UNITS F ON A.UNIT_ID = F.UNIT_ID");
                sb.AppendLine("Where JOBD_PID = @JOBD_PID And A.DELETED = 0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = JobID;
                _dataAdapter.Fill(dsResult, "PJOBDETAIL");
            }
            }
            catch (Exception ex)
            {
            XtraMessageBox.Show("GetPJOBById :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static bool SaveJOB(cls_Struct.ActionMode mode, cls_Struct.StructJOB JOB, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);


                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            JOB.JOB_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.JOB);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO JOBHEAD WITH (UPDLOCK) (");
                            sb.AppendLine("JOB_NO,");
                            sb.AppendLine("JOB_DATE,");
                            sb.AppendLine("JOB_TYPE,");
                            sb.AppendLine("JOB_OPEN,");
                            sb.AppendLine("JOB_OPERATOR,");
                            sb.AppendLine("JOB_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("BARCODE,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@JOB_NO,");
                            sb.AppendLine("@JOB_DATE,");
                            sb.AppendLine("@JOB_TYPE,");
                            sb.AppendLine("@JOB_OPEN,");
                            sb.AppendLine("@JOB_OPERATOR,");
                            sb.AppendLine("@JOB_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@BARCODE,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET");
                            sb.AppendLine("JOB_NO = @JOB_NO,");
                            sb.AppendLine("JOB_DATE = @JOB_DATE,");
                            sb.AppendLine("JOB_TYPE = @JOB_TYPE,");
                            sb.AppendLine("JOB_OPEN = @JOB_OPEN,");
                            sb.AppendLine("JOB_OPERATOR = @JOB_OPERATOR,");
                            sb.AppendLine("JOB_STATUS = @JOB_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("BARCODE = @BARCODE,");
                            sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                            sb.AppendLine("WHERE JOB_ID = @JOB_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@JOB_NO", SqlDbType.VarChar, 50).Value = JOB.JOB_NO;
                    if ((JOB.JOB_DATE == DateTime.MinValue) || (JOB.JOB_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@JOB_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@JOB_DATE", SqlDbType.DateTime).Value = JOB.JOB_DATE;
                    cmd.Parameters.Add("@JOB_TYPE", SqlDbType.Int).Value = JOB.JOB_TYPE;
                    cmd.Parameters.Add("@JOB_OPEN", SqlDbType.VarChar, 50).Value = JOB.JOB_OPEN;
                    cmd.Parameters.Add("@JOB_OPERATOR", SqlDbType.Int).Value = JOB.JOB_OPERATOR;
                    cmd.Parameters.Add("@JOB_STATUS", SqlDbType.TinyInt).Value = JOB.JOB_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.TinyInt).Value = JOB.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = JOB.LIST_NO;
                    cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = JOB.BARCODE;

                    cmd.Transaction = tran;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = JOB.JOB_ID;
                        id = JOB.JOB_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        id = (int)shipperIdParam.Value;
                    }
                    #endregion

                    #region Detail
                    if (dsData.Tables.Contains("JOBDETAIL"))
                    {
                        SaveJOBDetail(id, dsData.Tables["JOBDETAIL"], ref conn, ref tran);
                    }

                    #endregion

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveJOB :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SaveJOBDetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Transaction = tran;

                foreach (DataRow dr in dt.Rows)
                {
                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO JOBDETAIL WITH (UPDLOCK) (");
                            sb.AppendLine("JOBD_PID,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("STOCK,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("MODEL1,");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("CONV,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@JOBD_PID,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@STOCK,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@MODEL1,");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@GENUIN_PART_ID,");
                            sb.AppendLine("@BRAND_PART_ID,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@CONV,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE JOBDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("ITEM_ID = @ITEM_ID,");
                            sb.AppendLine("STOCK = @STOCK,");
                            sb.AppendLine("FULL_NAME = @FULL_NAME,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                            sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                            sb.AppendLine("UNIT_ID = @UNIT_ID,");
                            sb.AppendLine("QTY = @QTY,");
                            sb.AppendLine("CONV = @CONV,");
                            sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                            sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            sb.Clear();
                            sb.AppendLine("UPDATE JOBDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                            sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                            //sb.AppendLine("Delete From JOBDETAIL WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Default:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE JOBDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                            cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                            cmd.ExecuteNonQuery();
                            continue;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                    if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                    {
                        cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                    }
                    else
                    {
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                    }                
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@STOCK", SqlDbType.VarChar, 20).Value = dr["STOCK"].ToString();
                    cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                    cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                    cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                    cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                    cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                    //cmd.Transaction = tran;

                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                            cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString()); ;
                            cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                            cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                            break;
                    }

                    cmd.ExecuteNonQuery();
                }

                result = true;
            }

            return result;
        }

        public static DataTable GetListRO(cls_Struct.GetListRO RO)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                sb.AppendLine("case RO_STATUS when 1 then 'เปิด' when 2 then 'พิมพ์' when 3 then 'ปิด' Else 'ยกเลิก' End as _RO_STATUS From ROHEADER Where DELETED = 0");
                if (RO.Customer > 0)
                {
                sb.AppendLine("And CUS_ID = @CUS_ID");
                }
          
                sb.AppendLine("And RO_DATE BETWEEN @dateFrom AND @dateTo");
                if (RO.ROStatus > 1) sb.AppendLine("And RO_STATUS = @RO_STATUS");
                sb.AppendLine("Order By RO_DATE Desc, RO_NO Desc");
                //RO.Barcode   //XXX

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (RO.Customer > 0)
                _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RO.Customer;
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = RO.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = RO.DateTo;
                if (RO.ROStatus > 1) _dataAdapter.SelectCommand.Parameters.Add("@RO_STATUS", SqlDbType.TinyInt).Value = RO.ROStatus;
                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListRO :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static bool DeleteRO(int ROid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataSet DSro;
            int iCount = 0;
            int[] RCD_ID = new int[0];
            int[] ITEM_ID = new int[0];
            double[] MARK_NO = new double[0];

            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    DSro = GetROById(ROid);
                    if (DSro.Tables["RODETAIL"].Rows.Count > 0)
                    {
                        iCount = DSro.Tables["RODETAIL"].Rows.Count;
                        Array.Resize(ref RCD_ID, iCount);
                        Array.Resize(ref ITEM_ID, iCount);
                        Array.Resize(ref MARK_NO, iCount);
                        for (int i =0;i < iCount;i++)
                        {
                            RCD_ID[i] = cls_Library.DBInt(DSro.Tables["RODETAIL"].Rows[i]["RCD_ID"]);
                            ITEM_ID[i] = cls_Library.DBInt(DSro.Tables["RODETAIL"].Rows[i]["ITEM_ID"]);
                            MARK_NO[i] = cls_Library.DBDouble(DSro.Tables["RODETAIL"].Rows[i]["MARK_NO"]);
                        }
                    }

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update ROHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where ROH_ID = @ROH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@ROH_ID", SqlDbType.Int).Value = ROid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update RODETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where ROD_PID = @ROD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = ROid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    for (int i=0;i< iCount;i++)
                    {
                        sb.Clear();
                        sb.AppendLine("Update RCDETAIL WITH (UPDLOCK) Set QTY_MARK=QTY_MARK + @MARK_NO,QTY_RETURN = QTY_RETURN - @MARK_NO Where RCD_ID = @RCD_ID and ITEM_ID=@ITEM_ID");

                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@RCD_ID", SqlDbType.Int, 4).Value = RCD_ID[i];
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int,4).Value = ITEM_ID[i];
                        cmd.Parameters.Add("@MARK_NO", SqlDbType.Float).Value = MARK_NO[i];

                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                    }

                    tran.Commit();



                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetROById(int ROID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*,case A.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS, B.VENDOR_CODE From ROHEADER A");
                    sb.AppendLine("LEFT JOIN M_VENDORS B ON A.CUS_ID = B.VENDOR_ID");
                    sb.AppendLine("Where ROH_ID = @ROH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ROH_ID", SqlDbType.Int).Value = ROID;
                    _dataAdapter.Fill(dsResult, "ROHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*,case A.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE,");
                    sb.AppendLine("B.ITEM_CODE, B.FULL_NAME, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From RODETAIL A");                 
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");                
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where ROD_PID = @ROD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = ROID;
                    _dataAdapter.Fill(dsResult, "RODETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetROById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool SavePJOB(cls_Struct.ActionMode mode, cls_Struct.StructJOB JOB, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);


                #region Head
                switch (mode)
                {
                case cls_Struct.ActionMode.Add:
                case cls_Struct.ActionMode.Copy:
                    JOB.JOB_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.PJOB);
                    sb.Clear();
                    sb.AppendLine("INSERT INTO PJOBHEAD WITH (UPDLOCK) (");
                    sb.AppendLine("JOB_NO,");
                    sb.AppendLine("JOB_DATE,");
                    sb.AppendLine("JOB_TYPE,");
                    sb.AppendLine("JOB_OPEN,");
                    sb.AppendLine("JOB_OPERATOR,");
                    sb.AppendLine("JOB_STATUS,");
                    sb.AppendLine("PRINT_NO,");
                    sb.AppendLine("LIST_NO,");
                    sb.AppendLine("BARCODE,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("DELETED");
                    sb.AppendLine(") VALUES(");
                    sb.AppendLine("@JOB_NO,");
                    sb.AppendLine("@JOB_DATE,");
                    sb.AppendLine("@JOB_TYPE,");
                    sb.AppendLine("@JOB_OPEN,");
                    sb.AppendLine("@JOB_OPERATOR,");
                    sb.AppendLine("@JOB_STATUS,");
                    sb.AppendLine("@PRINT_NO,");
                    sb.AppendLine("@LIST_NO,");
                    sb.AppendLine("@BARCODE,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@DELETED");
                    sb.AppendLine(")");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                    break;
                case cls_Struct.ActionMode.Edit:
                    sb.Clear();
                    sb.AppendLine("UPDATE PJOBHEAD WITH (UPDLOCK) SET");
                    sb.AppendLine("JOB_NO = @JOB_NO,");
                    sb.AppendLine("JOB_DATE = @JOB_DATE,");
                    sb.AppendLine("JOB_TYPE = @JOB_TYPE,");
                    sb.AppendLine("JOB_OPEN = @JOB_OPEN,");
                    sb.AppendLine("JOB_OPERATOR = @JOB_OPERATOR,");
                    sb.AppendLine("JOB_STATUS = @JOB_STATUS,");
                    sb.AppendLine("PRINT_NO = @PRINT_NO,");
                    sb.AppendLine("LIST_NO = @LIST_NO,");
                    sb.AppendLine("BARCODE = @BARCODE,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                    sb.AppendLine("WHERE JOB_ID = @JOB_ID");
                    break;
                }

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Parameters.Add("@JOB_NO", SqlDbType.VarChar, 50).Value = JOB.JOB_NO;
                if ((JOB.JOB_DATE == DateTime.MinValue) || (JOB.JOB_DATE == DateTime.MaxValue))
                cmd.Parameters.Add("@JOB_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                else
                cmd.Parameters.Add("@JOB_DATE", SqlDbType.DateTime).Value = JOB.JOB_DATE;
                cmd.Parameters.Add("@JOB_TYPE", SqlDbType.Int).Value = JOB.JOB_TYPE;
                cmd.Parameters.Add("@JOB_OPEN", SqlDbType.VarChar, 50).Value = JOB.JOB_OPEN;
                cmd.Parameters.Add("@JOB_OPERATOR", SqlDbType.Int).Value = JOB.JOB_OPERATOR;
                cmd.Parameters.Add("@JOB_STATUS", SqlDbType.TinyInt).Value = JOB.JOB_STATUS;
                cmd.Parameters.Add("@PRINT_NO", SqlDbType.TinyInt).Value = JOB.PRINT_NO;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = JOB.LIST_NO;
                cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = JOB.BARCODE;

                cmd.Transaction = tran;

                if (mode == cls_Struct.ActionMode.Edit)
                {
                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@JOB_ID", SqlDbType.Int).Value = JOB.JOB_ID;
                id = JOB.JOB_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }
                #endregion

                #region Detail
                if (dsData.Tables.Contains("PJOBDETAIL"))
                {
                SaveJOBDetail(id, dsData.Tables["PJOBDETAIL"], ref conn, ref tran);
                }

                #endregion

                tran.Commit();
                ret = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            XtraMessageBox.Show("SavePJOB :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SaveRO(cls_Struct.ActionMode mode, cls_Struct.StructRO RO, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            RO.RO_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.RO);

                            //Update
                            RO.SUM_DOC = dsData.Tables["RODETAIL"].AsEnumerable().Sum(x => x.Field<decimal?>("PRICE_DOC") ?? 0);
                            RO.DISCLST_DOC = dsData.Tables["RODETAIL"].AsEnumerable().Sum(x => x.Field<decimal?>("DISCA") ?? 0);
                            RO.VAT_DOC = dsData.Tables["RODETAIL"].AsEnumerable().Sum(x => x.Field<decimal?>("PRICEVAT") ?? 0);
                            RO.NET_DOC = dsData.Tables["RODETAIL"].AsEnumerable().Sum(x => x.Field<decimal?>("NET_DOC") ?? 0);

                            sb.Clear();
                            sb.AppendLine("INSERT INTO ROHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("RO_NO,");
                            sb.AppendLine("RO_DATE,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("RO_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("BARCODE,");
                            sb.AppendLine("SUM_DOC,");
                            sb.AppendLine("DISCLST_DOC,");
                            sb.AppendLine("VAT_DOC,");
                            sb.AppendLine("NET_DOC,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@RO_NO,");
                            sb.AppendLine("@RO_DATE,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@RO_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@BARCODE,");
                            sb.AppendLine("@SUM_DOC,");
                            sb.AppendLine("@DISCLST_DOC,");
                            sb.AppendLine("@VAT_DOC,");
                            sb.AppendLine("@NET_DOC,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("RO_NO = @RO_NO,");
                            sb.AppendLine("RO_DATE = @RO_DATE,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                            sb.AppendLine("RO_STATUS = @RO_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("BARCODE = @BARCODE,");
                            sb.AppendLine("SUM_DOC = @SUM_DOC,");
                            sb.AppendLine("DISCLST_DOC = @DISCLST_DOC,");
                            sb.AppendLine("VAT_DOC = @VAT_DOC,");
                            sb.AppendLine("NET_DOC = @NET_DOC,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine(" WHERE ROH_ID = @ROH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@RO_NO", SqlDbType.VarChar, 50).Value = RO.RO_NO;
                    if ((RO.RO_DATE == DateTime.MinValue) || (RO.RO_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@RO_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@RO_DATE", SqlDbType.DateTime).Value = RO.RO_DATE;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RO.CUS_ID;
                    cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = RO.VAT_STATUS;
                    cmd.Parameters.Add("@RO_STATUS", SqlDbType.TinyInt).Value = RO.RO_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.TinyInt).Value = RO.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = RO.LIST_NO;
                    cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = RO.BARCODE;
                    cmd.Parameters.Add("@SUM_DOC", SqlDbType.Decimal).Value = RO.SUM_DOC;
                    cmd.Parameters.Add("@DISCLST_DOC", SqlDbType.Decimal).Value = RO.DISCLST_DOC;
                    cmd.Parameters.Add("@VAT_DOC", SqlDbType.Decimal).Value = RO.VAT_DOC;
                    cmd.Parameters.Add("@NET_DOC", SqlDbType.Decimal).Value = RO.NET_DOC;

                    cmd.Transaction = tran;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@ROH_ID", SqlDbType.Int).Value = RO.ROH_ID;
                        id = RO.ROH_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        id = (int)shipperIdParam.Value;
                    }

                    #endregion

                    #region Detail
                    if (dsData.Tables.Contains("RODETAIL"))
                    {
                        SaveRODetail(id, dsData.Tables["RODETAIL"], ref conn, ref tran);
                    }
                    #endregion

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveRO :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SaveRODetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Transaction = tran;

                foreach (DataRow dr in dt.Rows)
                {
                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO RODETAIL WITH (UPDLOCK) (");
                            sb.AppendLine("ROD_PID,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("RCD_ID,");
                            sb.AppendLine("INV_NO,");
                            sb.AppendLine("INV_DATE,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID,");
                            sb.AppendLine("MODEL1,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("RETURN_QTY,");
                            sb.AppendLine("CONV,");
                            sb.AppendLine("PRICE_DOC,");
                            sb.AppendLine("MARK_NO,");
                            sb.AppendLine("DISCOUNT1,");
                            sb.AppendLine("DISCOUNT2,");
                            sb.AppendLine("DISCOUNT3,");
                            sb.AppendLine("COG,");                        
                            sb.AppendLine("PRICEVAT,");
                            sb.AppendLine("NET_DOC,");
                            sb.AppendLine("NOSUMVAT,");
                            sb.AppendLine("RETURN_REASON,");
                            //sb.AppendLine("RO_STATUS,");
                            //sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("SELL_TYPE,");
                            sb.AppendLine("CATEGORY_ID,");
                            sb.AppendLine("CREDIT_TERM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@ROD_PID,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@RCD_ID,");
                            sb.AppendLine("@INV_NO,");
                            sb.AppendLine("@INV_DATE,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@GENUIN_PART_ID,");
                            sb.AppendLine("@BRAND_PART_ID,");
                            sb.AppendLine("@MODEL1,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@RETURN_QTY,");
                            sb.AppendLine("@CONV,");
                            sb.AppendLine("@PRICE_DOC,");
                            sb.AppendLine("@MARK_NO,");
                            sb.AppendLine("@DISCOUNT1,");
                            sb.AppendLine("@DISCOUNT2,");
                            sb.AppendLine("@DISCOUNT3,");
                            sb.AppendLine("@COG,");
                            sb.AppendLine("@PRICEVAT,");
                            sb.AppendLine("@NET_DOC,");
                            sb.AppendLine("@NOSUMVAT,");
                            sb.AppendLine("@RETURN_REASON,");
                            //sb.AppendLine("@RO_STATUS,");
                            //sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@SELL_TYPE,");
                            sb.AppendLine("@CATEGORY_ID,");
                            sb.AppendLine("@CREDIT_TERM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE RODETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("RCD_ID = @RCD_ID,");
                            sb.AppendLine("INV_NO = @INV_NO,");
                            sb.AppendLine("INV_DATE = @INV_DATE,");
                            sb.AppendLine("ITEM_ID = @ITEM_ID,");
                            sb.AppendLine("FULL_NAME = @FULL_NAME,");
                            sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                            sb.AppendLine("UNIT_ID = @UNIT_ID,");
                            sb.AppendLine("RETURN_QTY = @RETURN_QTY,");
                            sb.AppendLine("CONV = @CONV,");
                            sb.AppendLine("PRICE_DOC = @PRICE_DOC,");
                            sb.AppendLine("MARK_NO = @MARK_NO,");
                            sb.AppendLine("DISCOUNT1 = @DISCOUNT1,");
                            sb.AppendLine("DISCOUNT2 = @DISCOUNT2,");
                            sb.AppendLine("DISCOUNT3 = @DISCOUNT3,");
                            sb.AppendLine("COG = @COG,");
                            sb.AppendLine("PRICEVAT = @PRICEVAT,");
                            sb.AppendLine("NET_DOC = @NET_DOC,");
                            sb.AppendLine("NOSUMVAT = @NOSUMVAT,");
                            sb.AppendLine("RETURN_REASON = @RETURN_REASON,");
                            //sb.AppendLine("RO_STATUS = @RO_STATUS,");
                            //sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                            sb.AppendLine("SELL_TYPE = @SELL_TYPE,");
                            sb.AppendLine("CATEGORY_ID = @CATEGORY_ID,");
                            sb.AppendLine("CREDIT_TERM = @CREDIT_TERM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE ROD_ID = @ROD_ID AND ROD_PID = @ROD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            sb.Clear();
                            sb.AppendLine("UPDATE RODETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                            sb.AppendLine("WHERE ROD_ID = @ROD_ID AND ROD_PID = @ROD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Default:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE RODETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine("WHERE ROD_ID = @ROD_ID AND ROD_PID = @ROD_PID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            cmd.Parameters.Add("@ROD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ROD_ID"]);
                            cmd.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = id;
                            cmd.ExecuteNonQuery();
                            continue;
                        }

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                        //cmd.Transaction = tran;

                    if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                    {
                        cmd.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                    }
                    else
                    {
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                    }
                    cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RCD_ID"]);
                    cmd.Parameters.Add("@INV_NO", SqlDbType.VarChar, 50).Value = dr["INV_NO"].ToString();
                    //cmd.Parameters.Add("@INV_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["INV_DATE"]);
                    if ((cls_Library.DBDateTime(dr["INV_DATE"]) == DateTime.MinValue) || (cls_Library.DBDateTime(dr["INV_DATE"]) == DateTime.MaxValue))
                        cmd.Parameters.Add("@INV_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@INV_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["INV_DATE"]);
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                    cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                    cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                    cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                    cmd.Parameters.Add("@RETURN_QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["RETURN_QTY"]);
                    cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                    cmd.Parameters.Add("@PRICE_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICE_DOC"]);
                    cmd.Parameters.Add("@MARK_NO", SqlDbType.Float).Value = cls_Library.DBDouble(dr["MARK_NO"]);
                    cmd.Parameters.Add("@DISCOUNT1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT1"]);
                    cmd.Parameters.Add("@DISCOUNT2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT2"]);
                    cmd.Parameters.Add("@DISCOUNT3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT3"]);
                    cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                    cmd.Parameters.Add("@PRICEVAT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICEVAT"]);
                    cmd.Parameters.Add("@NET_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NET_DOC"]);
                    cmd.Parameters.Add("@NOSUMVAT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NOSUMVAT"]);
                    cmd.Parameters.Add("@RETURN_REASON", SqlDbType.VarChar, 255).Value = dr["RETURN_REASON"].ToString();
                    //cmd.Parameters.Add("@RO_STATUS", SqlDbType.TinyInt).Value = cls_Library.DBByte(dr["RO_STATUS"]);
                    //cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = cls_Library.DBByte(dr["VAT_STATUS"]);
                    cmd.Parameters.Add("@SELL_TYPE", SqlDbType.TinyInt).Value = cls_Library.DBByte(dr["SELL_TYPE"]);
                    cmd.Parameters.Add("@CATEGORY_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["CATEGORY_ID"]);
                    cmd.Parameters.Add("@CREDIT_TERM", SqlDbType.Int).Value = cls_Library.DBInt(dr["CREDIT_TERM"]);


                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@ROD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ROD_ID"]);
                            cmd.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = id;
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString()); ;
                            cmd.Parameters.Add("@ROD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ROD_ID"]);
                            cmd.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = id;
                            break;
                    }

                    cmd.ExecuteNonQuery();
                }
                result = true;
            }
            return result;
        }

        public static DataTable GetListRC(cls_Struct.GetListRC RC)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE, ");
                sb.AppendLine("case RC_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _RC_STATUS");
                sb.AppendLine(" From RCHEADER Where DELETED = 0");
                if (RC.Operator > 0)
                {
                    sb.AppendLine("And CUS_ID = @CUS_ID");
                }

                if (RC.RCStatus > 1) sb.AppendLine("And RC_STATUS = @RC_STATUS");
                if (RC.Selltype > 1) sb.AppendLine("And SELL_TYPE = @SELL_TYPE");

                sb.AppendLine("And RC_DATE BETWEEN @dateFrom AND @dateTo");
                sb.AppendLine("Order By RC_DATE Desc, RC_NO");
                //RC.RCStatus
                //RC.Selltype
                //RC.Barcode   //XXX

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (RC.Operator > 0)
                _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RC.Operator;
                if (RC.RCStatus > 1) _dataAdapter.SelectCommand.Parameters.Add("@RC_STATUS", SqlDbType.TinyInt).Value = RC.RCStatus - 1;
                if (RC.Selltype > 1) _dataAdapter.SelectCommand.Parameters.Add("@SELL_TYPE", SqlDbType.TinyInt).Value = RC.Selltype - 1;
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = RC.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = RC.DateTo;
                //_dataAdapter.SelectCommand.Parameters.Add("@", SqlDbType.TinyInt).Value = RC.RCStatus;
                dt = new DataTable("RC");
                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListRC :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static bool DeleteRC(int RCid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update RCHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RCH_ID = @RCH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RCH_ID", SqlDbType.Int).Value = RCid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update RCDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RCD_PID = @RCD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = RCid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetRCById(int RCID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.Clear();
                sb.AppendLine("Select A.*, B.VENDOR_CODE, C.CATEGORY_CODE, C.CATEGORY_NAME From RCHEADER A");
                sb.AppendLine("LEFT JOIN M_VENDORS B ON A.CUS_ID = B.VENDOR_ID");
                sb.AppendLine("LEFT JOIN M_CATEGORIES C ON A.CATEGORY_ID = C.CATEGORY_ID");
                sb.AppendLine("Where RCH_ID = @RCH_ID");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@RCH_ID", SqlDbType.Int).Value = RCID;
                _dataAdapter.Fill(dsResult, "RCHEADER");

                sb.Clear();
                sb.AppendLine("Select A.*,CASE WHEN A.CONV > 1 THEN A.QTY/A.CONV ELSE A.QTY END AS Quantity,CASE WHEN A.NET_DOC = 0 and A.DISCOUNT > 0 THEN (A.COG_DOC)/A.QTY ELSE A.NET_DOC END as NET_DOC_AC, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME, E.codename From RCDETAIL A");
                sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");                
                sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                sb.AppendLine("LEFT JOIN Vw_UnitName E ON A.UNIT_ID = E.UNIT_ID and A.ITEM_ID = E.ITEM_ID");
                //sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                sb.AppendLine("Where RCD_PID = @RCD_PID And A.DELETED = 0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = RCID;
                _dataAdapter.Fill(dsResult, "RCDETAIL");
            }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetRCById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }


        public static DataSet GetRCRemarkById(int ITEM_ID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int RCD_PID = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {                   
                    sb.Clear();
                    sb.AppendLine("Select TOP 1 A.*,CASE WHEN A.CONV > 1 THEN A.QTY/A.CONV ELSE A.QTY END AS Quantity,CASE WHEN A.NET_DOC = 0 and A.DISCOUNT > 0 THEN (A.COG_DOC)/A.QTY ELSE A.NET_DOC END as NET_DOC_AC, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME, E.codename From RCDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN Vw_UnitName E ON A.UNIT_ID = E.UNIT_ID and A.ITEM_ID = E.ITEM_ID");
                    //sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where 1=1 and ISNULL(A.QTY_MARK,0) > 0 and (ISNULL(A.QTY_MARK,0) - ISNULL(A.QTY_RETURN,0) > 0) and A.ITEM_ID = @ITEM_ID And A.DELETED = 0");
                    sb.AppendLine("order by A.UPDATE_DATE");
                    

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ITEM_ID;
                    _dataAdapter.Fill(dsResult, "RCDETAIL");
                    if (dsResult.Tables["RCDETAIL"].Rows.Count > 0) RCD_PID = cls_Library.DBInt(dsResult.Tables["RCDETAIL"].Rows[0]["RCD_PID"]);


                    sb.Clear();
                    sb.AppendLine("Select A.*, B.VENDOR_CODE, C.CATEGORY_CODE, C.CATEGORY_NAME From RCHEADER A");
                    sb.AppendLine("LEFT JOIN M_VENDORS B ON A.CUS_ID = B.VENDOR_ID");
                    sb.AppendLine("LEFT JOIN M_CATEGORIES C ON A.CATEGORY_ID = C.CATEGORY_ID");
                    sb.AppendLine("Where RCH_ID = @RCH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RCH_ID", SqlDbType.Int).Value = RCD_PID;
                    _dataAdapter.Fill(dsResult, "RCHEADER");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetRCById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool SaveRC(cls_Struct.ActionMode mode, cls_Struct.StructRC RC, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region Head
                switch (mode)
                {
                case cls_Struct.ActionMode.Add:
                case cls_Struct.ActionMode.Copy:
                    RC.RC_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.RC);
                    sb.Clear();
                    sb.AppendLine("INSERT INTO RCHEADER WITH (UPDLOCK) (");
                    sb.AppendLine("RC_NO,");
                    sb.AppendLine("RC_DATE,");
                    sb.AppendLine("INV_NO,");
                    sb.AppendLine("INV_DATE,");
                    sb.AppendLine("SELL_TYPE,");
                    sb.AppendLine("CUS_ID,");
                    sb.AppendLine("CATEGORY_ID,");
                    sb.AppendLine("CREDIT_TERM,");
                    sb.AppendLine("VAT_STATUS,");
                    sb.AppendLine("LIST_NO,");
                    sb.AppendLine("BARCODE,");
                    sb.AppendLine("DISCLST,");
                    sb.AppendLine("SUM_DOC,");
                    sb.AppendLine("VAT_DOC,");
                    sb.AppendLine("NET_DOC,");
                    sb.AppendLine("SUM_REAL,");
                    sb.AppendLine("VAT_REAL,");
                    sb.AppendLine("NET_REAL,");
                    sb.AppendLine("ACTIVE,");
                    sb.AppendLine("RC_STATUS,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("DELETED");
                    sb.AppendLine(") VALUES(");
                    sb.AppendLine("@RC_NO,");
                    sb.AppendLine("@RC_DATE,");
                    sb.AppendLine("@INV_NO,");
                    sb.AppendLine("@INV_DATE,");
                    sb.AppendLine("@SELL_TYPE,");
                    sb.AppendLine("@CUS_ID,");
                    sb.AppendLine("@CATEGORY_ID,");
                    sb.AppendLine("@CREDIT_TERM,");
                    sb.AppendLine("@VAT_STATUS,");
                    sb.AppendLine("@LIST_NO,");
                    sb.AppendLine("@BARCODE,");
                    sb.AppendLine("@DISCLST,");
                    sb.AppendLine("@SUM_DOC,");
                    sb.AppendLine("@VAT_DOC,");
                    sb.AppendLine("@NET_DOC,");
                    sb.AppendLine("@SUM_REAL,");
                    sb.AppendLine("@VAT_REAL,");
                    sb.AppendLine("@NET_REAL,");
                    sb.AppendLine("@ACTIVE,");
                    sb.AppendLine("@RC_STATUS,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@DELETED");
                    sb.AppendLine(")");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                    break;
                case cls_Struct.ActionMode.Edit:
                    sb.Clear();
                    sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET");
                    sb.AppendLine("RC_NO = @RC_NO,");
                    sb.AppendLine("RC_DATE = @RC_DATE,");
                    sb.AppendLine("INV_NO = @INV_NO,");
                    sb.AppendLine("INV_DATE = @INV_DATE,");
                    sb.AppendLine("SELL_TYPE = @SELL_TYPE,");
                    sb.AppendLine("CUS_ID = @CUS_ID,");
                    sb.AppendLine("CATEGORY_ID = @CATEGORY_ID,");
                    sb.AppendLine("CREDIT_TERM = @CREDIT_TERM,");
                    sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                    sb.AppendLine("LIST_NO = @LIST_NO,");
                    sb.AppendLine("BARCODE = @BARCODE,");
                    sb.AppendLine("DISCLST = @DISCLST,");
                    sb.AppendLine("SUM_DOC = @SUM_DOC,");
                    sb.AppendLine("VAT_DOC = @VAT_DOC,");
                    sb.AppendLine("NET_DOC = @NET_DOC,");
                    sb.AppendLine("SUM_REAL = @SUM_REAL,");
                    sb.AppendLine("VAT_REAL = @VAT_REAL,");
                    sb.AppendLine("NET_REAL = @NET_REAL,");
                    sb.AppendLine("ACTIVE = @ACTIVE,");
                    sb.AppendLine("RC_STATUS = @RC_STATUS,");
                    sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                    sb.AppendLine("WHERE RCH_ID = @RCH_ID");
                    break;
                }

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;

                cmd.Parameters.Add("@RC_NO", SqlDbType.VarChar, 50).Value = RC.RC_NO;
                if ((RC.RC_DATE == DateTime.MinValue) || (RC.RC_DATE == DateTime.MaxValue))
                    cmd.Parameters.Add("@RC_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                else
                    cmd.Parameters.Add("@RC_DATE", SqlDbType.DateTime).Value = RC.RC_DATE;
                cmd.Parameters.Add("@INV_NO", SqlDbType.VarChar, 50).Value = RC.INV_NO;
                if ((RC.INV_DATE == DateTime.MinValue) || (RC.INV_DATE == DateTime.MaxValue))
                    cmd.Parameters.Add("@INV_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                else
                    cmd.Parameters.Add("@INV_DATE", SqlDbType.DateTime).Value = RC.INV_DATE;
                cmd.Parameters.Add("@SELL_TYPE", SqlDbType.TinyInt).Value = RC.SELL_TYPE;
                cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RC.CUS_ID;
                cmd.Parameters.Add("@CATEGORY_ID", SqlDbType.Int).Value = RC.CATEGORY_ID;
                cmd.Parameters.Add("@CREDIT_TERM", SqlDbType.Int).Value = RC.CREDIT_TERM;
                cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = RC.VAT_STATUS;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = RC.LIST_NO;
                cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = RC.BARCODE;
                cmd.Parameters.Add("@DISCLST", SqlDbType.Decimal).Value = RC.DISCLST;
                cmd.Parameters.Add("@SUM_DOC", SqlDbType.Decimal).Value = RC.SUM_DOC;
                cmd.Parameters.Add("@VAT_DOC", SqlDbType.Decimal).Value = RC.VAT_DOC;
                cmd.Parameters.Add("@NET_DOC", SqlDbType.Decimal).Value = RC.NET_DOC;
                cmd.Parameters.Add("@SUM_REAL", SqlDbType.Decimal).Value = RC.SUM_REAL;
                cmd.Parameters.Add("@VAT_REAL", SqlDbType.Decimal).Value = RC.VAT_REAL;
                cmd.Parameters.Add("@NET_REAL", SqlDbType.Decimal).Value = RC.NET_REAL;
                cmd.Parameters.Add("@ACTIVE", SqlDbType.Bit).Value = true;
                cmd.Parameters.Add("@RC_STATUS", SqlDbType.Decimal).Value = RC.RC_STATUS;

                if (mode == cls_Struct.ActionMode.Edit)
                {
                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@RCH_ID", SqlDbType.Int).Value = RC.RCH_ID;
                id = RC.RCH_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }

                #endregion

                #region Detail
                if (dsData.Tables.Contains("RCDETAIL"))
                {
                SaveRCDetail(id, dsData.Tables["RCDETAIL"], ref conn, ref tran);
                }
                #endregion

                tran.Commit();
                ret = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            XtraMessageBox.Show("SaveRC :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SaveRCDetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Transaction = tran;

                foreach (DataRow dr in dt.Rows)
                {
                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO RCDETAIL WITH (UPDLOCK) (");
                            sb.AppendLine("RCD_PID,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("MODEL1,");
                            sb.AppendLine("GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("CONV,");
                            sb.AppendLine("DISCOUNT,");
                            sb.AppendLine("DISCOUNT1,");
                            sb.AppendLine("DISCOUNT2,");
                            sb.AppendLine("DISCOUNT3,");                        
                            sb.AppendLine("PRICE_DOC,");
                            sb.AppendLine("COG_DOC,");
                            sb.AppendLine("VAT_DOC,");
                            sb.AppendLine("NET_DOC,");                        
                            sb.AppendLine("NOSUMVAT_DOC,");
                            sb.AppendLine("PRICE_REAL,");
                            sb.AppendLine("COG_REAL,");
                            sb.AppendLine("VAT_REAL,");
                            sb.AppendLine("NET_REAL,");
                            sb.AppendLine("NOSUMVAT_REAL,");
                            sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("BARCODE_NO,");
                            sb.AppendLine("BRANDIMP,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@RCD_PID,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@MODEL1,");
                            sb.AppendLine("@GENUIN_PART_ID,");
                            sb.AppendLine("@BRAND_PART_ID,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@CONV,");
                            sb.AppendLine("@DISCOUNT,");
                            sb.AppendLine("@DISCOUNT1,");
                            sb.AppendLine("@DISCOUNT2,");
                            sb.AppendLine("@DISCOUNT3,");                       
                            sb.AppendLine("@PRICE_DOC,");
                            sb.AppendLine("@COG_DOC,");
                            sb.AppendLine("@VAT_DOC,");
                            sb.AppendLine("@NET_DOC,");
                            sb.AppendLine("@NOSUMVAT_DOC,");
                            sb.AppendLine("@PRICE_REAL,");
                            sb.AppendLine("@COG_REAL,");
                            sb.AppendLine("@VAT_REAL,");
                            sb.AppendLine("@NET_REAL,");
                            sb.AppendLine("@NOSUMVAT_REAL,");
                            sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@BARCODE_NO,");
                            sb.AppendLine("@BRANDIMP,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("ITEM_ID = @ITEM_ID,");
                            sb.AppendLine("FULL_NAME = @FULL_NAME,");
                            sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                            sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                            sb.AppendLine("UNIT_ID = @UNIT_ID,");
                            sb.AppendLine("QTY = @QTY,");
                            sb.AppendLine("CONV = @CONV,");
                            sb.AppendLine("DISCOUNT = @DISCOUNT,");
                            sb.AppendLine("DISCOUNT1 = @DISCOUNT1,");
                            sb.AppendLine("DISCOUNT2 = @DISCOUNT2,");
                            sb.AppendLine("DISCOUNT3 = @DISCOUNT3,");                        
                            sb.AppendLine("PRICE_DOC = @PRICE_DOC,");
                            sb.AppendLine("COG_DOC = @COG_DOC,");
                            sb.AppendLine("VAT_DOC = @VAT_DOC,");
                            sb.AppendLine("NET_DOC = @NET_DOC,");
                            sb.AppendLine("NOSUMVAT_DOC = @NOSUMVAT_DOC,");
                            sb.AppendLine("PRICE_REAL = @PRICE_REAL,");
                            sb.AppendLine("COG_REAL = @COG_REAL,");
                            sb.AppendLine("VAT_REAL = @VAT_REAL,");
                            sb.AppendLine("NET_REAL = @NET_REAL,");
                            sb.AppendLine("NOSUMVAT_REAL = @NOSUMVAT_REAL,");
                            sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                            sb.AppendLine("BARCODE_NO = @BARCODE_NO,");
                            sb.AppendLine("BRANDIMP = @BRANDIMP,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE RCD_ID = @RCD_ID AND RCD_PID = @RCD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            sb.Clear();
                            sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                            sb.AppendLine("WHERE RCD_ID = @RCD_ID AND RCD_PID = @RCD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Default:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine("WHERE RCD_ID = @RCD_ID AND RCD_PID = @RCD_PID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RCD_ID"]);
                            cmd.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = id;
                            cmd.ExecuteNonQuery();
                            continue;
                    }

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                        //cmd.Transaction = tran;

                    if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                    {
                        cmd.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                    }
                    else
                    {
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                    }  
                
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                    cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                    cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                    cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                    cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                    cmd.Parameters.Add("@DISCOUNT", SqlDbType.NVarChar,100).Value = cls_Library.DBDecimal(dr["DISCOUNT"]);
                    cmd.Parameters.Add("@DISCOUNT1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT1"]);
                    cmd.Parameters.Add("@DISCOUNT2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT2"]);
                    cmd.Parameters.Add("@DISCOUNT3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT3"]);                
                    cmd.Parameters.Add("@PRICE_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICE_DOC"]);
                    cmd.Parameters.Add("@COG_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG_DOC"]);
                    cmd.Parameters.Add("@VAT_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VAT_DOC"]);
                    cmd.Parameters.Add("@NET_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NET_DOC"]);
                    cmd.Parameters.Add("@NOSUMVAT_DOC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NOSUMVAT_DOC"]);
                    cmd.Parameters.Add("@PRICE_REAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICE_REAL"]);
                    cmd.Parameters.Add("@COG_REAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG_REAL"]);
                    cmd.Parameters.Add("@VAT_REAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VAT_REAL"]);
                    cmd.Parameters.Add("@NET_REAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NET_REAL"]);
                    cmd.Parameters.Add("@NOSUMVAT_REAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NOSUMVAT_REAL"]);
                    cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = cls_Library.DBInt(dr["VAT_STATUS"]);
                    cmd.Parameters.Add("@BARCODE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["BARCODE_NO"]);
                    cmd.Parameters.Add("@BRANDIMP", SqlDbType.VarChar, 15).Value = dr["BRANDIMP"].ToString();

                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RCD_ID"]);
                            cmd.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = id;
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString()); ;
                            cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RCD_ID"]);
                            cmd.Parameters.Add("@RCD_PID", SqlDbType.Int).Value = id;
                            break;
                    }

                    cmd.ExecuteNonQuery();
                    //switch (cls_Library.DBInt(dr["mode"]))
                    //{
                    //    case (int)cls_Struct.ActionMode.Add:
                    //    case (int)cls_Struct.ActionMode.Copy:
                    //    case (int)cls_Struct.ActionMode.Edit:
                    //        UpdateLastTransfer(cls_Struct.VoucherType.RC, dr);
                    //        break;
                    //}
                }
                
                result = true;
            }

            return result;
        }

        public static DataTable GetListPO(cls_Struct.GetListPO PO)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DateTime Df, Dt;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    ////sb.AppendLine("Select * From POHEADER Where DELETED = 0 Order By PO_NO, PO_DATE");
                    //Df = cls_Library.Date_CvDMY(1, PO.DateFrom.Month, PO.DateFrom.Year, false);
                    //Dt = cls_Library.Date_CvDMY(1, PO.DateTo.Month, PO.DateTo.Year, false);

                    sb.AppendLine("Select * From POHEADER Where DELETED = 0");
                    if (PO.Customer > 0)
                    {
                    sb.AppendLine("And CUS_ID = @CUS_ID");
                    }
          
                    sb.AppendLine("And PO_DATE BETWEEN @dateFrom AND @dateTo");
                    if (PO.POStatus > 1)
                    {
                    sb.AppendLine("And PO_STATUS = @PO_STATUS");
                    }
          
                    sb.AppendLine("Order By PO_DATE desc,PO_NO desc");
                    //JOB.Barcode   //XXX

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (PO.Customer > 0)
                    {
                    _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = PO.Customer;
                    }
                    _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = PO.DateFrom;
                    _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = PO.DateTo;
                    if (PO.POStatus > 1)
                    {
                    _dataAdapter.SelectCommand.Parameters.Add("@PO_STATUS", SqlDbType.TinyInt).Value = PO.POStatus - 1;
                    }

                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPO :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static bool DeletePO(int POid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update POHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where POH_ID = @POH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@POH_ID", SqlDbType.Int).Value = POid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update PODETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where POD_PID = @POD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@POD_PID", SqlDbType.Int).Value = POid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetPOById(int POID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select * From POHEADER Where POH_ID = @POH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@POH_ID", SqlDbType.Int).Value = POID;
                    _dataAdapter.Fill(dsResult, "POHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*,case A.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From PODETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");                
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where POD_PID = @POD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@POD_PID", SqlDbType.Int).Value = POID;
                    _dataAdapter.Fill(dsResult, "PODETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetPOById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool SavePJOBDetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
            cmd.CommandTimeout = 30;
            cmd.CommandType = CommandType.Text;
            cmd.Transaction = tran;

            foreach (DataRow dr in dt.Rows)
            {
                switch (cls_Library.DBInt(dr["mode"]))
                {
                case (int)cls_Struct.ActionMode.Add:
                case (int)cls_Struct.ActionMode.Copy:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO PJOBDETAIL WITH (UPDLOCK) (");
                    sb.AppendLine("JOBD_PID,");
                    sb.AppendLine("LIST_NO,");
                    sb.AppendLine("ITEM_ID,");
                    sb.AppendLine("STOCK,");
                    sb.AppendLine("FULL_NAME,");
                    sb.AppendLine("MODEL1,");
                    sb.AppendLine("BRAND_ID,");
                    sb.AppendLine("GENUIN_PART_ID,");
                    sb.AppendLine("BRAND_PART_ID,");
                    sb.AppendLine("UNIT_ID,");
                    sb.AppendLine("QTY,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("DELETED");
                    sb.AppendLine(") VALUES (");
                    sb.AppendLine("@JOBD_PID,");
                    sb.AppendLine("@LIST_NO,");
                    sb.AppendLine("@ITEM_ID,");
                    sb.AppendLine("@STOCK,");
                    sb.AppendLine("@FULL_NAME,");
                    sb.AppendLine("@MODEL1,");
                    sb.AppendLine("@BRAND_ID,");
                    sb.AppendLine("@GENUIN_PART_ID,");
                    sb.AppendLine("@BRAND_PART_ID,");
                    sb.AppendLine("@UNIT_ID,");
                    sb.AppendLine("@QTY,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@DELETED");
                    sb.AppendLine(")");
                    break;
                case (int)cls_Struct.ActionMode.Edit:
                    irow++;
                    sb.Clear();
                    sb.AppendLine("UPDATE PJOBDETAIL WITH (UPDLOCK) SET ");
                    sb.AppendLine("LIST_NO = @LIST_NO,");
                    sb.AppendLine("ITEM_ID = @ITEM_ID,");
                    sb.AppendLine("STOCK = @STOCK,");
                    sb.AppendLine("FULL_NAME = @FULL_NAME,");
                    sb.AppendLine("MODEL1 = @MODEL1,");
                    sb.AppendLine("BRAND_ID = @BRAND_ID,");
                    sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                    sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                    sb.AppendLine("UNIT_ID = @UNIT_ID,");
                    sb.AppendLine("QTY = @QTY,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE");
                    sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                    break;
                case (int)cls_Struct.ActionMode.Delete:
                    sb.Clear();
                    sb.AppendLine("UPDATE PJOBDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                    sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                    //sb.AppendLine("Delete From JOBDETAIL WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");
                    break;
                case (int)cls_Struct.ActionMode.Default:
                    irow++;
                    sb.Clear();
                    sb.AppendLine("UPDATE PJOBDETAIL WITH (UPDLOCK) SET ");
                    sb.AppendLine("LIST_NO =@LIST_NO");
                    sb.AppendLine("WHERE JOBD_ID = @JOBD_ID AND JOBD_PID = @JOBD_PID");

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                    cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                    cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                    cmd.ExecuteNonQuery();
                    continue;
                }

                cmd.CommandText = sb.ToString();
                cmd.Parameters.Clear();

                if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                {
                cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                }
                else
                {
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                }
                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                cmd.Parameters.Add("@STOCK", SqlDbType.VarChar, 20).Value = dr["STOCK"].ToString();
                cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);

                //cmd.Transaction = tran;

                switch (cls_Library.DBInt(dr["mode"]))
                {
                case (int)cls_Struct.ActionMode.Add:
                case (int)cls_Struct.ActionMode.Copy:
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                    break;
                case (int)cls_Struct.ActionMode.Edit:
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                    cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                    break;
                case (int)cls_Struct.ActionMode.Delete:
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString()); ;
                    cmd.Parameters.Add("@JOBD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["JOBD_ID"]);
                    cmd.Parameters.Add("@JOBD_PID", SqlDbType.Int).Value = id;
                    break;
                }

                cmd.ExecuteNonQuery();
            }

            result = true;
            }

            return result;
        }

        public static bool SavePO(cls_Struct.ActionMode mode, cls_Struct.StructPO PO, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            PO.PO_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.PO);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO POHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("PO_NO,");
                            sb.AppendLine("PO_DATE,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("BILLER,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("BARCODE,");
                            sb.AppendLine("PO_TYPE,");
                            sb.AppendLine("METHOD_ORDER,");
                            sb.AppendLine("METHOD_TRANS,");
                            sb.AppendLine("DUETYPE,");
                            sb.AppendLine("DUEDATE,");
                            sb.AppendLine("PO_STATUS,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("DISCLST,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@PO_NO,");
                            sb.AppendLine("@PO_DATE,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@BILLER,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@BARCODE,");
                            sb.AppendLine("@PO_TYPE,");
                            sb.AppendLine("@METHOD_ORDER,");
                            sb.AppendLine("@METHOD_TRANS,");
                            sb.AppendLine("@DUETYPE,");
                            sb.AppendLine("@DUEDATE,");
                            sb.AppendLine("@PO_STATUS,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@DISCLST,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("PO_NO = @PO_NO,");
                            sb.AppendLine("PO_DATE = @PO_DATE,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("BILLER = @BILLER,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("BARCODE = @BARCODE,");
                            sb.AppendLine("PO_TYPE = @PO_TYPE,");
                            sb.AppendLine("METHOD_ORDER = @METHOD_ORDER,");
                            sb.AppendLine("METHOD_TRANS = @METHOD_TRANS,");
                            sb.AppendLine("DUETYPE = @DUETYPE,");
                            sb.AppendLine("DUEDATE = @DUEDATE,");
                            sb.AppendLine("PO_STATUS = @PO_STATUS,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("DISCLST = @DISCLST,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE POH_ID = @POH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@PO_NO", SqlDbType.VarChar, 50).Value = PO.PO_NO;
                    if ((PO.PO_DATE == DateTime.MinValue) || (PO.PO_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@PO_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@PO_DATE", SqlDbType.DateTime).Value = PO.PO_DATE;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = PO.CUS_ID;
                    cmd.Parameters.Add("@BILLER", SqlDbType.Int).Value = PO.BILLER;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.TinyInt).Value = PO.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = PO.LIST_NO;
                    cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = PO.BARCODE;
                    cmd.Parameters.Add("@PO_TYPE", SqlDbType.TinyInt).Value = PO.PO_TYPE;
                    cmd.Parameters.Add("@METHOD_ORDER", SqlDbType.Int).Value = PO.METHOD_ORDER;
                    cmd.Parameters.Add("@METHOD_TRANS", SqlDbType.Int).Value = PO.METHOD_TRANS;
                    cmd.Parameters.Add("@DUETYPE", SqlDbType.TinyInt).Value = PO.DUETYPE;
                    if ((PO.DUEDATE == DateTime.MinValue) || (PO.DUEDATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@DUEDATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@DUEDATE", SqlDbType.DateTime).Value = PO.DUEDATE;
                    cmd.Parameters.Add("@PO_STATUS", SqlDbType.TinyInt).Value = PO.PO_STATUS;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = PO.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = PO.VATSUM;
                    cmd.Parameters.Add("@DISCLST", SqlDbType.Decimal).Value = PO.DISCLST;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = PO.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@POH_ID", SqlDbType.Int).Value = PO.POH_ID;
                        id = PO.POH_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        id = (int)shipperIdParam.Value;
                    }

                    #endregion

                    #region Detail
                    if (dsData.Tables.Contains("PODETAIL"))
                    {
                        SavePODetail(id, dsData.Tables["PODETAIL"], ref conn, ref tran);
                    }
                    #endregion

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SavePO :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SavePODetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Transaction = tran;

                foreach (DataRow dr in dt.Rows)
                {
                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO PODETAIL WITH (UPDLOCK) (");
                            sb.AppendLine("POD_PID,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("MODEL1,");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("LOCATION_QTY,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("CONV,");
                            sb.AppendLine("MINIMUM_QTY,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("BUY_PRICE,");
                            sb.AppendLine("COG,");
                            sb.AppendLine("PRICEVAT,");
                            sb.AppendLine("PRICESUM,");
                            sb.AppendLine("NOSUMVAT,");
                            sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("SPECIAL_ORDER,");
                            sb.AppendLine("NOTE,");
                            sb.AppendLine("BRAND_PRINT,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");                        
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@POD_PID,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@GENUIN_PART_ID,");
                            sb.AppendLine("@BRAND_PART_ID,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@MODEL1,");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@LOCATION_QTY,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@CONV,");
                            sb.AppendLine("@MINIMUM_QTY,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@BUY_PRICE,");
                            sb.AppendLine("@COG,");
                            sb.AppendLine("@PRICEVAT,");
                            sb.AppendLine("@PRICESUM,");
                            sb.AppendLine("@NOSUMVAT,");
                            sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@SPECIAL_ORDER,");
                            sb.AppendLine("@NOTE,");
                            sb.AppendLine("@BRAND_PRINT,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");                        
                            sb.AppendLine(")");
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE PODETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("ITEM_ID = @ITEM_ID,");
                            sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                            sb.AppendLine("FULL_NAME = @FULL_NAME,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                            sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("LOCATION_QTY = @LOCATION_QTY,");
                            sb.AppendLine("QTY = @QTY,");
                            sb.AppendLine("CONV = @CONV,");
                            sb.AppendLine("MINIMUM_QTY = @MINIMUM_QTY,");
                            sb.AppendLine("UNIT_ID = @UNIT_ID,");
                            sb.AppendLine("BUY_PRICE = @BUY_PRICE,");
                            sb.AppendLine("COG = @COG,");
                            sb.AppendLine("PRICEVAT = @PRICEVAT,");
                            sb.AppendLine("PRICESUM = @PRICESUM,");
                            sb.AppendLine("NOSUMVAT = @NOSUMVAT,");
                            sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                            sb.AppendLine("SPECIAL_ORDER = @SPECIAL_ORDER,");
                            sb.AppendLine("NOTE = @NOTE,");
                            sb.AppendLine("BRAND_PRINT = @BRAND_PRINT,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");                        
                            sb.AppendLine("WHERE POD_ID = @POD_ID AND POD_PID = @POD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            sb.Clear();
                            sb.AppendLine("UPDATE PODETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                            sb.AppendLine("WHERE POD_ID = @POD_ID AND POD_PID = @POD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Default:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE PODETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine("WHERE POD_ID = @POD_ID AND POD_PID = @POD_PID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            cmd.Parameters.Add("@POD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["POD_ID"]);
                            cmd.Parameters.Add("@POD_PID", SqlDbType.Int).Value = id;
                            cmd.ExecuteNonQuery();
                            continue;
                        }

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                        //cmd.Transaction = tran;

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@POD_PID", SqlDbType.Int).Value = id;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                        }
                        else
                        {
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        }
                        
                
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                    cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                    cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                    cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@LOCATION_QTY", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["LOCATION_QTY"]);
                    cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(dr["QTY"]);
                    cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                    cmd.Parameters.Add("@MINIMUM_QTY", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["MINIMUM_QTY"]);
                    cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                    cmd.Parameters.Add("@BUY_PRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["BUY_PRICE"]);
                    cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                    cmd.Parameters.Add("@PRICEVAT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICEVAT"]);
                    cmd.Parameters.Add("@PRICESUM", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["PRICESUM"]);
                    cmd.Parameters.Add("@NOSUMVAT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NOSUMVAT"]);
                    cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = cls_Library.DBByte(dr["VAT_STATUS"]);
                    cmd.Parameters.Add("@SPECIAL_ORDER", SqlDbType.Int).Value = cls_Library.DBInt(dr["SPECIAL_ORDER"]);
                    cmd.Parameters.Add("@NOTE", SqlDbType.VarChar, 500).Value = dr["NOTE"].ToString();
                    cmd.Parameters.Add("@BRAND_PRINT", SqlDbType.VarChar, 50).Value = dr["BRAND_PRINT"].ToString();

                    switch (cls_Library.DBInt(dr["mode"]))
                    {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@POD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["POD_ID"]);
                            cmd.Parameters.Add("@POD_PID", SqlDbType.Int).Value = id;
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString()); ;
                            cmd.Parameters.Add("@POD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["POD_ID"]);
                            cmd.Parameters.Add("@POD_PID", SqlDbType.Int).Value = id;
                            break;
                    }

                    cmd.ExecuteNonQuery();
                }

                result = true;
            }

            return result;
        }
    
        public static DataTable GetDetailItem(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref cn))
                {
                    sql = string.Format("Select * From M_ITEMS Where ITEM_ID = {0}", id);
                    da = new SqlDataAdapter(sql, cn);
                    da.SelectCommand.Parameters.Clear();
                    da.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetDetailItem :" + ex.Message);
            }
            finally { cls_Global_DB.CloseDB(ref cn); }
            return dt;
        }

        //ZOZO23-----1
        public static int CheckActiveVoucher(cls_Struct.VoucherType type)
        {
            int result = 0;
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter Adap = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    switch (type)
                    {
                        case cls_Struct.VoucherType.PO:
                            sb.AppendLine("Select POH_ID AS _id From POHEADER Where DELETED = 0 And ACTIVE = 1");   //And PO_DATE = @_DATE
                            break;
                        case cls_Struct.VoucherType.RC:
                            sb.AppendLine("Select RCH_ID AS _id From RCHEADER Where DELETED = 0 And ACTIVE = 1");
                            break;
                        case cls_Struct.VoucherType.JOB:
                            sb.AppendLine("Select JOB_ID AS _id From JOBHEAD Where DELETED = 0 And ACTIVE = 1");
                            break;
                        case cls_Struct.VoucherType.RO:
                            sb.AppendLine("Select ROH_ID AS _id From ROHEADER Where DELETED = 0 And ACTIVE = 1");
                            break;
                        case cls_Struct.VoucherType.SQ:
                            sb.AppendLine("Select SQH_ID AS _id From SQHEADER Where DELETED = 0 And Active = 1");
                            break;
                    }

                    Adap.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    Adap.SelectCommand.Parameters.Clear();
                    //Adap.SelectCommand.Parameters.Add("@_DATE", SqlDbType.DateTime).Value = DateTime.Today;

                    Adap.Fill(dt);
                    if (dt.Rows.Count > 0) result = cls_Library.DBInt(dt.Rows[0]["_id"]);
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("CheckActiveVoucher :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool UpdateActiveVoucher(cls_Struct.VoucherType type, int IdData)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            bool ret = false;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    switch (type)
                    {
                        case cls_Struct.VoucherType.PO:
                            sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET ACTIVE = 1 WHERE POH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RC:
                            sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET ACTIVE = 1 WHERE RCH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.JOB:
                            sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET ACTIVE = 1 WHERE JOB_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RO:
                            sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET ACTIVE = 1 WHERE ROH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.SQ:
                            sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET ACTIVE = 1 WHERE SQH_ID = @IdData");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@IdData", SqlDbType.Int).Value = IdData;
                    cmd.ExecuteNonQuery();
                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                ret = false;
                tran.Rollback();
                XtraMessageBox.Show("UpdateActiveVoucher :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static bool UpdateCloseVoucher(cls_Struct.VoucherType type, int IdData)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();
            int[] RCD_ID = new int[0];
            int i, rcdID;
            int iCount = 0;
            bool ret = false;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    switch (type)
                    {
                        case cls_Struct.VoucherType.PO:
                            sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET PO_STATUS = 3 WHERE POH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RC:
                            sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET RC_STATUS = 3 WHERE RCH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.JOB:
                            sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET JOB_STATUS = 3 WHERE JOB_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RO:
                            sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET RO_STATUS = 3 WHERE ROH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.SQ:
                            sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET SQ_STATUS = 3 WHERE SQH_ID = @IdData");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@IdData", SqlDbType.Int).Value = IdData;
                    cmd.ExecuteNonQuery();
                    tran.Commit();

                    iCount = 0;

                    sb.Clear();
                    switch (type)
                    {
                        case cls_Struct.VoucherType.PO:
                            //sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET PO_STATUS = 3 WHERE POH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RC:
                            //sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET RC_STATUS = 3 WHERE RCH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.JOB:
                            sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET JOB_STATUS = 3 WHERE JOB_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RO:
                            sb.Clear();
                            sb.AppendLine("Select RCD_ID From RODETAIL Where ROD_PID = @ROD_PID");

                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();

                            _dataAdapter.SelectCommand.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = IdData;
                            dt = new DataTable();
                            _dataAdapter.Fill(dt);
                            if (dt.Rows.Count > 0)
                            {
                                for (i = 0; i < dt.Rows.Count; i++)
                                {
                                    rcdID = cls_Library.DBInt(dt.Rows[i]["RCD_ID"]);
                                    if (iCount == 0)
                                    {
                                        iCount++;
                                        Array.Resize(ref RCD_ID, iCount);
                                        RCD_ID[iCount - 1] = rcdID;
                                    }
                                    else
                                    {
                                        bool a = Array.Exists(RCD_ID, element => element == rcdID);
                                        if (!a)
                                        {
                                            iCount++;
                                            Array.Resize(ref RCD_ID, iCount);
                                            RCD_ID[iCount - 1] = rcdID;
                                        }
                                    }
                                }
                            }
                            _dataAdapter.Dispose();

                            for (i = 0; i < iCount; i++)
                            {
                                sb.Clear();
                                sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET QTY_MARK = 0 WHERE RCD_ID = @RCD_ID");

                                cmd = new SqlCommand();
                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;

                                cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = RCD_ID[i];
                                cmd.ExecuteNonQuery();
                            }
                            break;
                        case cls_Struct.VoucherType.SQ:
                            //sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET SQ_STATUS = 3 WHERE SQH_ID = @IdData");
                            break;
                    }
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                ret = false;
                tran.Rollback();
                XtraMessageBox.Show("UpdateCloseVoucher :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static bool UpdatePrintVoucher(cls_Struct.VoucherType type, int IdData)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            bool ret = false;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    switch (type)
                    {
                        case cls_Struct.VoucherType.PO:
                            sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET PO_STATUS = 2 WHERE POH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RC:
                            sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET RC_STATUS = 2 WHERE RCH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.JOB:
                            sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET JOB_STATUS = 2 WHERE JOB_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.RO:
                            sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET RO_STATUS = 2 WHERE ROH_ID = @IdData");
                            break;
                        case cls_Struct.VoucherType.SQ:
                            sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET SQ_STATUS = 2 WHERE SQH_ID = @IdData");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@IdData", SqlDbType.Int).Value = IdData;
                    cmd.ExecuteNonQuery();
                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                ret = false;
                tran.Rollback();
                XtraMessageBox.Show("UpdatePrintVoucher :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static void UpdateUnActiveVoucher()
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                sb.Clear();
                sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();


                sb.Clear();
                sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                sb.Clear();
                sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                sb.Clear();
                sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            XtraMessageBox.Show("UpdateActiveVoucher :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
        }

        public static void UpdateUnActiveVoucherByType(int Type)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    switch (Type)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("UPDATE POHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE RCHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                        break;
                    case 3:
                        sb.Clear();
                        sb.AppendLine("UPDATE JOBHEAD WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                        break;
                    case 4:
                        sb.Clear();
                        sb.AppendLine("UPDATE ROHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                        break;
                    case 5:
                        sb.Clear();
                        sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET ACTIVE = 0 WHERE ACTIVE=1");
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                        break;
                    }
          
                    tran.Commit();
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                XtraMessageBox.Show("UpdateUnActiveVoucherByType :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
        }

        //ZOZO23-----2

        public static DataTable GetHistoryROData(cls_Struct.GetHistoryRO History, bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.*, B.CUS_ID, B.VAT_STATUS From RODETAIL A");
                sb.AppendLine("INNER JOIN ROHEADER B ON A.ROD_PID = B.ROH_ID");
                sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                if (History.Customer > 0) sb.AppendLine("And B.CUS_ID = @CUS_ID");
                if (!ShowAll)
                {
                sb.AppendLine("And B.RO_DATE BETWEEN @dateFrom AND @dateTo");
                }        
                sb.AppendLine("And B.RO_STATUS = @RO_STATUS");
                sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                sb.AppendLine("Order By B.UPDATE_DATE desc, B.RO_DATE desc, B.RO_NO desc,A.LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (History.Customer > 0) _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = History.Customer;
                if (!ShowAll)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                }
                _dataAdapter.SelectCommand.Parameters.Add("@RO_STATUS", SqlDbType.TinyInt).Value = History.HStatus;
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetHistoryROData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetHistoryRCData(cls_Struct.GetHistoryRC History, bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.*,C.unitfullname,CASE WHEN A.NET_DOC = 0 and A.DISCOUNT > 0 THEN (A.COG_DOC)/A.QTY ELSE A.NET_DOC END as NET_DOC_AC,B.RC_NO, B.RC_DATE,B.INV_NO,B.INV_DATE, B.CUS_ID, case B.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS From RCDETAIL A");
                sb.AppendLine("INNER JOIN RCHEADER B ON A.RCD_PID = B.RCH_ID");
                    sb.AppendLine("OUTER APPLY");
                    sb.AppendLine("(");
                    sb.AppendLine("select top 1 CONCAT(D.UNIT_NAME,'/',C.MULTIPLY_QTY) as unitfullname from D_ITEM_UNITS C  INNER JOIN  M_UNITS D on C.UNIT_ID = D.UNIT_ID where c.UNIT_ID = A.UNIT_ID and C.ITEM_ID = A.ITEM_ID");
                    sb.AppendLine(") C");
                    sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                if (History.Customer > 0) sb.AppendLine("And B.CUS_ID = @CUS_ID");
                if (!ShowAll)
                {
                sb.AppendLine("And B.RC_DATE BETWEEN @dateFrom AND @dateTo");
                }
                if (History.HStatus > 1) sb.AppendLine("And B.RC_STATUS = @RC_STATUS");
                if (History.Selltype > 1) sb.AppendLine("And SELL_TYPE = @SELL_TYPE");
                sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                sb.AppendLine("Order By B.UPDATE_DATE desc, B.RC_DATE desc, B.RC_NO desc, A.LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (History.Customer > 0) _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = History.Customer;
                if (!ShowAll)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                }
                if (History.HStatus > 1) _dataAdapter.SelectCommand.Parameters.Add("@RC_STATUS", SqlDbType.TinyInt).Value = History.HStatus - 1;
                if (History.Selltype > 1) _dataAdapter.SelectCommand.Parameters.Add("@SELL_TYPE", SqlDbType.TinyInt).Value = History.Selltype - 1;
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetHistoryRCData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dt;
        }

        public static DataTable GetHistoryPOData(cls_Struct.GetHistoryPO History,bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.*,case A.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS, B.CUS_ID,B.PO_NO,B.PO_DATE From PODETAIL A");
                sb.AppendLine("INNER JOIN POHEADER B ON A.POD_PID = B.POH_ID");
                sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                if (History.Customer > 0)
                {
                sb.AppendLine("And B.CUS_ID = @CUS_ID");
                }

                if (!ShowAll)
                {
                sb.AppendLine("And B.PO_DATE BETWEEN @dateFrom AND @dateTo");
                }
          
                sb.AppendLine("And B.PO_STATUS = @PO_STATUS");
                sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                sb.AppendLine("Order By B.UPDATE_DATE desc, B.PO_DATE Desc, B.PO_NO desc, A.LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (History.Customer > 0)
                _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = History.Customer;
                if (!ShowAll)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                }           
                _dataAdapter.SelectCommand.Parameters.Add("@PO_STATUS", SqlDbType.TinyInt).Value = History.HStatus;
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetHistoryPOData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetHistoryJOBData(cls_Struct.GetHistoryJOB History, bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.*, B.JOB_OPERATOR From JOBDETAIL A");
                sb.AppendLine("INNER JOIN JOBHEAD B ON A.JOBD_PID = B.JOB_ID");
                sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                if (History.Operator > 0) sb.AppendLine("And B.JOB_OPERATOR = @JOB_OPERATOR");
                if (!ShowAll)
                {
                sb.AppendLine("And B.JOB_DATE BETWEEN @dateFrom AND @dateTo");
                }          
                sb.AppendLine("And B.JOB_STATUS = @JOB_STATUS");
                sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                sb.AppendLine("Order By B.UPDATE_DATE desc,B.JOB_DATE desc, B.JOB_NO desc,A.LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (History.Operator > 0) _dataAdapter.SelectCommand.Parameters.Add("@JOB_OPERATOR", SqlDbType.Int).Value = History.Operator;
                if (!ShowAll)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                }
                _dataAdapter.SelectCommand.Parameters.Add("@JOB_STATUS", SqlDbType.TinyInt).Value = History.HStatus;
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetHistoryJOBData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetHistorySaleData(cls_Struct.GetHistoryRC History, bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select A.*,case A.VATtype when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,B.BSH_NO, B.BSH_DATE, B.CUS_ID From BSDETAIL A");
                    sb.AppendLine("INNER JOIN BSHEADER B ON A.BSD_PID = B.BSH_ID");
                    sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                    if (History.Customer > 0) sb.AppendLine("And B.CUS_ID = @CUS_ID");
                    if (!ShowAll)
                    {
                        sb.AppendLine("And B.BSH_DATE BETWEEN @dateFrom AND @dateTo");
                    }
                    if (History.HStatus > 1) sb.AppendLine("And B.BSH_STATUS = @BSH_STATUS");
                    if (History.Selltype > 1) sb.AppendLine("And IS_CASH = @IS_CASH");
                    sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                    sb.AppendLine("Order By B.UPDATE_DATE desc, B.BSH_DATE desc, B.BSH_NO desc, A.LIST_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (History.Customer > 0) _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = History.Customer;
                    if (!ShowAll)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                    }
                    switch (History.HStatus)
                    {
                        case 2:
                            _dataAdapter.SelectCommand.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = 1;
                            break;
                        case 3:
                            _dataAdapter.SelectCommand.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = 2;
                            break;
                        case 4:
                            _dataAdapter.SelectCommand.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = 5;
                            break;
                        case 5:
                            _dataAdapter.SelectCommand.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = 99;
                            break;
                    }
                        
                    switch (History.Selltype)
                    {
                        case 2:
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.TinyInt).Value = true; 
                            break;
                        case 3:
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.TinyInt).Value = false;
                            break;
                    }
                        
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetHistorySaleData :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        public static DataTable GetDataItemByType(cls_Struct.TypeEditItem type, int ID)
        {
            DataTable dt = new DataTable();
            StringBuilder sb = new StringBuilder();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            try
            {
            if (!cls_Global_DB.ConnectDatabase(ref conn)) return dt;
            sb.Clear();
            switch (type)
            {
                case cls_Struct.TypeEditItem.T1:
                break;
                case cls_Struct.TypeEditItem.T2:
                break;
                case cls_Struct.TypeEditItem.T3:
                sb.AppendLine("Select MINIMUM_QTY, MAXIMUM_QTY, MINIMUM_ORDER_QTY, MINIMUM_SALE_QTY, QTY From M_ITEMS Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T4:
                sb.AppendLine("Select CATEGORY_ID, TYPE_ID From M_ITEMS Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T5:
                sb.AppendLine("Select 2 as [mode], A.* From D_ITEM_LOCATIONS A Where A.ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T6:
                sb.AppendLine("Select MAKER_BARCODE_NO From M_ITEMS Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T7:
                sb.AppendLine("Select 2 as [mode],A.* From D_ITEM_ALTERNATE_PARTS A Where A.ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T8:
                sb.AppendLine("Select * From STOCKBALANCE Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T9:
                sb.AppendLine("Select SIZE_ID, SIZE_INNER, SIZE_OUTSIDE, SIZE_THICK From M_ITEMS Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T10:
                sb.AppendLine("Select ABBREVIATE_NAME, FULL_NAME, MODEL1, MODEL2, MODEL3, GENUIN_PART_ID, BRAND_PART_ID,FULL_NAME_PRINT,MODEL_PRINT,BRAND_PRINT From M_ITEMS Where ITEM_ID = @ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.T11:
                sb.AppendLine("Select 2 as [mode],A.*,B.PO_GROUP_CODE,B.PO_GROUP_NAME From D_ITEM_PO_GROUPS A LEFT JOIN M_PO_GROUPS B ON A.PO_GROUP_ID = B.PO_GROUP_ID Where A.ITEM_ID =@ITEM_ID");
                break;
                case cls_Struct.TypeEditItem.SetPrice:
                    sb.AppendLine("Select 2 as [mode],A.* from M_SETPRICE A Where A.ITEM_ID =@ITEM_ID");
                    break;
                }
            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
            _dataAdapter.SelectCommand.Parameters.Clear();
            _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ID;

            _dataAdapter.Fill(dt);
            }
            catch (Exception)
            {
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dt;
        }

        public static bool SaveProductEdit(cls_Struct.TypeEditItem type, int ItemId, DataTable dtData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            DataRow row;
            string sql = "";
            int irow = 0;
            int Savemode = 0;
            int k = 0;
            int id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    sb.Clear();
                    switch (type)
                    {
                        case cls_Struct.TypeEditItem.T1:
                            break;
                        case cls_Struct.TypeEditItem.T2:
                            break;
                        case cls_Struct.TypeEditItem.T3:
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("MINIMUM_QTY = @MINIMUM_QTY,");
                            sb.AppendLine("MAXIMUM_QTY = @MAXIMUM_QTY,");
                            sb.AppendLine("MINIMUM_ORDER_QTY = @MINIMUM_ORDER_QTY,");
                            sb.AppendLine("MINIMUM_SALE_QTY = @MINIMUM_SALE_QTY,");
                            sb.AppendLine("QTY = @QTY,");
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@MINIMUM_QTY", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["MINIMUM_QTY"]);
                            cmd.Parameters.Add("@MAXIMUM_QTY", SqlDbType.Decimal).Value = cls_Library.DBDouble(row["MAXIMUM_QTY"]);
                            cmd.Parameters.Add("@MINIMUM_ORDER_QTY", SqlDbType.Decimal).Value = cls_Library.DBDouble(row["MINIMUM_ORDER_QTY"]);
                            cmd.Parameters.Add("@MINIMUM_SALE_QTY", SqlDbType.Decimal).Value = cls_Library.DBDouble(row["MINIMUM_SALE_QTY"]);
                            cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(row["QTY"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T4:
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("CATEGORY_ID =@CATEGORY_ID,");
                            sb.AppendLine("TYPE_ID =@TYPE_ID,");
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@CATEGORY_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["CATEGORY_ID"]);
                            cmd.Parameters.Add("@TYPE_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["TYPE_ID"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T5:
                            #region คลังสินค้า   1
                            sql = "";
                            irow = 0;
                            Savemode = 0;
                            k = 0;
                            #region section 1

                            foreach (DataRow dr in dtData.Rows)
                            {
                            irow++;
                            Savemode = irow > cls_Global_DB.GB_DitemLocation_count ? 1 : 2;
                            switch (Savemode)
                            {
                                case 1:
                                sb.Clear();
                                sb.AppendLine("INSERT INTO D_ITEM_LOCATIONS WITH (UPDLOCK) (");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("LOCATION_NAME,");
                                sb.AppendLine("SERIAL_NO,");
                                sb.AppendLine("QTY,");
                                sb.AppendLine("DEFAULT_LOCATION,");
                                sb.AppendLine("LIST_NO)");
                                sb.AppendLine("VALUES (");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@LOCATION_NAME,");
                                sb.AppendLine("@SERIAL_NO,");
                                sb.AppendLine("@QTY,");
                                sb.AppendLine("@DEFAULT_LOCATION,");
                                sb.AppendLine("@LIST_NO)");
                                break;
                                case 2:
                                sb.Clear();
                                sb.AppendLine("UPDATE D_ITEM_LOCATIONS WITH (UPDLOCK) SET ");
                                sb.AppendLine("ITEM_ID =@ITEM_ID,");
                                sb.AppendLine("LOCATION_NAME =@LOCATION_NAME,");
                                sb.AppendLine("SERIAL_NO =@SERIAL_NO,");
                                sb.AppendLine("QTY =@QTY,");
                                sb.AppendLine("DEFAULT_LOCATION =@DEFAULT_LOCATION,");
                                sb.AppendLine("LIST_NO =@LIST_NO");
                                sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                break;
                            }
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.Parameters.Add("@LOCATION_NAME", SqlDbType.VarChar, 20).Value = cls_Library.DBString(dr["LOCATION_NAME"]);
                            cmd.Parameters.Add("@SERIAL_NO", SqlDbType.Char, 20).Value = cls_Library.DBString(dr["SERIAL_NO"]);
                            cmd.Parameters.Add("@QTY", SqlDbType.Int).Value = cls_Library.DBInt(dr["QTY"]);
                            cmd.Parameters.Add("@DEFAULT_LOCATION", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DEFAULT_LOCATION"]);
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Transaction = tran;
                            if (Savemode == 2)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                //idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }
                            cmd.ExecuteNonQuery();
                            }

                            #endregion

                            #region Section 2
                            if (dtData.Rows.Count < cls_Global_DB.GB_DitemLocation_count)
                            {
                            k = dtData.Rows.Count;
                            for (int j = k + 1; j <= cls_Global_DB.GB_DitemLocation_count; j++)
                            {
                                //Mark Details ไว้ก่อนลบจริง
                                sql = "Delete from D_ITEM_LOCATIONS WITH (UPDLOCK) Where ITEM_ID=@@ITEM_ID and LIST_NO=@LIST_NO";
                                cmd = new SqlCommand();
                                cmd.Connection = conn;
                                cmd.CommandText = sql;
                                cmd.CommandTimeout = 60;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                                cmd.Transaction = tran;
                                cmd.ExecuteNonQuery();
                            }
                            }
                            #endregion
                            tran.Commit();
                            ret = true;
                            #endregion
                            break;
                        case cls_Struct.TypeEditItem.T6:
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("MAKER_BARCODE_NO = @MAKER_BARCODE_NO,");
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@MAKER_BARCODE_NO", SqlDbType.Char, 13).Value = cls_Library.DBString(row["MAKER_BARCODE_NO"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T7:
                            #region หมายเลขอะไหล่  3
                            #region Section 1
                            sql = "";
                            irow = 0;
                            Savemode = 0;
                            k = 0;
                            if (dtData.Rows.Count < cls_Global_DB.GB_DitemPart_count)
                            {
                                k = dtData.Rows.Count;
                                for (int j = k + 1; j <= cls_Global_DB.GB_DitemPart_count; j++)
                                {
                                    sql = "Delete from D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sql;
                                    cmd.CommandTimeout = 60;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();
                                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                                    cmd.Transaction = tran;
                                    cmd.ExecuteNonQuery();
                                }
                            }

                            foreach (DataRow dr in dtData.Rows)
                            {
                                irow++;
                                Savemode = irow > cls_Global_DB.GB_DitemPart_count ? 1 : 2;

                                switch (Savemode)
                                {
                                    case 1:
                                    sb.Clear();
                                    sb.AppendLine("INSERT INTO D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) (");
                                    sb.AppendLine("ITEM_ID,");
                                    sb.AppendLine("PART_ID,");
                                    sb.AppendLine("BRAND_DESCRIPTION,");
                                    sb.AppendLine("STATUS,");
                                    sb.AppendLine("LIST_NO)");
                                    sb.AppendLine("VALUES (");
                                    sb.AppendLine("@ITEM_ID,");
                                    sb.AppendLine("@PART_ID,");
                                    sb.AppendLine("@BRAND_DESCRIPTION,");
                                    sb.AppendLine("@STATUS,");
                                    sb.AppendLine("@LIST_NO)");
                                    break;
                                    case 2:
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) SET ");
                                    //sb.AppendLine("ITEM_ID =@ITEM_ID,");
                                    sb.AppendLine("PART_ID =@PART_ID,");
                                    sb.AppendLine("BRAND_DESCRIPTION =@BRAND_DESCRIPTION,");
                                    sb.AppendLine("STATUS =@STATUS");
                                    //sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine(" WHERE ITEM_ID =@ITEM_ID and LIST_NO =@LIST_NO");
                                    break;
                                }
                                cmd = new SqlCommand();
                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                                cmd.Parameters.Add("@PART_ID", SqlDbType.Char, 20).Value = cls_Library.DBString(dr["PART_ID"]);
                                cmd.Parameters.Add("@BRAND_DESCRIPTION", SqlDbType.VarChar, 15).Value = cls_Library.DBString(dr["BRAND_DESCRIPTION"]);
                                cmd.Parameters.Add("@STATUS", SqlDbType.TinyInt).Value = cls_Library.DBInt(dr["STATUS"]);
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                                cmd.Transaction = tran;
                                if (Savemode == 2)
                                {
                                    //cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    //idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                }
                                cmd.ExecuteNonQuery();
                            }

                            #endregion

                            #region Section 2
                            if (dtData.Rows.Count < cls_Global_DB.GB_DitemPart_count)
                            {
                            k = dtData.Rows.Count;
                            for (int j = k + 1; j <= cls_Global_DB.GB_DitemPart_count; j++)
                            {
                                sql = "Delete from D_ITEM_ALTERNATE_PARTS WITH (UPDLOCK) Where ITEM_ID=@ITEM_ID and LIST_NO=@LIST_NO";
                                cmd = new SqlCommand();
                                cmd.Connection = conn;
                                cmd.CommandText = sql;
                                cmd.CommandTimeout = 60;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                                cmd.Transaction = tran;
                                cmd.ExecuteNonQuery();
                            }
                            }
                            #endregion
                            tran.Commit();
                            ret = true;
                            #endregion
                            break;
                        case cls_Struct.TypeEditItem.T8:        //ปรับปรุง Stock on hand

                            row = dtData.Rows[0];
                            cmd = new SqlCommand();
                            cmd.Connection = conn;              
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
              
                            cmd.Transaction = tran;


                            sb.AppendLine("Select * From STOCKBALANCE Where ITEM_ID=@ITEM_ID");
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            SqlDataReader reader = cmd.ExecuteReader();
                            bool hasRow = reader.HasRows;
                            reader.Close(); reader.Dispose();
                            if (hasRow)
                            {
                            sb.Clear();
                            sb.AppendLine("UPDATE STOCKBALANCE WITH (UPDLOCK) SET ");
                            sb.AppendLine("CURRENT_QTY = @CURRENT_QTY,");
                            sb.AppendLine("UPDATED_DATE = @UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY = @UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");
                            }
                            else
                            {
                                sb.AppendLine("INSERT INTO STOCKBALANCE WITH (UPDLOCK) (");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("CURRENT_QTY,");
                                sb.AppendLine("UPDATED_DATE,");
                                sb.AppendLine("UPDATED_BY)");
                                sb.AppendLine("VALUES (");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@CURRENT_QTY,");
                                sb.AppendLine("@UPDATED_DATE,");
                                sb.AppendLine("@UPDATED_BY)");
                            }
              


                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            if (!hasRow) cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.Parameters.Add("@CURRENT_QTY", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["QTY"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            if (hasRow) cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.ExecuteNonQuery();


                            //Add History Stock Onhand
                            sb.Clear();
                            sb.AppendLine("INSERT INTO STOCKONHAND WITH (UPDLOCK) (");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("DOCNO,");
                            sb.AppendLine("INOUT,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("QTY_ORIGINAL,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@DOCNO,");
                            sb.AppendLine("@INOUT,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@QTY_ORIGINAL,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE)");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
              
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["ITEM_ID"]);
                            cmd.Parameters.Add("@DOCNO", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["DOCNO"]);
                            cmd.Parameters.Add("@INOUT", SqlDbType.TinyInt).Value = cls_Library.DBByte(row["INOUT"]);
                            cmd.Parameters.Add("@QTY", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["QTY"]);
                            cmd.Parameters.Add("@QTY_ORIGINAL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["QTY_ORIGINAL"]);
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
              
                            cmd.ExecuteNonQuery();
                            tran.Commit();

                            double GetOnh = cls_Data.GetBalanceStockOnhand(cls_Library.DBInt(row["ITEM_ID"]));
                            sb.Clear();
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("CURRENT_QTY =@CURRENT_QTY,");
                            sb.AppendLine("UNDER_STOCK =@UNDER_STOCK,");
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["ITEM_ID"]);
                            cmd.Parameters.Add("@CURRENT_QTY", SqlDbType.Decimal).Value = GetOnh;
                            cmd.Parameters.Add("@UNDER_STOCK", SqlDbType.Bit).Value = false;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;

                            cmd.ExecuteNonQuery();

                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T9:
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("SIZE_ID =@SIZE_ID,");
                            sb.AppendLine("SIZE_INNER =@SIZE_INNER,");
                            sb.AppendLine("SIZE_OUTSIDE =@SIZE_OUTSIDE,");
                            sb.AppendLine("SIZE_THICK =@SIZE_THICK,"); ;
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@SIZE_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["SIZE_ID"]);
                            cmd.Parameters.Add("@SIZE_INNER", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["SIZE_INNER"]);
                            cmd.Parameters.Add("@SIZE_OUTSIDE", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["SIZE_OUTSIDE"]);
                            cmd.Parameters.Add("@SIZE_THICK", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["SIZE_THICK"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T10:
                            sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("ABBREVIATE_NAME =@ABBREVIATE_NAME,");
                            sb.AppendLine("FULL_NAME =@FULL_NAME,");
                            sb.AppendLine("MODEL1 =@MODEL1,");
                            sb.AppendLine("MODEL2 =@MODEL2,");
                            sb.AppendLine("MODEL3 =@MODEL3,");
                            sb.AppendLine("GENUIN_PART_ID =@GENUIN_PART_ID,");
                            sb.AppendLine("BRAND_PART_ID =@BRAND_PART_ID,");
                            sb.AppendLine("FULL_NAME_PRINT =@FULL_NAME_PRINT,");
                            sb.AppendLine("MODEL_PRINT =@MODEL_PRINT,");
                            sb.AppendLine("BRAND_PRINT =@BRAND_PRINT,");
                            sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                            sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                            sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@ABBREVIATE_NAME", SqlDbType.Char, 5).Value = cls_Library.DBString(row["ABBREVIATE_NAME"]);
                            cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["FULL_NAME"]);
                            cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["MODEL1"]);
                            cmd.Parameters.Add("@MODEL2", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["MODEL2"]);
                            cmd.Parameters.Add("@MODEL3", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["MODEL3"]);
                            cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = cls_Library.DBString(row["GENUIN_PART_ID"]);
                            cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = cls_Library.DBString(row["BRAND_PART_ID"]);
                            cmd.Parameters.Add("@FULL_NAME_PRINT", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["FULL_NAME_PRINT"]);
                            cmd.Parameters.Add("@MODEL_PRINT", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["MODEL_PRINT"]);
                            cmd.Parameters.Add("@BRAND_PRINT", SqlDbType.VarChar, 50).Value = cls_Library.DBString(row["BRAND_PRINT"]);
                            cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();

                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.T11:
                            #region กลุ่มสั่งซื้อสินค้า  
                            #region Section 1
                            sql = "";
                            irow = 0;
                            Savemode = 0;
                            k = 0;

                            foreach (DataRow dr in dtData.Rows)
                            {
                            irow++;
                            Savemode = irow > cls_Global_DB.GB_DitemPOgroup_count ? 1 : 2;

                            switch (Savemode)
                            {
                                case 1:
                                sb.Clear();
                                sb.AppendLine("INSERT INTO D_ITEM_PO_GROUPS WITH (UPDLOCK) (");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("PO_GROUP_ID,");
                                sb.AppendLine("LIST_NO)");
                                sb.AppendLine("VALUES (");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@PO_GROUP_ID,");
                                sb.AppendLine("@LIST_NO)");
                                break;
                                case 2:
                                sb.Clear();
                                sb.AppendLine("UPDATE D_ITEM_PO_GROUPS WITH (UPDLOCK) SET ");
                                sb.AppendLine("ITEM_ID =@ITEM_ID,");
                                sb.AppendLine("PO_GROUP_ID =@PO_GROUP_ID,");
                                sb.AppendLine("LIST_NO =@LIST_NO");
                                sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                break;
                                case 4:
                                break;
                            }
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.Parameters.Add("@PO_GROUP_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PO_GROUP_ID"]);
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                            cmd.Transaction = tran;
                            if (Savemode == 2)
                            {
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            }
                            cmd.ExecuteNonQuery();
                            }
              
                            #endregion

                            #region Section 2
                            if (dtData.Rows.Count < cls_Global_DB.GB_DitemPOgroup_count)
                            {
                            k = dtData.Rows.Count;
                            for (int j = k + 1; j <= cls_Global_DB.GB_DitemPOgroup_count; j++)
                            {
                                sql = "Delete from D_ITEM_PO_GROUPS WITH (UPDLOCK) Where ITEM_ID=@@ITEM_ID and LIST_NO=@LIST_NO";
                                cmd = new SqlCommand();
                                cmd.Connection = conn;
                                cmd.CommandText = sql;
                                cmd.CommandTimeout = 60;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                                cmd.Transaction = tran;
                                cmd.ExecuteNonQuery();
                            }
                            }
                            #endregion
                            tran.Commit();
                            ret = true;
                            #endregion
                            break;
                        case cls_Struct.TypeEditItem.SetPrice:
                            id = cls_Library.DBInt(cls_Data.GetNameFromTBname(ItemId, "M_SETPRICE", "ITEM_ID"));

                            if (id == 0)
                            {
                                sb.AppendLine("INSERT INTO M_SETPRICE WITH (UPDLOCK)  (ITEM_ID,PRICETYPE,UNIT_ID,PRICE1,PRICE2,DATENET) VALUES(@ITEM_ID,@PRICETYPE,@UNIT_ID,@PRICE1,@PRICE2,@DATENET)");
                            }
                            else
                            {
                                sb.AppendLine("UPDATE M_SETPRICE WITH (UPDLOCK) SET ");
                                
                                sb.AppendLine("UNIT_ID =@UNIT_ID,");
                                sb.AppendLine("PRICE1 =@PRICE1,");
                                sb.AppendLine("PRICE2 =@PRICE2,");
                                sb.AppendLine("DATENET =@DATENET");
                                sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");
                            }
                            
                            
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.Parameters.Add("@PRICETYPE", SqlDbType.TinyInt).Value = 1;
                            cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["UNIT_ID"]);
                            cmd.Parameters.Add("@PRICE1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["PRICE1"]);
                            cmd.Parameters.Add("@PRICE2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["PRICE2"]);
                            cmd.Parameters.Add("@DATENET", SqlDbType.DateTime).Value = DateTime.Now;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();

                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.SetPriceDisCount:
                            id = cls_Library.DBInt(cls_Data.GetNameFromTBname(ItemId, "M_SETPRICE", "ITEM_ID"));

                            if (id == 0)
                            {
                                sb.AppendLine("INSERT INTO M_SETPRICE WITH (UPDLOCK)  (ITEM_ID,UNIT_ID,PRICEDISC,DATEDISC) VALUES(@ITEM_ID,@UNIT_ID,@PRICEDISC,@DATEDISC)");
                            }
                            else
                            {
                                sb.AppendLine("UPDATE M_SETPRICE WITH (UPDLOCK) SET ");
                                sb.AppendLine("UNIT_ID =@UNIT_ID,");
                                sb.AppendLine("PRICEDISC =@PRICEDISC,");
                                sb.AppendLine("DATEDISC =@DATEDISC");
                                sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");
                            }


                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();

                            row = dtData.Rows[0];
                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                            cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(row["UNIT_ID"]);
                            cmd.Parameters.Add("@PRICEDISC", SqlDbType.Decimal).Value = cls_Library.DBDecimal(row["PRICE2"]);
                            cmd.Parameters.Add("@DATEDISC", SqlDbType.DateTime).Value = DateTime.Now;

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();

                            tran.Commit();
                            ret = true;
                            break;
                        case cls_Struct.TypeEditItem.SaleDisCount:
                            #region section 1
                            irow = 0;
                            if (dtData.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dtData.Rows)
                                {
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) SET ");
                                    sb.AppendLine("BRAND_ID =@BRAND_ID,");
                                    sb.AppendLine("DISCOUNT_CODE =@DISCOUNT_CODE,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP1 =@DISCOUNT_RATE_STEP1,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP2 =@DISCOUNT_RATE_STEP2,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP3 =@DISCOUNT_RATE_STEP3,");
                                    sb.AppendLine("DISCOUNT_RATE_STEP4 =@DISCOUNT_RATE_STEP4,");
                                    sb.AppendLine("ENABLED_STATUS =@ENABLED_STATUS,");
                                    sb.AppendLine("LIST_NO =@LIST_NO");
                                    sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                    cmd = new SqlCommand();
                                    cmd.Connection = conn;
                                    cmd.CommandText = sb.ToString();
                                    cmd.CommandTimeout = 30;
                                    cmd.CommandType = CommandType.Text;
                                    cmd.Parameters.Clear();
                                    int BrandID = cls_Library.DBInt(cls_Data.GetNameFromTBname(ItemId, "ITEMS", "BRAND_ID"));
                                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BrandID;
                                    cmd.Parameters.Add("@DISCOUNT_CODE", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["DISCOUNT_CODE"]);
                                    cmd.Parameters.Add("@DISCOUNT_RATE_STEP1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP1"]);
                                    cmd.Parameters.Add("@DISCOUNT_RATE_STEP2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP2"]);
                                    cmd.Parameters.Add("@DISCOUNT_RATE_STEP3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP3"]);
                                    cmd.Parameters.Add("@DISCOUNT_RATE_STEP4", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP4"]);
                                    cmd.Parameters.Add("@ENABLED_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["ENABLED_STATUS"]);
                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = cls_Library.DBInt(dr["LIST_NO"]);
                                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                    cmd.Transaction = tran;
                                    if (Savemode == 2)
                                    {
                                        
                                    }
                                    cmd.ExecuteNonQuery();
                                    //tran.Commit();
                                    ret = true;
                                }
                                tran.Commit();
                            }
                            #endregion
                            break;
                        default:
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static DataSet GetDataItemEdit2(int ID)
        {
            DataSet ds = new DataSet();
            StringBuilder sb = new StringBuilder();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            int BrandId = 0;
            try
            {
                if (!cls_Global_DB.ConnectDatabase(ref conn)) return ds;
                sb.Clear();
                sb.AppendLine("Select A.BRAND_ID, B.BRAND_NAME From M_ITEMS A ");
                sb.AppendLine("INNER JOIN M_BRANDS B ON A.BRAND_ID = B.BRAND_ID");
                sb.AppendLine("Where A.ITEM_ID = @ITEM_ID");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ID;
                _dataAdapter.Fill(ds, "M_ITEMS");

                sb.Clear();
                sb.AppendLine("select BRAND_ID AS _id, BRAND_CODE AS code, BRAND_NAME AS name ,DESCRIPTION AS description from M_BRANDS order by BRAND_CODE");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(ds, "M_BRANDS");

                if (ds.Tables["M_ITEMS"].Rows.Count > 0)
                {
                    BrandId = cls_Library.DBInt(ds.Tables["M_ITEMS"].Rows[0]["BRAND_ID"]);
                }

                sb.Clear();
                sb.AppendLine("Select * From D_BRAND_SALE_DISCOUNT_STEPS Where BRAND_ID = @BRAND_ID Order by SEQUENSE_NO");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BrandId;
                _dataAdapter.Fill(ds, "D_BRAND_SALE_DISCOUNT_STEPS");

            }
            catch (Exception ex)
            {
            MessageBox.Show("GetDataItemEdit2: " + ex.Message);
            }
            return ds;
        }

        public static bool SaveDataItemEdit2(int ItemId, int BrandId, DataTable dtData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            DataRow row;
            int irow = 0, k = 0;
            int Savemode = 0;
            string sql;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET ");
                sb.AppendLine("BRAND_ID = @BRAND_ID,");
                sb.AppendLine("UPDATED_DATE =@UPDATED_DATE,");
                sb.AppendLine("UPDATED_BY =@UPDATED_BY");
                sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                //row = dtData.Rows[0];
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BrandId;
                cmd.Parameters.Add("@UPDATED_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@UPDATED_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();


                #region ส่วนลดขาย

                #region section 1
                //irow = 0;
                //if (dtData.Rows.Count > 0)
                //{
                //    foreach (DataRow dr in dtData.Rows)
                //    {
                //        irow++;
                //        Savemode = irow > cls_Global_DB.GB_Dbrand_Salediscount ? 1 : 2;
                //        switch (Savemode)
                //        {
                //        case 1:
                //            sb.Clear();
                //            sb.AppendLine("INSERT INTO D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) (");
                //            sb.AppendLine("BRAND_ID,");
                //            sb.AppendLine("DISCOUNT_CODE,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP1,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP2,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP3,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP4,");
                //            sb.AppendLine("ENABLED_STATUS,");
                //            sb.AppendLine("LIST_NO)");
                //            sb.AppendLine("VALUES (");
                //            sb.AppendLine("@BRAND_ID,");
                //            sb.AppendLine("@DISCOUNT_CODE,");
                //            sb.AppendLine("@DISCOUNT_RATE_STEP1,");
                //            sb.AppendLine("@DISCOUNT_RATE_STEP2,");
                //            sb.AppendLine("@DISCOUNT_RATE_STEP3,");
                //            sb.AppendLine("@DISCOUNT_RATE_STEP4,");
                //            sb.AppendLine("@ENABLED_STATUS,");
                //            sb.AppendLine("@LIST_NO)");
                //            break;
                //        case 2:
                //            sb.Clear();
                //            sb.AppendLine("UPDATE D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) SET ");
                //            sb.AppendLine("BRAND_ID =@BRAND_ID,");
                //            sb.AppendLine("DISCOUNT_CODE =@DISCOUNT_CODE,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP1 =@DISCOUNT_RATE_STEP1,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP2 =@DISCOUNT_RATE_STEP2,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP3 =@DISCOUNT_RATE_STEP3,");
                //            sb.AppendLine("DISCOUNT_RATE_STEP4 =@DISCOUNT_RATE_STEP4,");
                //            sb.AppendLine("ENABLED_STATUS =@ENABLED_STATUS,");
                //            sb.AppendLine("LIST_NO =@LIST_NO");
                //            sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                //            break;
                //        }
                //        cmd = new SqlCommand();
                //        cmd.Connection = conn;
                //        cmd.CommandText = sb.ToString();
                //        cmd.CommandTimeout = 30;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.Clear();
                //        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BrandId;
                //        cmd.Parameters.Add("@DISCOUNT_CODE", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["DISCOUNT_CODE"]);
                //        cmd.Parameters.Add("@DISCOUNT_RATE_STEP1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP1"]);
                //        cmd.Parameters.Add("@DISCOUNT_RATE_STEP2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP2"]);
                //        cmd.Parameters.Add("@DISCOUNT_RATE_STEP3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP3"]);
                //        cmd.Parameters.Add("@DISCOUNT_RATE_STEP4", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP4"]);
                //        cmd.Parameters.Add("@ENABLED_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["ENABLED_STATUS"]);
                //        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                //        cmd.Transaction = tran;
                //        if (Savemode == 2)
                //        {
                //        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                //        }
                //        cmd.ExecuteNonQuery();
                //    }
                //}
                #endregion

                #region Section 2
                //if ((Savemode == 2) && (dtData.Rows.Count < cls_Global_DB.GB_Dbrand_Salediscount))
                //{
                //    k = dtData.Rows.Count;
                //    for (int j = k + 1; j <= cls_Global_DB.GB_Dbrand_Salediscount; j++)
                //    {
                //        //Mark Details ไว้ก่อนลบจริง
                //        sql = "Delete from D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) Where BRAND_ID=@BRAND_ID and LIST_NO=@LIST_NO";
                //        cmd = new SqlCommand();
                //        cmd.Connection = conn;
                //        cmd.CommandText = sql;
                //        cmd.CommandTimeout = 60;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.Clear();
                //        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = BrandId;
                //        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                //        cmd.Transaction = tran;
                //        cmd.ExecuteNonQuery();
                //    }
                //}
                #endregion

                #endregion

                tran.Commit();
                ret = true;
            }
            }
            catch (Exception)
            {
            tran.Rollback();
            ret = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static DataSet GetGroupData(byte type, byte mode, out int GroupId)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            GroupId = 0;
            try
            {
                
                dsResult = new DataSet();
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    
                    switch (type)
                    {
                        case 1://ใช้แทนกัน
                            sb.Clear();
                            switch (mode)
                            {
                                case 1:
                                    sb.AppendLine("Select * From GROUPREPLACE");
                                    break;
                                case 2:
                                    //sb.AppendFormat("Select Top 1 * From GROUPREPLACE Order by GROUP_ID desc");
                                    sb.AppendFormat("Select Top 1 * From GROUPREPLACE Where GROUP_ACTIVE=1");
                                    break;
                                case 3:
                                    sb.AppendFormat("Select * From GROUPREPLACE Where GROUP_ID = {0}", GroupId);
                                    break;
                            }
                                               
                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.Fill(dsResult, "GROUPREPLACE");

                            if (dsResult.Tables["GROUPREPLACE"].Rows.Count == 0)
                            {
                                sb.Clear();
                                switch (mode)
                                {
                                    case 1:
                                        sb.AppendLine("Select * From GROUPREPLACE");
                                        break;
                                    case 2:
                                        sb.AppendFormat("Select Top 1 * From GROUPREPLACE Order by GROUP_ID desc");
                                        break;
                                    case 3:
                                        sb.AppendFormat("Select * From GROUPREPLACE Where GROUP_ID = {0}", GroupId);
                                        break;
                                }

                                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                                _dataAdapter.SelectCommand.Parameters.Clear();
                                _dataAdapter.Fill(dsResult, "GROUPREPLACE");
                            }

                            //Sub
                            sb.Clear();
                            switch (mode)
                            {
                                case 1:
                                    if (dsResult.Tables["GROUPREPLACE"].Rows.Count > 0)
                                    {
                                        GroupId = cls_Library.DBInt(dsResult.Tables["GROUPREPLACE"].Rows[dsResult.Tables["GROUPREPLACE"].Rows.Count - 1]["GROUP_ID"]);
                                    }
                                    sb.AppendLine("Select * From GROUPSUBREPLACE Order by GROUP_ID, LIST_NO");
                                    break;
                                case 2:
                                    if (dsResult.Tables["GROUPREPLACE"].Rows.Count > 0)
                                    {
                                        GroupId = cls_Library.DBInt(dsResult.Tables["GROUPREPLACE"].Rows[0]["GROUP_ID"]);
                                    }
                                    sb.AppendFormat("Select * From GROUPSUBREPLACE Where GROUP_ID = {0} Order by LIST_NO", GroupId);
                                    break;
                                case 3:
                                    sb.AppendFormat("Select * From GROUPSUBREPLACE Where GROUP_ID = {0} Order by LIST_NO", GroupId);
                                    break;
                            }
                                                
                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.Fill(dsResult, "GROUPSUBREPLACE");
                            break;
                        case 2://ใช้ร่วมกัน
                            sb.Clear();
                            switch (mode)
                            {
                                case 1:
                                    sb.AppendLine("Select * From GROUPJOIN");
                                    break;
                                case 2:
                                    //sb.AppendFormat("Select Top 1 * From GROUPJOIN Order by GROUP_ID desc");
                                    sb.AppendFormat("Select Top 1 * From GROUPJOIN Where GROUP_ACTIVE=1");
                                    break;
                                case 3:
                                    sb.AppendFormat("Select * From GROUPJOIN Where GROUP_ID = {0}", GroupId);
                                    break;
                            }
                        
                        

                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.Fill(dsResult, "GROUPJOIN");

                            if (dsResult.Tables["GROUPJOIN"].Rows.Count == 0)
                            {
                                sb.Clear();
                                switch (mode)
                                {
                                    case 1:
                                        sb.AppendLine("Select * From GROUPJOIN");
                                        break;
                                    case 2:
                                        sb.AppendFormat("Select Top 1 * From GROUPJOIN Order by GROUP_ID desc");
                                        break;
                                    case 3:
                                        sb.AppendFormat("Select * From GROUPJOIN Where GROUP_ID = {0}", GroupId);
                                        break;
                                }



                                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                                _dataAdapter.SelectCommand.Parameters.Clear();
                                _dataAdapter.Fill(dsResult, "GROUPJOIN");
                            }

                            //Sub
                            sb.Clear();
                            switch (mode)
                            {
                                case 1:
                                    if (dsResult.Tables["GROUPJOIN"].Rows.Count > 0)
                                    {
                                        GroupId = cls_Library.DBInt(dsResult.Tables["GROUPJOIN"].Rows[dsResult.Tables["GROUPJOIN"].Rows.Count - 1]["GROUP_ID"]);
                                    }
                                    sb.AppendLine("Select * From GROUPSUBJOIN Order by GROUP_ID, LIST_NO");
                                    break;
                                case 2:
                                    if (dsResult.Tables["GROUPJOIN"].Rows.Count > 0)
                                    {
                                        GroupId = cls_Library.DBInt(dsResult.Tables["GROUPJOIN"].Rows[0]["GROUP_ID"]);
                                    }
                                    sb.AppendFormat("Select * From GROUPSUBJOIN Where GROUP_ID = {0} Order by LIST_NO", GroupId);
                                    break;
                                case 3:
                                    sb.AppendFormat("Select * From GROUPSUBJOIN Where GROUP_ID = {0} Order by LIST_NO", GroupId);
                                    break;
                            }
                                                       
                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.Fill(dsResult, "GROUPSUBJOIN");
                            break;
                }
            }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetGroupData: " + ex.Message);
                dsResult = new DataSet();
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetGroupVersatileData(byte mode, int GroupId = 0)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.Clear();
                if (mode == 1)
                sb.AppendLine("Select * From M_VERSATILES ");
                else
                sb.AppendFormat("Select * From M_VERSATILES Where VERSATILE_ID = {0}", GroupId);

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_VERSATILES");

                //Sub
                sb.Clear();
                if (mode == 1)
                sb.AppendLine("Select * From M_VERSATILES_SUB Where len(SUB_CODE) > 0 Order by SUB_ID, LIST_NO");
                else
                sb.AppendFormat("Select * From M_VERSATILES_SUB Where len(SUB_CODE) > 0 and SUB_ID = {0} Order by LIST_NO", GroupId);

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_VERSATILES_SUB");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetGroupVersatileData: " + ex.Message);
            dsResult = new DataSet();
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static bool DeleteGroup(byte type, int GroupId)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string tbGroup;
            string tbSub;
            try
            {
            DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbGroup = type == 1 ? "GROUPREPLACE" : "GROUPJOIN";
                tbSub = type == 1 ? "GROUPSUBREPLACE" : "GROUPSUBJOIN";

                //Group
                sb.Clear();
                sb.AppendFormat("Delete From {0} Where GROUP_ID = {1}", tbGroup, GroupId);
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //Sub
                sb.Clear();
                sb.AppendFormat("Delete From {0} Where GROUP_ID = {1}", tbSub, GroupId);

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeleteItemInGroup(byte type, int SubId)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string tbSub;
            try
            {
            DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbSub = type == 1 ? "GROUPSUBREPLACE" : "GROUPSUBJOIN";

                //Sub
                sb.Clear();
                sb.AppendFormat("Delete From {0} Where SUBID = {1}", tbSub, SubId);

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static int AddItemInGroup(byte type, int GroupId, int ItemId, int ListNo, string FullName)
        {
            int Sid = 0;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            string tbsub = string.Empty;
            string Fname = string.Empty;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbsub = type == 1 ? "GROUPSUBREPLACE" : "GROUPSUBJOIN";



                sb.Clear();
                sb.AppendFormat("INSERT INTO {0} WITH (UPDLOCK) ( ", tbsub);
                sb.AppendLine("GROUP_ID,");
                sb.AppendLine("LIST_NO,");
                sb.AppendLine("ITEM_ID,");
                sb.AppendLine("FULL_NAME");
                sb.AppendLine(") VALUES(");
                sb.AppendLine("@GROUP_ID,");
                sb.AppendLine("@LIST_NO,");
                sb.AppendLine("@ITEM_ID,");
                sb.AppendLine("@FULL_NAME");
                sb.AppendLine(")");
                sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Parameters.Add("@GROUP_ID", SqlDbType.Int).Value = GroupId;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = ListNo;
                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 255).Value = FullName;

                cmd.Transaction = tran;
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                Sid = (int)shipperIdParam.Value;

                tran.Commit();
            }

            }
            catch (Exception ex)
            {
            tran.Rollback();
            MessageBox.Show("AddItemInGroup: " + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }

            return Sid;
        }

        public static int AddItemInVersatile(int SubId, int ItemId, int ListNo, string ItemCode, string FullName)
        {
            int Sid = 0;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            string tbsub = string.Empty;
            string Fname = string.Empty;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbsub ="M_VERSATILES_ITEM";



                sb.Clear();
                sb.AppendFormat("INSERT INTO {0} WITH (UPDLOCK) ( ", tbsub);
                sb.AppendLine("VERSATILE_SUB_ID,");
                sb.AppendLine("LIST_NO,");
                sb.AppendLine("ITEM_ID,");
                sb.AppendLine("ITEM_CODE,");
                sb.AppendLine("FULL_NAME,");
                sb.AppendLine("DELETED");
                sb.AppendLine(") VALUES(");
                sb.AppendLine("@VERSATILE_SUB_ID,");
                sb.AppendLine("@LIST_NO,");
                sb.AppendLine("@ITEM_ID,");
                sb.AppendLine("@ITEM_CODE,");
                sb.AppendLine("@FULL_NAME,");
                sb.AppendLine("@DELETED");
                sb.AppendLine(")");
                sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();

                cmd.Parameters.Add("@VERSATILE_SUB_ID", SqlDbType.Int).Value = SubId;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = ListNo;
                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                cmd.Parameters.Add("@ITEM_CODE", SqlDbType.Char, 8).Value = ItemCode;
                cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = FullName;
                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                cmd.Transaction = tran;
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                Sid = (int)shipperIdParam.Value;

                tran.Commit();
            }

            }
            catch (Exception ex)
            {
            tran.Rollback();
            MessageBox.Show("AddItemInVersatile: " + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }

            return Sid;
        }

        public static bool SaveDataGroup(byte type, byte mode, string GroupCode, string Desc, ref int GroupId)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            string tbGroup = string.Empty;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbGroup = type == 1 ? "GROUPREPLACE" : "GROUPJOIN";

                switch (mode)
                {
                case 0:
                    sb.Clear();
                    sb.AppendFormat("INSERT INTO {0} WITH (UPDLOCK) ( ", tbGroup);
                    sb.AppendLine("GROUP_CODE,");
                    sb.AppendLine("[DESCRIPTION]");
                    sb.AppendLine(") VALUES(");
                    sb.AppendLine("@GROUP_CODE,");
                    sb.AppendLine("@DESCRIPTION");
                    sb.AppendLine(")");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@GROUP_CODE", SqlDbType.VarChar, 50).Value = GroupCode;
                    cmd.Parameters.Add("@DESCRIPTION", SqlDbType.VarChar, 255).Value = Desc;

                    cmd.Transaction = tran;
                    shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                    shipperIdParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(shipperIdParam);
                    cmd.ExecuteNonQuery();

                    GroupId = (int)shipperIdParam.Value;

                    tran.Commit();
                    ret = true;
                    break;
                case 1:

                    sb.Clear();
                    sb.AppendFormat("UPDATE {0} WITH (UPDLOCK) SET ", tbGroup);
                    sb.AppendLine("GROUP_CODE =@GROUP_CODE,");
                    sb.AppendLine("[DESCRIPTION] =@DESCRIPTION");
                    sb.AppendLine(" WHERE GROUP_ID=@GROUP_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@GROUP_CODE", SqlDbType.VarChar, 50).Value = GroupCode;
                    cmd.Parameters.Add("@DESCRIPTION", SqlDbType.VarChar, 255).Value = Desc;
                    cmd.Parameters.Add("@GROUP_ID", SqlDbType.Int).Value = GroupId;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    ret = true;
                    break;
                }
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            MessageBox.Show("SaveDataGroup: " + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }

            return ret;
        }

        public static bool SaveDataSubGroupVersatile(byte mode, int VERSATILEID, string SubCode, string SubName, int RowCount, ref int SUB_ID)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            string tbGroup = string.Empty;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                tbGroup = "M_VERSATILES_SUB";
                switch (mode)
                {
                case 0:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO M_VERSATILES_SUB WITH (UPDLOCK) (");
                    sb.AppendLine("VERSATILE_ID,");
                    sb.AppendLine("SUB_CODE,");
                    sb.AppendLine("SUB_NAME,");
                    sb.AppendLine("LIST_NO,");
                    sb.AppendLine("DELETED)");
                    sb.AppendLine("VALUES (");
                    sb.AppendLine("@VERSATILE_ID,");
                    sb.AppendLine("@SUB_CODE,");
                    sb.AppendLine("@SUB_NAME,");
                    sb.AppendLine("@LIST_NO,");
                    sb.AppendLine("@DELETED)");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int).Value = VERSATILEID;
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 5).Value = SubCode;
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = SubName;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = RowCount + 1;

              
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                    cmd.Transaction = tran;
                    shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                    shipperIdParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(shipperIdParam);
                    cmd.ExecuteNonQuery();

                    SUB_ID = (int)shipperIdParam.Value;

                    tran.Commit();
                    ret = true;
                    break;
                case 1:

                    sb.Clear();
                    sb.AppendLine("UPDATE M_VERSATILES_SUB WITH (UPDLOCK) SET ");
                    sb.AppendLine("SUB_CODE =@SUB_CODE,");
                    sb.AppendLine("SUB_NAME =@SUB_NAME");
                    sb.AppendLine(" WHERE VERSATILE_ID =@VERSATILE_ID and SUB_ID=@SUB_ID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int).Value = VERSATILEID;
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 5).Value = SubCode;
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = SubName;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = SUB_ID;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    ret = true;
                    break;
                }
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            MessageBox.Show("SaveDataSubGroupVersatile: " + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }

            return ret;
        }

        public static bool SaveReturnMark(int Id, double QtyMark, int ReasonId)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = new SqlCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET ");
                sb.AppendLine("QTY_MARK = @QTY_MARK,");
                sb.AppendLine("RETURN_REASON = @RETURN_REASON,");
                sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                sb.AppendLine("WHERE RCD_ID = @RCD_ID");

                cmd.Connection = conn;
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Transaction = tran;
                cmd.CommandText = sb.ToString();
                cmd.Parameters.Clear();


                cmd.Parameters.Add("@QTY_MARK", SqlDbType.Float).Value = QtyMark;
                cmd.Parameters.Add("@RETURN_REASON", SqlDbType.Int).Value = ReasonId;
                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = Id;

                cmd.ExecuteNonQuery();
                tran.Commit();
                ret = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            ret = false;
            MessageBox.Show("SaveReturnMark: " + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static bool UpdateRCQtyMark(int RCD_Id, double Qty)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = new SqlCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();
            double qtyReturn = 0;
            double qtyMark = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    LoadSpecifyData(string.Format("Select * From RCDETAIL Where RCD_ID = {0}", RCD_Id), out dt, "RCDETAIL");
                    if (dt.Rows.Count > 0)
                    {
                        //qtyMark = cls_Library.DBDouble(dt.Rows[0]["QTY_MARK"]);
                        qtyMark = 0;
                        qtyReturn = cls_Library.DBDouble(dt.Rows[0]["QTY_RETURN"]);

                        qtyReturn += Qty;
                        //qtyMark -= Qty;

                        sb.Clear();
                        sb.AppendLine("UPDATE RCDETAIL WITH (UPDLOCK) SET");
                        sb.AppendLine("QTY_RETURN = @QTY_RETURN,");
                        sb.AppendLine("QTY_MARK = @QTY_MARK,");
                        sb.AppendLine("UPDATE_BY =@UPDATE_BY,");
                        sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                        sb.AppendLine("DATE_RETURN =@DATE_RETURN");
                        sb.AppendLine("Where RCD_ID = @RCD_ID");

                        tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();

                        cmd.Parameters.Add("@QTY_RETURN", SqlDbType.Float).Value = qtyReturn;
                        cmd.Parameters.Add("@QTY_MARK", SqlDbType.Float).Value = qtyMark;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DATE_RETURN", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = RCD_Id;

                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();

                        tran.Commit();
                        ret = true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("UpdateRCQtyMark: " + ex.Message);
                tran.Rollback();
                ret = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static bool CheckSaveSameRO(int cusId, byte VatStatus,int rcdID, out int Id)
        {
            bool ret = false;

            SqlConnection conn = new SqlConnection();
            SqlDataAdapter Adap = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();

            Id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    sb.AppendLine("Select ROH_ID AS _id From ROHEADER Where CUS_ID = @CUS_ID And RO_DATE = @_DATE And VAT_STATUS = @VAT_STATUS And (RO_STATUS <> 3 And RO_STATUS <> 4) And DELETED = 0");

                    Adap.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    Adap.SelectCommand.Parameters.Clear();

                    Adap.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = cusId;
                    Adap.SelectCommand.Parameters.Add("@_DATE", SqlDbType.DateTime).Value = DateTime.Today;
                    Adap.SelectCommand.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = VatStatus;

                    Adap.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Id = cls_Library.DBInt(dt.Rows[0]["_id"]);
                    }
                    Adap.Dispose();

                    if (Id > 0)
                    {
                        sb.Clear();
                        sb.AppendLine("Select ROD_ID AS _id From RODETAIL Where ROD_PID = @ROD_PID And RCD_ID = @RCD_ID And DELETED = 0");

                        Adap.SelectCommand = new SqlCommand(sb.ToString(), conn);
                        Adap.SelectCommand.Parameters.Clear();

                        Adap.SelectCommand.Parameters.Add("@ROD_PID", SqlDbType.Int).Value = Id;
                        Adap.SelectCommand.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = rcdID;
                        dt = new DataTable();
                        Adap.Fill(dt);
                        if (dt.Rows.Count <= 0)
                        {
                            Id = 0;
                        }
                    }

                    ret = true;
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("CheckSaveSameRO :" + ex.Message);
                ret = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static bool CheckSaveSameROByItem(int cusId,int ITEM_ID, byte VatStatus, int rcdID)
        {
            bool ret = false;

            SqlConnection conn = new SqlConnection();
            SqlDataAdapter Adap = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataTable dt = new DataTable();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    sb.AppendLine("Select ROH_ID AS _id From ROHEADER A inner join RODETAIL B on A.ROH_ID = B.ROD_PID Where A.CUS_ID = @CUS_ID And A.VAT_STATUS = @VAT_STATUS And B.RCD_ID = @RCD_ID And B.ITEM_ID = @ITEM_ID AND (A.RO_STATUS <> 3 And A.RO_STATUS <> 4) And A.DELETED = 0 AND B.DELETED = 0");

                    Adap.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    Adap.SelectCommand.Parameters.Clear();

                    Adap.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = cusId;                    
                    Adap.SelectCommand.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = VatStatus;
                    Adap.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ITEM_ID;
                    Adap.SelectCommand.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = rcdID;
                    Adap.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        ret = true;
                    }
                    Adap.Dispose();

                    
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("CheckSaveSameROByItem :" + ex.Message);
                ret = false;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static DataTable GetMarkDetailRC(int RCD_ID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select A.*, B.*, C.ITEM_TYPE, D.VENDOR_CODE From RCDETAIL A");
                    sb.AppendLine("INNER JOIN RCHEADER B ON A.RCD_PID = B.RCH_ID");
                    sb.AppendLine("LEFT JOIN D_VENDOR_CREDIT_TERMS C ON B.CATEGORY_ID = C.LIST_NO");
                    sb.AppendLine("LEFT JOIN M_VENDORS D ON B.CUS_ID = D.VENDOR_ID");
                    sb.AppendLine("Where A.RCD_ID =@RCD_ID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RCD_ID", SqlDbType.Int).Value = RCD_ID;

                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetMarkDetailRC: " + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        //ZOZO23------------1
        public static DataTable GetListSQ(cls_Struct.GetListSQ SQ)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    sb.AppendLine("case SQ_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _SQ_STATUS");
                    sb.AppendLine(" From SQHEADER Where DELETED = 0");
                    if (SQ.Operator > 0)
                    {
                        sb.AppendLine("And CUS_ID = @CUS_ID");
                    }

                    sb.AppendLine("And SQ_DATE BETWEEN @dateFrom AND @dateTo");
                    sb.AppendLine("Order By SQ_DATE Desc, SQ_NO Desc");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (SQ.Operator > 0)
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = SQ.Operator;
                    _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = SQ.DateFrom;
                    _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = SQ.DateTo;
                    //_dataAdapter.SelectCommand.Parameters.Add("@", SqlDbType.TinyInt).Value = SQ.SQStatus;

                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListSQ :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static bool DeleteSQ(int SQid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update SQHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where SQH_ID = @SQH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@SQH_ID", SqlDbType.Int).Value = SQid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update SQDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where SQD_PID = @SQD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = SQid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static DataSet GetSQById(int SQID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.VENDOR_CODE From SQHEADER A");
                    sb.AppendLine("LEFT JOIN M_VENDORS B ON A.CUS_ID = B.VENDOR_ID");                
                    sb.AppendLine("Where SQH_ID = @SQH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@SQH_ID", SqlDbType.Int).Value = SQID;
                    _dataAdapter.Fill(dsResult, "SQHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*,CASE WHEN A.CONV > 0 THEN A.QTY/A.CONV ELSE 0 END as Quantity, B.ITEM_CODE, B.FULL_NAME, B.MODEL1, B.BRAND_PRINT, A.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From SQDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    //sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where SQD_PID = @SQD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = SQID;
                    _dataAdapter.Fill(dsResult, "SQDETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetSQById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool SaveSQ(cls_Struct.ActionMode mode, cls_Struct.StructSQ SQ, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            SQ.SQ_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.SQ);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO SQHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("SQ_NO,");
                            sb.AppendLine("SQ_DATE,");
                            sb.AppendLine("SQ_STATUS,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("BARCODE,");
                            sb.AppendLine("NOTE,");                                    
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@SQ_NO,");
                            sb.AppendLine("@SQ_DATE,");
                            sb.AppendLine("@SQ_STATUS,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@BARCODE,");
                            sb.AppendLine("@NOTE,");                        
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE SQHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("SQ_NO = @SQ_NO,");
                            sb.AppendLine("SQ_DATE = @SQ_DATE,");
                            sb.AppendLine("SQ_STATUS = @SQ_STATUS,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("VAT_STATUS = @VAT_STATUS,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("BARCODE = @BARCODE,");
                            sb.AppendLine("NOTE = @NOTE,");                        
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE SQH_ID = @SQH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@SQ_NO", SqlDbType.VarChar, 50).Value = SQ.SQ_NO;
                    if ((SQ.SQ_DATE == DateTime.MinValue) || (SQ.SQ_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@SQ_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@SQ_DATE", SqlDbType.DateTime).Value = SQ.SQ_DATE;
                    cmd.Parameters.Add("@SQ_STATUS", SqlDbType.TinyInt).Value = SQ.SQ_STATUS;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = SQ.CUS_ID;
                    cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = SQ.VAT_STATUS;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = SQ.LIST_NO;
                    cmd.Parameters.Add("@BARCODE", SqlDbType.VarChar, 50).Value = SQ.BARCODE;
                    cmd.Parameters.Add("@NOTE", SqlDbType.VarChar, 255).Value = SQ.NOTE;


                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@SQH_ID", SqlDbType.Int).Value = SQ.SQH_ID;
                        id = SQ.SQH_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        id = (int)shipperIdParam.Value;
                    }

                    #endregion

                    #region Detail
                    if (dsData.Tables.Contains("SQDETAIL"))
                    {
                        SaveSQDetail(id, dsData.Tables["SQDETAIL"], ref conn, ref tran);
                    }
                    #endregion

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveSQ :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static bool SaveSQDetail(int id, DataTable dt, ref SqlConnection conn, ref SqlTransaction tran)
        {
            bool result = false;
            StringBuilder sb = new StringBuilder();
            int irow = 0;

            using (SqlCommand cmd = conn.CreateCommand())
            {
            cmd.CommandTimeout = 30;
            cmd.CommandType = CommandType.Text;
            cmd.Transaction = tran;

            foreach (DataRow dr in dt.Rows)
            {
                switch (cls_Library.DBInt(dr["mode"]))
                {
                case (int)cls_Struct.ActionMode.Add:
                case (int)cls_Struct.ActionMode.Copy:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO SQDETAIL WITH (UPDLOCK) (");
                    sb.AppendLine("SQD_PID,");
                    sb.AppendLine("LIST_NO,");
                    sb.AppendLine("ITEM_ID,");
                    sb.AppendLine("FULL_NAME,");
                    sb.AppendLine("BRAND_ID,");
                    sb.AppendLine("BRAND_NAME,");
                    sb.AppendLine("BRAND_PRINT,");
                    sb.AppendLine("MODEL1,");
                    sb.AppendLine("GENUIN_PART_ID,");
                    sb.AppendLine("BRAND_PART_ID,");
                    sb.AppendLine("UNIT_ID,");
                    sb.AppendLine("QTY,");
                    sb.AppendLine("CONV,");
                    sb.AppendLine("DISCOUNT,");
                    sb.AppendLine("DISCOUNT1,");
                    sb.AppendLine("DISCOUNT2,");
                    sb.AppendLine("DISCOUNT3,");
                    sb.AppendLine("BUYPRICE,");
                    sb.AppendLine("COG,");
                    sb.AppendLine("NETPRICE,");
                    sb.AppendLine("NOTED,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("DELETED");
                    sb.AppendLine(") VALUES (");
                    sb.AppendLine("@SQD_PID,");
                    sb.AppendLine("@LIST_NO,");
                    sb.AppendLine("@ITEM_ID,");
                    sb.AppendLine("@FULL_NAME,");
                    sb.AppendLine("@BRAND_ID,");
                    sb.AppendLine("@BRAND_NAME,");
                    sb.AppendLine("@BRAND_PRINT,");
                    sb.AppendLine("@MODEL1,");
                    sb.AppendLine("@GENUIN_PART_ID,");
                    sb.AppendLine("@BRAND_PART_ID,");
                    sb.AppendLine("@UNIT_ID,");
                    sb.AppendLine("@QTY,");
                    sb.AppendLine("@CONV,");
                    sb.AppendLine("@DISCOUNT,");
                    sb.AppendLine("@DISCOUNT1,");
                    sb.AppendLine("@DISCOUNT2,");
                    sb.AppendLine("@DISCOUNT3,");
                    sb.AppendLine("@BUYPRICE,");
                    sb.AppendLine("@COG,");
                    sb.AppendLine("@NETPRICE,");
                    sb.AppendLine("@NOTED,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@DELETED");
                    sb.AppendLine(")");
                    break;
                case (int)cls_Struct.ActionMode.Edit:
                    irow++;
                    sb.Clear();
                    sb.AppendLine("UPDATE SQDETAIL WITH (UPDLOCK) SET ");
                    sb.AppendLine("LIST_NO = @LIST_NO,");
                    sb.AppendLine("ITEM_ID = @ITEM_ID,");
                    sb.AppendLine("FULL_NAME = @FULL_NAME,");
                    sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("BRAND_NAME = @BRAND_NAME,");
                            sb.AppendLine("BRAND_PRINT = @BRAND_PRINT,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                    sb.AppendLine("GENUIN_PART_ID = @GENUIN_PART_ID,");
                    sb.AppendLine("BRAND_PART_ID = @BRAND_PART_ID,");
                    sb.AppendLine("UNIT_ID = @UNIT_ID,");
                    sb.AppendLine("QTY = @QTY,");
                    sb.AppendLine("CONV = @CONV,");
                    sb.AppendLine("DISCOUNT = @DISCOUNT,");
                    sb.AppendLine("DISCOUNT1 = @DISCOUNT1,");
                    sb.AppendLine("DISCOUNT2 = @DISCOUNT2,");
                    sb.AppendLine("DISCOUNT3 = @DISCOUNT3,");
                    sb.AppendLine("BUYPRICE = @BUYPRICE,");
                    sb.AppendLine("COG = @COG,");
                    sb.AppendLine("NETPRICE = @NETPRICE,");
                    sb.AppendLine("NOTED = @NOTED,");
                    sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                    sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                    sb.AppendLine("WHERE SQD_ID = @SQD_ID AND SQD_PID = @SQD_PID");
                    break;
                case (int)cls_Struct.ActionMode.Delete:
                    sb.Clear();
                    sb.AppendLine("UPDATE SQDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                    sb.AppendLine("WHERE SQD_ID = @SQD_ID AND SQD_PID = @SQD_PID");
                    break;
                case (int)cls_Struct.ActionMode.Default:
                    irow++;
                    sb.Clear();
                    sb.AppendLine("UPDATE SQDETAIL WITH (UPDLOCK) SET ");
                    sb.AppendLine("LIST_NO =@LIST_NO");
                    sb.AppendLine("WHERE SQD_ID = @SQD_ID AND SQD_PID = @SQD_PID");

                    cmd.CommandText = sb.ToString();
                    cmd.Parameters.Clear();

                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                    cmd.Parameters.Add("@SQD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SQD_ID"]);
                    cmd.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = id;
                    cmd.ExecuteNonQuery();
                    continue;
                }

                cmd.CommandText = sb.ToString();
                cmd.Parameters.Clear();

                //cmd.Transaction = tran;

                if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                {
                cmd.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                }
                else
                {
                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                }

                cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = dr["FULL_NAME"].ToString();
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                    cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = dr["MODEL1"].ToString();
                    cmd.Parameters.Add("@BRAND_NAME", SqlDbType.VarChar, 50).Value = dr["BRAND_NAME"].ToString();
                    cmd.Parameters.Add("@BRAND_PRINT", SqlDbType.VarChar, 50).Value = dr["BRAND_PRINT"].ToString();
                cmd.Parameters.Add("@GENUIN_PART_ID", SqlDbType.Char, 20).Value = dr["GENUIN_PART_ID"].ToString();
                cmd.Parameters.Add("@BRAND_PART_ID", SqlDbType.Char, 20).Value = dr["BRAND_PART_ID"].ToString();
                cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                cmd.Parameters.Add("@DISCOUNT", SqlDbType.NVarChar,100).Value = cls_Library.DBString(dr["DISCOUNT"]);
                cmd.Parameters.Add("@DISCOUNT1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT1"]);
                cmd.Parameters.Add("@DISCOUNT2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT2"]);
                cmd.Parameters.Add("@DISCOUNT3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT3"]);
                cmd.Parameters.Add("@BUYPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["BUYPRICE"]);
                cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                cmd.Parameters.Add("@NETPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NETPRICE"]);                
                cmd.Parameters.Add("@NOTED", SqlDbType.VarChar, 255).Value = dr["NOTED"].ToString();
                

                switch (cls_Library.DBInt(dr["mode"]))
                {
                case (int)cls_Struct.ActionMode.Add:
                case (int)cls_Struct.ActionMode.Copy:
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                    break;
                case (int)cls_Struct.ActionMode.Edit:
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                    cmd.Parameters.Add("@SQD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SQD_ID"]);
                    cmd.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = id;
                    break;
                case (int)cls_Struct.ActionMode.Delete:
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                    cmd.Parameters.Add("@SQD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SQD_ID"]);
                    cmd.Parameters.Add("@SQD_PID", SqlDbType.Int).Value = id;
                    break;
                }

                cmd.ExecuteNonQuery();
            }

            result = true;
            }

            return result;
        }

        public static DataTable GetHistorySQData(cls_Struct.GetHistorySQ History, bool ShowAll = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.*,CASE WHEN A.CONV > 0 THEN A.QTY/A.CONV ELSE 0 END as Quantity, B.SQ_DATE, B.CUS_ID, B.VAT_STATUS,A.BRAND_NAME From SQDETAIL A");
                sb.AppendLine("INNER JOIN SQHEADER B ON A.SQD_PID = B.SQH_ID ");
                sb.AppendLine("Where A.DELETED = 0 And B.DELETED = 0");
                if (History.Customer > 0) sb.AppendLine("And B.CUS_ID = @CUS_ID");
                if (!ShowAll)
                {
                sb.AppendLine("And B.SQ_DATE BETWEEN @dateFrom AND @dateTo");
                }
                sb.AppendLine("And B.SQ_STATUS = @SQ_STATUS");                
                sb.AppendLine("And A.ITEM_ID = @ITEM_ID");
                sb.AppendLine("Order By B.UPDATE_DATE desc, B.SQ_DATE desc, B.SQ_NO desc, A.LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                if (History.Customer > 0) _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = History.Customer;
                if (!ShowAll)
                {
                _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = History.DateFrom;
                _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = History.DateTo;
                }
                _dataAdapter.SelectCommand.Parameters.Add("@SQ_STATUS", SqlDbType.TinyInt).Value = History.HStatus;                
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = History.ItemId;

                _dataAdapter.Fill(dt);
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetHistorySQData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dt;
        }
        #endregion

        #region Sale

        public static bool CheckDataCanDel(byte Vtype, int Id)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd;
            SqlDataReader reader;
            string Sql = string.Empty;
            List<string> listSql = new List<string>();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    switch (Vtype)
                    {
                        case 1: //BS                            
                            //BS--> ETAX
                            Sql = string.Format("Select BSH_ID From ETAXDETAIL Where BSH_ID = {0} And DELETED = 0", Id);
                            listSql.Add(Sql);
                            //BS--> TS
                            Sql = string.Format("Select BSH_ID From TSDETAIL Where BSH_ID = {0} And DELETED = 0", Id);
                            listSql.Add(Sql);
                            break;
                        case 2: //TS
                            //TS--> RSR
                            Sql = string.Format("Select TSD_ID From RSRDETAIL Where TSD_ID = {0} And DELETED = 0", Id);
                            listSql.Add(Sql);
                            //TS--PS (Auto Generate PS)??

                            break;
                        case 3://PS
                            //PS--> BS
                            Sql = string.Format("Select PSH_ID From MAP_BSPS Where PSH_ID = {0}", Id);
                            listSql.Add(Sql);
                            break;
                    }

                    foreach (string sqltext in listSql)
                    {
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sqltext;
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        reader = cmd.ExecuteReader();

                        if (reader.HasRows)
                        {
                            ret = true;
                        }

                        if (ret) break;
                        if (!reader.IsClosed) reader.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("CheckDataCanDel : " + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }

        public static DataSet GetDataInitialSale()
        {
            DataSet ds = new DataSet();
            try
            {
                //ds.Tables.Add(GetDataTable("M_BANKS"));
                //ds.Tables.Add(GetDataTable("M_CATEGORIES"));
                //ds.Tables.Add(GetDataTable("M_SIZES"));
                //ds.Tables.Add(GetDataTable("M_TYPES"));
                ds.Tables.Add(GetDataTableSP("M_BRANDS"));
                //ds.Tables.Add(GetDataTable("M_VENDORS"));
                //ds.Tables.Add(GetDataTable("M_PROPERTIES"));
                //ds.Tables.Add(GetDataTable("M_PO_GROUPS"));
                //ds.Tables.Add(GetDataTable("M_MODELS"));
                //ds.Tables.Add(GetDataTable("M_DOCUMENTS"));
                ds.Tables.Add(GetDataTableSP("M_UNITS"));
                ds.Tables.Add(GetDataTableSP("M_ITEMS"));
                ds.Tables.Add(GetDataTableSP("M_CUSTOMERS"));
                //ds.Tables.Add(GetDataTable("M_JOB_TYPES"));
                ds.Tables.Add(GetDataTableSP("M_USERS"));
                //ds.Tables.Add(GetDataTable("M_SPECIALS"));
                ds.Tables.Add(GetDataTableSP("M_PERSONALS"));
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetDataInitial : " + ex.Message);
            }
            return ds;
        }

        #region BS
        //public static bool DeleteBS(int BSid)
        //{
        //    bool result = false;
        //    SqlConnection conn = new SqlConnection();
        //    SqlCommand cmd = conn.CreateCommand();
        //    SqlTransaction tran = null;
        //    SqlDataAdapter _dataAdapter = new SqlDataAdapter();
        //    StringBuilder sb = new StringBuilder();
        //    try
        //    {
        //        DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

        //        if (cls_Global_DB.ConnectDatabase(ref conn))
        //        {
        //            tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

        //            //Head
        //            sb.Clear();
        //            sb.AppendLine("Update BSHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where BSH_ID = @BSH_ID");
        //            cmd = new SqlCommand();
        //            cmd.Connection = conn;
        //            cmd.CommandText = sb.ToString();
        //            cmd.CommandTimeout = 30;
        //            cmd.CommandType = CommandType.Text;
        //            cmd.Parameters.Clear();
        //            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
        //            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
        //            cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BSid;

        //            cmd.Transaction = tran;
        //            cmd.ExecuteNonQuery();

        //            //Detail
        //            sb.Clear();
        //            sb.AppendLine("Update BSDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where BSD_PID = @BSD_PID");

        //            cmd = new SqlCommand();
        //            cmd.Connection = conn;
        //            cmd.CommandText = sb.ToString();
        //            cmd.CommandTimeout = 30;
        //            cmd.CommandType = CommandType.Text;
        //            cmd.Parameters.Clear();
        //            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
        //            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
        //            cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSid;

        //            cmd.Transaction = tran;
        //            cmd.ExecuteNonQuery();

        //            tran.Commit();
        //            result = true;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        tran.Rollback();
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cls_Global_DB.CloseDB(ref conn); conn.Dispose();
        //    }
        //    return result;
        //}
        public static DataTable GetListBS(cls_Struct.GetListBS BS)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select A.*,(CASE WHEN A.BSH_STATUS = 5 THEN 'T' ELSE 'F' END) as BSHpost,(CASE WHEN A.BSH_STATUS = 1 THEN 'เปิด' WHEN A.BSH_STATUS = 2 THEN 'พิมพ์' WHEN A.BSH_STATUS = 5 THEN 'รับ+POS' WHEN A.BSH_STATUS = 99 THEN 'ยกเลิก' END) as BSHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From BSHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");
                    sb.AppendLine(" Where A.DELETED = 0");

                    if (BS.Customer > 0)
                    {
                        sb.AppendLine(" And A.CUS_ID = @CUS_ID ");
                    }
                    if (BS.Personal > 0)
                    {
                        sb.AppendLine(" And A.RES_PER = @RES_PER ");
                    }
                    if (BS.DateType > 0)
                    {
                        sb.AppendLine(" And BSH_DATE BETWEEN @dateFrom AND @dateTo");
                    }
                    if (BS.BSstatus > 0)
                    {
                        switch (BS.BSstatus)
                        {
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                sb.AppendLine(" and A.BSH_STATUS = @BSH_STATUS ");
                                break;
                            case 6:
                                sb.AppendLine(" and A.DELETE_NO > 0");
                                break;
                        }
                        
                    }


                    sb.AppendLine(" Order By A.UPDATE_DATE Desc, A.BSH_DATE Desc, A.BSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (BS.Customer > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = BS.Customer;
                    }
                    if (BS.Personal > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@RES_PER", SqlDbType.Int).Value = BS.Personal;
                    }
                    if (BS.DateType > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = BS.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = BS.DateTo;
                    }
                    if (BS.BSstatus > 0)
                    {
                        int BSHSTATUS = 0;
                        switch (BS.BSstatus)
                        {
                            case 1:
                                BSHSTATUS = 1;
                                break;
                            case 2:
                                BSHSTATUS = 2;
                                break;
                            case 3:
                                BSHSTATUS = 3;
                                break;
                            case 4:
                                BSHSTATUS = 5;
                                break;
                            case 5:
                                BSHSTATUS = 99;                               
                                break;
                            case 6:
                                BSHSTATUS = -1;
                                break;
                        }
                        if (BSHSTATUS > 0) _dataAdapter.SelectCommand.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = BSHSTATUS;

                    }

                    dt = new DataTable("BS");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListBS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetListBSOption()
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select A.*,(CASE WHEN A.BSH_STATUS = 5 THEN 'T' ELSE 'F' END) as BSHpost,(CASE WHEN A.BSH_STATUS = 1 THEN 'เปิด' WHEN A.BSH_STATUS = 2 THEN 'พิมพ์' WHEN A.BSH_STATUS = 5 THEN 'รับ+POS' WHEN A.BSH_STATUS = 99 THEN 'ยกเลิก' END) as BSHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From BSHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");

                    switch (cls_Sales.FilterOption)
                    {
                        case 2: //ระบุพนักงาน/สถานะเปิด
                            sb.AppendLine(" Where A.DELETED = 0 and A.RES_PER = @RES_PER ");
                            sb.AppendLine(" and A.BSH_STATUS = 1 ");
                            break;
                        case 3: //ระบุพนักงาน/สถานะ IA
                        case 4: //ระบุพนักงาน/สถานะ IC
                            sb.AppendLine(" Where A.DELETED = 0 and A.RES_PER = @RES_PER ");
                            sb.AppendLine(" and A.IS_CASH = @IS_CASH ");
                            break;
                        case 5: //พนักงานทุกคน/สถานะเปิด
                        case 7: 
                            sb.AppendLine(" Where A.DELETED = 0 and A.BSH_STATUS = 1 ");
                            break;
                        case 6: //พนักงานทุกคน/สถานะรับ
                        case 8:
                            sb.AppendLine(" Where A.DELETED = 0 and A.BSH_STATUS = 3 ");
                            break;
                        case 9:
                        case 10:
                            sb.AppendLine(" Where A.DELETED = 0 and A.IS_CASH = @IS_CASH ");
                            break;
                        case 11: //ระบุแคชเชียร์/สถานะ IA
                        case 12: //ระบุแคชเชียร์/สถานะ IC
                            sb.AppendLine(" Where A.DELETED = 0 and A.SALE_PER = @SALE_PER ");
                            sb.AppendLine(" and A.IS_CASH = @IS_CASH ");
                            break;
                        case 13:    //ระบุลูกค้า/ทุกสถานะ
                        case 14:
                            sb.AppendLine(" Where A.DELETED = 0 and A.CUS_ID = @CUS_ID ");
                            break;
                        case 15:    //บิลลบรายการ
                            sb.AppendLine(" Where A.DELETED = 0 and A.DELETE_NO > 0 ");
                            break;
                        case 16:    //รายการเปิดบิล VAT
                            sb.AppendLine(" Where A.DELETED = 0 and A.VATSUM > 0 ");
                            break;
                        case 17:
                            sb.AppendLine(" Where A.DELETED = 0 "); 
                            break;
                    }

                    switch (cls_Sales.FilterOption)
                    {
                        case 7:
                        case 8:
                            break;
                        default:
                            sb.AppendLine("And BSH_DATE BETWEEN @dateFrom AND @dateTo");
                            break;
                    }

                    sb.AppendLine(" Order By A.UPDATE_DATE Desc, A.BSH_DATE Desc, A.BSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    switch (cls_Sales.FilterOption)
                    {
                        case 2:
                            _dataAdapter.SelectCommand.Parameters.Add("@RES_PER", SqlDbType.Int).Value = cls_Sales.RES_User;
                            break;
                        case 3:
                            _dataAdapter.SelectCommand.Parameters.Add("@RES_PER", SqlDbType.Int).Value = cls_Sales.RES_User;
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = true;
                            break;
                        case 4:
                            _dataAdapter.SelectCommand.Parameters.Add("@RES_PER", SqlDbType.Int).Value = cls_Sales.RES_User;
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = false;
                            break;
                        case 9:
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = true;
                            break;
                        case 10:
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = false;
                            break;
                        case 11:
                            _dataAdapter.SelectCommand.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = cls_Sales.Sale_User;
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = true;
                            break;
                        case 12:
                            _dataAdapter.SelectCommand.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = cls_Sales.Sale_User;
                            _dataAdapter.SelectCommand.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = false;
                            break;
                        case 13:
                        case 14:
                            _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = cls_Sales.Sale_Cus;
                            break;
                    }
                    switch (cls_Sales.FilterOption)
                    {
                        case 7:
                        case 8:
                            break;
                        default:
                            _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = DateTime.Now.ToShortDateString();
                            _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = DateTime.Now.ToShortDateString();
                            break;
                    }
                    dt = new DataTable("BS");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListBSOption :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataSet GetBSById(int BSid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From BSHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where BSH_ID = @BSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BSid;
                    _dataAdapter.Fill(dsResult, "BSHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From BSDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where BSD_PID = @BSD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSid;
                    _dataAdapter.Fill(dsResult, "BSDETAIL");

                    #region การชำระเงิน
                    //บัตร
                    dsResult.Tables.Add(GetDataCard(ref conn, 1, BSid));

                    //เงินโอน
                    dsResult.Tables.Add(GetDataTRANSFER_PAY(ref conn, 1, BSid));

                    //เช็ค
                    dsResult.Tables.Add(GetDataCHEQUE(ref conn, 1, BSid));

                    //หักมัดจำ
                    sb.Clear();
                    sb.AppendLine("Select * From MAP_BSPS ");
                    sb.AppendLine("Where BSH_ID = @BSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BSid;
                    _dataAdapter.Fill(dsResult, "MAP_BSPS");

                    //อื่นๆ
                    dsResult.Tables.Add(GetDataOTHER(ref conn, 1, BSid));
                    #endregion
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetBSById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetBSforTS(int BSid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From BSHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where BSH_ID = @BSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BSid;
                    _dataAdapter.Fill(dsResult, "BSHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From BSDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where BSD_PID = @BSD_PID And A.DELETED = 0 And (IS_CLEAR = 0 or IS_CLEAR is null)");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSid;
                    _dataAdapter.Fill(dsResult, "BSDETAIL");
                    
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetBSforTS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool DeleteBS(int BSid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update BSHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where BSH_ID = @BSH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update BSDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where BSD_PID = @BSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();


                    //ลบข้อมูลเชื่อมโยงระหว่าง PS-->BS   //MAP_BSPS
                    DataTable dt;
                    LoadSpecifyData(string.Format("Select PSH_ID, AMOUNT From MAP_BSPS Where BSH_ID = {0}", BSid), out dt, "MAP_BSPS");
                    if (dt.Rows.Count > 0)
                    {
                        decimal DepositB = 0, amount = 0;
                        //อัพเดทข้อมูลใน PS    //PSHEADER
                        foreach (DataRow drow in dt.Rows)
                        {
                            DepositB = GetBalancePS(cls_Library.DBInt(drow["PSH_ID"]));
                            amount = cls_Library.DBDecimal(drow["AMOUNT"]);

                            sb.Clear();
                            sb.AppendLine("UPDATE PSHEADER WITH (UPDLOCK) SET IS_CLEAR = 0, DEPOSIT_AMT =@DEPOSIT_AMT Where PSH_ID = @PSH_ID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DEPOSIT_AMT", SqlDbType.Decimal).Value = DepositB + amount;
                            cmd.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(drow["PSH_ID"]);
                            cmd.ExecuteNonQuery();
                        }
                        sb.Clear();
                        sb.AppendFormat("DELETE From MAP_BSPS WHERE BSH_ID = {0}", BSid);

                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();
                        cmd.ExecuteNonQuery();
                    }

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SaveBS(cls_Struct.ActionMode mode, cls_Struct.StructBS BS, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            DataRow dr;
            int irow;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            BS.BSH_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.BS, BS.BSH_NO);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO BSHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("BSH_NO,");
                            sb.AppendLine("BSH_DATE,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("BSH_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETE_NO,");
                            sb.AppendLine("SALE_PER,");
                            sb.AppendLine("RES_PER,");
                            sb.AppendLine("PRINT_TYPE,");
                            sb.AppendLine("CASHIER,");
                            //sb.AppendLine("PAYMENT_TYPE,");
                            sb.AppendLine("IS_ETAX,");
                            sb.AppendLine("IS_CASH,");
                            sb.AppendLine("CASH_AMT,");
                            sb.AppendLine("CARD_AMT,");
                            sb.AppendLine("TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT,");
                            sb.AppendLine("DEPOSIT_AMT,");
                            sb.AppendLine("OTHER_AMT,");
                            sb.AppendLine("SUM_AMT,");
                            sb.AppendLine("PER_VAT,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@BSH_NO,");
                            sb.AppendLine("@BSH_DATE,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@BSH_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETE_NO,");
                            sb.AppendLine("@SALE_PER,");
                            sb.AppendLine("@RES_PER,");
                            sb.AppendLine("@PRINT_TYPE,");
                            sb.AppendLine("@CASHIER,");
                            //sb.AppendLine("@PAYMENT_TYPE,");
                            sb.AppendLine("@IS_ETAX,");
                            sb.AppendLine("@IS_CASH,");
                            sb.AppendLine("@CASH_AMT,");
                            sb.AppendLine("@CARD_AMT,");
                            sb.AppendLine("@TRANS_AMT,");
                            sb.AppendLine("@CHEQUE_AMT,");
                            sb.AppendLine("@DEPOSIT_AMT,");
                            sb.AppendLine("@OTHER_AMT,");
                            sb.AppendLine("@SUM_AMT,");
                            sb.AppendLine("@PER_VAT,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE BSHEADER WITH (UPDLOCK) SET");
                            //sb.AppendLine("BSH_NO = @BSH_NO,");
                            sb.AppendLine("BSH_DATE = @BSH_DATE,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("BSH_STATUS = @BSH_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("DELETE_NO = @DELETE_NO,");
                            sb.AppendLine("SALE_PER = @SALE_PER,");
                            sb.AppendLine("RES_PER = @RES_PER,");
                            sb.AppendLine("PRINT_TYPE = @PRINT_TYPE,");
                            sb.AppendLine("CASHIER = @CASHIER,");
                            sb.AppendLine("IS_ETAX = @IS_ETAX,");
                            sb.AppendLine("IS_CASH = @IS_CASH,");
                            sb.AppendLine("CASH_AMT = @CASH_AMT,");
                            sb.AppendLine("CARD_AMT = @CARD_AMT,");
                            sb.AppendLine("TRANS_AMT = @TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT = @CHEQUE_AMT,");
                            sb.AppendLine("DEPOSIT_AMT = @DEPOSIT_AMT,");
                            sb.AppendLine("OTHER_AMT = @OTHER_AMT,");
                            sb.AppendLine("SUM_AMT = @SUM_AMT,");
                            sb.AppendLine("PER_VAT = @PER_VAT,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE BSH_ID = @BSH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    //cmd.Parameters.Add("@BSH_NO", SqlDbType.VarChar, 50).Value = BS.BSH_NO;
                    if ((BS.BSH_DATE == DateTime.MinValue) || (BS.BSH_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@BSH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@BSH_DATE", SqlDbType.DateTime).Value = BS.BSH_DATE;

                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = BS.CUS_ID;
                    cmd.Parameters.Add("@BSH_STATUS", SqlDbType.TinyInt).Value = BS.BSH_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.SmallInt).Value = BS.PRINT_NO;
                    //cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = BS.LIST_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = dsData.Tables["BSDETAIL"].Rows.Count; 
                    
                    cmd.Parameters.Add("@DELETE_NO", SqlDbType.SmallInt).Value = BS.DELETE_NO;
                    cmd.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = BS.SALE_PER;
                    cmd.Parameters.Add("@RES_PER", SqlDbType.Int).Value = BS.RES_PER;
                    cmd.Parameters.Add("@PRINT_TYPE", SqlDbType.VarChar, 1).Value = BS.PRINT_TYPE;
                    cmd.Parameters.Add("@CASHIER", SqlDbType.NVarChar, 100).Value = BS.CASHIER;
                    //cmd.Parameters.Add("@PAYMENT_TYPE", SqlDbType.TinyInt).Value = BS.PAYMENT_TYPE;
                    cmd.Parameters.Add("@IS_ETAX", SqlDbType.Bit).Value = BS.IS_ETAX;
                    cmd.Parameters.Add("@IS_CASH", SqlDbType.Bit).Value = BS.IS_CASH;
                    cmd.Parameters.Add("@CASH_AMT", SqlDbType.Decimal).Value = BS.CASH_AMT;
                    cmd.Parameters.Add("@CARD_AMT", SqlDbType.Decimal).Value = BS.CARD_AMT;
                    cmd.Parameters.Add("@TRANS_AMT", SqlDbType.Decimal).Value = BS.TRANS_AMT;
                    cmd.Parameters.Add("@CHEQUE_AMT", SqlDbType.Decimal).Value = BS.CHEQUE_AMT;
                    cmd.Parameters.Add("@DEPOSIT_AMT", SqlDbType.Decimal).Value = BS.DEPOSIT_AMT;
                    cmd.Parameters.Add("@OTHER_AMT", SqlDbType.Decimal).Value = BS.OTHER_AMT;
                    cmd.Parameters.Add("@SUM_AMT", SqlDbType.Decimal).Value = BS.SUM_AMT;
                    cmd.Parameters.Add("@PER_VAT", SqlDbType.Float).Value = BS.PER_VAT;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = BS.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = BS.VATSUM;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = BS.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BS.BSH_ID;
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@BSH_NO", SqlDbType.VarChar, 50).Value = BS.BSH_NO;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        BS.BSH_ID = (int)shipperIdParam.Value;
                    }


                    cls_Global_DB.GB_BSH_ID = BS.BSH_ID;
                    #endregion

                    #region Detail
                    irow = 0;
                    cls_Struct.ActionMode Savemode;
                    DataTable dt = dsData.Tables["BSDETAIL"].Copy();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        irow++;
                        switch (mode)
                        {
                            case cls_Struct.ActionMode.Add:
                            case cls_Struct.ActionMode.Copy:
                                Savemode = cls_Struct.ActionMode.Add;
                                break;
                            case cls_Struct.ActionMode.Edit:
                                Savemode = irow > cls_Global_DB.GB_DitemBS_count ? cls_Struct.ActionMode.Add : cls_Struct.ActionMode.Edit;
                                break;
                            default:
                                Savemode = mode;
                                break;
                        }

                        sb.Clear();
                        dr = dsData.Tables["BSDETAIL"].Rows[i];

                        

                        switch (Savemode)
                        {
                            case cls_Struct.ActionMode.Add:
                            case cls_Struct.ActionMode.Copy:
                                sb.AppendLine("INSERT INTO BSDETAIL WITH (UPDLOCK) (");
                                sb.AppendLine("BSD_PID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("FULL_NAME,");
                                sb.AppendLine("MODEL1,");
                                sb.AppendLine("BRAND_ID,");
                                sb.AppendLine("UNIT_ID,");
                                sb.AppendLine("QTY,");
                                sb.AppendLine("CONV,");
                                sb.AppendLine("UPRICE,");
                                sb.AppendLine("COG,");
                                sb.AppendLine("DISCPER,");
                                sb.AppendLine("DISCA,");
                                sb.AppendLine("VATL,");
                                sb.AppendLine("NET,");
                                sb.AppendLine("IS_UETAX,");
                                sb.AppendLine("CREATE_BY,");
                                sb.AppendLine("CREATE_DATE,");
                                sb.AppendLine("UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE,");
                                sb.AppendLine("DELETED,");
                                sb.AppendLine("DELETE_ISCNT");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@BSD_PID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@FULL_NAME,");
                                sb.AppendLine("@MODEL1,");
                                sb.AppendLine("@BRAND_ID,");
                                sb.AppendLine("@UNIT_ID,");
                                sb.AppendLine("@QTY,");
                                sb.AppendLine("@CONV,");
                                sb.AppendLine("@UPRICE,");
                                sb.AppendLine("@COG,");
                                sb.AppendLine("@DISCPER,");
                                sb.AppendLine("@DISCA,");
                                sb.AppendLine("@VATL,");
                                sb.AppendLine("@NET,");
                                sb.AppendLine("@IS_UETAX,");
                                sb.AppendLine("@CREATE_BY,");
                                sb.AppendLine("@CREATE_DATE,");
                                sb.AppendLine("@UPDATE_BY,");
                                sb.AppendLine("@UPDATE_DATE,");
                                sb.AppendLine("@DELETED,");
                                sb.AppendLine("@DELETE_ISCNT");
                                sb.AppendLine(")");
                                sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                                break;
                            case cls_Struct.ActionMode.Edit:
                                sb.AppendLine("UPDATE BSDETAIL WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("ITEM_ID = @ITEM_ID,");
                                sb.AppendLine("FULL_NAME = @FULL_NAME,");
                                sb.AppendLine("MODEL1 = @MODEL1,");
                                sb.AppendLine("BRAND_ID = @BRAND_ID,");
                                sb.AppendLine("UNIT_ID = @UNIT_ID,");
                                sb.AppendLine("QTY = @QTY,");
                                sb.AppendLine("CONV = @CONV,");
                                sb.AppendLine("UPRICE = @UPRICE,");
                                sb.AppendLine("COG = @COG,");
                                sb.AppendLine("DISCPER = @DISCPER,");
                                sb.AppendLine("DISCA = @DISCA,");
                                sb.AppendLine("VATL = @VATL,");
                                sb.AppendLine("NET = @NET,");
                                sb.AppendLine("DELETE_ISCNT = @DELETE_ISCNT,");
                                sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                                sb.AppendLine("WHERE BSD_ID = @BSD_ID AND BSD_PID = @BSD_PID");
                                break;
                            case cls_Struct.ActionMode.Delete:
                                sb.AppendLine("UPDATE BSDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE, DELETE_ISCNT =@DELETE_ISCNT");
                                sb.AppendLine("WHERE BSD_ID = @BSD_ID AND BSD_PID = @BSD_PID");
                                break;
                            case cls_Struct.ActionMode.Default:
                                sb.Clear();
                                sb.AppendLine("UPDATE BSDETAIL WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE BSD_ID = @BSD_ID AND BSD_PID = @BSD_PID");

                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;

                                //cmd.CommandText = sb.ToString();
                                //cmd.Parameters.Clear();

                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                                cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BS.BSH_ID;
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        //cmd.CommandText = sb.ToString();
                        //cmd.Parameters.Clear();

                        //if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        //{
                        //    cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BS.BSH_ID;
                        //    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                        //}
                        //else
                        //{
                        //    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        //}


                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["FULL_NAME"]);
                        cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["MODEL1"]);
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                        cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                        cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                        cmd.Parameters.Add("@UPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["UPRICE"]);
                        cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                        cmd.Parameters.Add("@DISCPER", SqlDbType.NVarChar, 100).Value = cls_Library.DBString(dr["DISCPER"]);
                        cmd.Parameters.Add("@DISCA", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCA"]);
                        cmd.Parameters.Add("@VATL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VATL"]);
                        cmd.Parameters.Add("@NET", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["NET"]);
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;

                        switch (Savemode)
                        {
                            case cls_Struct.ActionMode.Add:
                            case cls_Struct.ActionMode.Copy:
                                cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BS.BSH_ID;
                                cmd.Parameters.Add("@IS_UETAX", SqlDbType.Bit).Value = false;
                                cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                                cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = 0;
                                break;
                            case cls_Struct.ActionMode.Edit:
                                cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                                cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BS.BSH_ID;
                                break;
                            case cls_Struct.ActionMode.Delete:
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                                cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                                cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                                cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BS.BSH_ID;
                                break;
                        }

                        if (Savemode == cls_Struct.ActionMode.Edit)
                        {
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                            shipperIdParam.Direction = ParameterDirection.Output;
                            cmd.Parameters.Add(shipperIdParam);
                            cmd.ExecuteNonQuery();

                            dr["BSD_ID"] = (int)shipperIdParam.Value;
                            dr.AcceptChanges();
                        }
                            //cmd.ExecuteNonQuery();
                           
                        //Add to StockBalance
                        //switch (cls_Library.DBInt(dr["mode"]))
                        //{
                        //    case (int)cls_Struct.ActionMode.Add:
                        //    case (int)cls_Struct.ActionMode.Copy:
                        //        sb.Clear();
                        //        sb.AppendLine("INSERT INTO STOCKONHAND WITH (UPDLOCK) (");
                        //        sb.AppendLine("ITEM_ID,");
                        //        sb.AppendLine("DOCNO,");
                        //        sb.AppendLine("INOUT,");
                        //        sb.AppendLine("QTY,");
                        //        sb.AppendLine("QTY_ORIGINAL,");
                        //        sb.AppendLine("CREATE_BY,");
                        //        sb.AppendLine("CREATE_DATE)");
                        //        sb.AppendLine("VALUES (");
                        //        sb.AppendLine("@ITEM_ID,");
                        //        sb.AppendLine("@DOCNO,");
                        //        sb.AppendLine("@INOUT,");
                        //        sb.AppendLine("@QTY,");
                        //        sb.AppendLine("@QTY_ORIGINAL,");
                        //        sb.AppendLine("@CREATE_BY,");
                        //        sb.AppendLine("@CREATE_DATE)");

                        //        cmd.Connection = conn;
                        //        cmd.CommandText = sb.ToString();
                        //        cmd.CommandTimeout = 30;
                        //        cmd.CommandType = CommandType.Text;
                        //        cmd.Parameters.Clear();
                        //        cmd.Transaction = tran;

                        //        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        //        cmd.Parameters.Add("@DOCNO", SqlDbType.VarChar, 50).Value = BS.BSH_NO;
                        //        cmd.Parameters.Add("@INOUT", SqlDbType.TinyInt).Value = 2;
                        //        cmd.Parameters.Add("@QTY", SqlDbType.Decimal).Value = Math.Abs(cls_Library.DBDouble(dr["QTY"]));
                        //        cmd.Parameters.Add("@QTY_ORIGINAL", SqlDbType.Decimal).Value = 0;
                        //        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        //        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;

                        //        cmd.ExecuteNonQuery();
                        //        //tran.Commit();
                        //        ret = true;
                        //        break;
                        //    case (int)cls_Struct.ActionMode.Edit:
                        //        sb.Clear();
                        //        sb.AppendLine("UPDATE STOCKONHAND WITH (UPDLOCK) SET ");

                        //        sb.AppendLine("DOCNO = @DOCNO");
                        //        sb.AppendLine("QTY = @QTY,");
                        //        sb.AppendLine("WHERE ITEM_ID=@ITEM_ID");

                        //        cmd.Connection = conn;
                        //        cmd.CommandText = sb.ToString();
                        //        cmd.CommandTimeout = 30;
                        //        cmd.CommandType = CommandType.Text;
                        //        cmd.Parameters.Clear();
                        //        cmd.Transaction = tran;

                        //        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        //        cmd.Parameters.Add("@DOCNO", SqlDbType.VarChar, 50).Value = BS.BSH_NO;
                        //        cmd.Parameters.Add("@QTY", SqlDbType.Decimal).Value = Math.Abs(cls_Library.DBDouble(dr["QTY"]));
                        //        cmd.ExecuteNonQuery();
                        //        //tran.Commit();
                        //        ret = true;
                        //        break;
                        //}
                    }
                    #endregion

                    #region การชำระเงิน

                    //บัตร
                    if (dsData.Tables.Contains("MAP_CARD"))
                    {
                        SaveMAP_CARD(1, BS.BSH_ID, ref conn, ref tran, dsData.Tables["MAP_CARD"]);
                    }

                    //เงินโอน
                    if (dsData.Tables.Contains("MAP_TRANSFER_PAY"))
                    {
                        SaveMAP_TRANSFER_PAY(1, BS.BSH_ID, ref conn, ref tran, dsData.Tables["MAP_TRANSFER_PAY"]);
                    }

                    //เช็ค
                    if (dsData.Tables.Contains("MAP_CHEQUE"))
                    {
                        SaveMAP_CHEQUE(1, BS.BSH_ID, ref conn, ref tran, dsData.Tables["MAP_CHEQUE"]);
                    }

                    //กรณีมีการหักมัดจำ ต้องจัดการข้อมูลตาราง MAP_BSPS ด้วย                    
                    if (BS.DEPOSIT_AMT > 0)
                    {
                        if (dsData.Tables.Contains("MAP_BSPS"))
                        {
                            decimal TotalB, DepositB = 0, amount = 0;
                            string Xs = string.Empty;
                            sb.Clear();
                            sb.AppendLine("INSERT INTO MAP_BSPS WITH (UPDLOCK) (");
                            sb.AppendLine("BSH_ID,");
                            sb.AppendLine("PSH_ID,");
                            sb.AppendLine("AMOUNT");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@BSH_ID,");
                            sb.AppendLine("@PSH_ID,");
                            sb.AppendLine("@AMOUNT");
                            sb.AppendLine(")");

                            for (int i = 0; i < dsData.Tables["MAP_BSPS"].Rows.Count; i++)
                            {
                                dr = dsData.Tables["MAP_BSPS"].Rows[i];
                                amount = cls_Library.DBDecimal(dr["AMOUNT"]);

                                //cmd.CommandText = sb.ToString();
                                //cmd.Parameters.Clear();
                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;
                                cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = BS.BSH_ID;//cls_Library.DBInt(dr["BSD_ID"]);
                                cmd.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PSH_ID"]);
                                cmd.Parameters.Add("@AMOUNT", SqlDbType.Decimal).Value = amount;

                                cmd.ExecuteNonQuery();

                                //Update PS หักมัดจำ DEPOSIT_AMT ยอดมัดจำคงเหลือ, IS_CLEAR หักไปตัดครบแล้ว
                                //ตอนนี้เฉพาะ mode Add เท่านั้น
                                TotalB = GetBalancePS(cls_Library.DBInt(dr["PSH_ID"]));
                                DepositB = GetDepositPS(cls_Library.DBInt(dr["PSH_ID"]));
                                Xs = "UPDATE PSHEADER WITH (UPDLOCK) SET DEPOSIT_AMT =@DEPOSIT_AMT";
                                if (TotalB - (DepositB + amount) <= 0)
                                {
                                    Xs += ", IS_CLEAR = 1";
                                }
                                Xs += " Where PSH_ID = @PSH_ID";
                                cmd.Connection = conn;
                                //cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;
                                cmd.CommandText = Xs;
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@DEPOSIT_AMT", SqlDbType.Decimal).Value = TotalB - (DepositB + amount);
                                cmd.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PSH_ID"]);
                                cmd.ExecuteNonQuery();
                            }
                        }
                    }

                    //อื่นๆ
                    if (dsData.Tables.Contains("MAP_OTHER"))
                    {
                        SaveMAP_OTHER(1, BS.BSH_ID, ref conn, ref tran, dsData.Tables["MAP_OTHER"]);
                    }

                    #endregion

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveBS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                //cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        public static decimal GetPriceListByItem(int Id,int Unitid)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int i;
            int BrandID = 0;
            int SALE_CODE = 0;
            decimal RCprice = 0;
            decimal Price1 = 0;
            decimal Price2 = 0;
            decimal Price3 = 0;
            decimal Price4 = 0;
            DateTime RCdate = DateTime.MinValue;
            DateTime Date1 = DateTime.MinValue;
            DateTime Date2 = DateTime.MinValue;
            DateTime Date3 = DateTime.MinValue;
            DateTime Date4 = DateTime.MinValue;

            try
            {
                //BrandID = cls_Library.DBInt(cls_Data.GetNameFromTBname(Id, "ITEMS", "BRAND_ID"));
                //SALE_CODE = cls_Library.DBInt(cls_Data.GetNameFromTBname(BrandID, "BRANDS", "SALE_CODE"));


                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //SetPrice
                    sb.Clear();
                    sb.AppendLine("SELECT * FROM M_SETPRICE where ITEM_ID = @ITEM_ID and UNIT_ID=@UNIT_ID ");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = Id;
                    _dataAdapter.SelectCommand.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = Unitid;
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Price1 = (cls_Library.DBDecimal(dt.Rows[0]["PRICE1"]));
                        Price2 = (cls_Library.DBDecimal(dt.Rows[0]["PRICEDISC"]));
                        Date1 = cls_Library.DBDateTime(dt.Rows[0]["DATENET"]);
                        Date2 = cls_Library.DBDateTime(dt.Rows[0]["DATEDISC"]);
                    }

                    //Price List
                    sb.Clear();
                    sb.AppendLine("SELECT NEW_PRICE,NEW_DATE FROM M_PRICELIST where ITEM_ID = @ITEM_ID");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = Id;
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Price3 = (cls_Library.DBDecimal(dt.Rows[0]["NEW_PRICE"]));
                        Date3 = cls_Library.DBDateTime(dt.Rows[0]["NEW_DATE"]);
                    }

                    //Last PO
                    dt = GetLastPODataDT(Id);
                    if (dt.Rows.Count > 0)
                    {
                        decimal sPrice = (cls_Library.DBDecimal(dt.Rows[0]["T_NET"]));
                        decimal sQuan = (cls_Library.DBDecimal(dt.Rows[0]["T_QTY"]));
                        Price4 = sQuan > 0 ? Math.Round(sPrice / sQuan, 2) : sPrice;
                        Date4 = cls_Library.DBDateTime(dt.Rows[0]["T_DATE"]);
                    }


                    //เปรียบเทียบค่า
                    RCprice = 0;
                    if (Price1 > 0)
                    {
                        RCprice = Price1;
                        RCdate = Date1;
                    }

                    //แบบส่วนลด
                    if (SALE_CODE == 2)
                    {
                        if (Price2 > 0)
                        {
                            if (Date2 > RCdate)
                            {
                                RCprice = Price2;
                                RCdate = Date2;
                            }
                        }
                    }

                    if (Price3 > 0)
                    {
                        if (Date3 > RCdate)
                        {
                            RCprice = Price3;
                            RCdate = Date3;
                        }
                    }

                    if (Price4 > 0)
                    {
                        if (Date4 > RCdate)
                        {
                            RCprice = Price4;
                            RCdate = Date4;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetPriceListByItem :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return RCprice;
        }

        public static DataTable GetPriceListByItem(int Id, int Unitid, int Type)
        {
            DataTable dt = new DataTable();
            DataTable dtp = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    switch (Type)
                    {
                        case 1:     //Price List
                            sb.Clear();
                            sb.AppendLine("SELECT * FROM M_PRICELIST where ITEM_ID = @ITEM_ID");

                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = Id;
                            _dataAdapter.Fill(dtp);
                            if (dtp.Rows.Count > 0)
                            {
                                
                                DateTime NewDate,date1, date2, date3;
                                decimal Newprice,Price1, Price2, Price3;
                                date1 = cls_Library.DBDateTime(dtp.Rows[0]["DATEACTIVE1"]);
                                date2 = cls_Library.DBDateTime(dtp.Rows[0]["DATEACTIVE2"]);
                                date3 = cls_Library.DBDateTime(dtp.Rows[0]["DATEACTIVE3"]);
                                Price1 = cls_Library.DBDecimal(dtp.Rows[0]["PRICE1"]);
                                Price2 = cls_Library.DBDecimal(dtp.Rows[0]["PRICE2"]);
                                Price3 = cls_Library.DBDecimal(dtp.Rows[0]["PRICE3"]);

                                NewDate = date1;
                                Newprice = Price1;
                                if (date2 > NewDate)
                                {
                                    NewDate = date2;
                                    Newprice = Price2;
                                }
                                if (date3 > NewDate)
                                {
                                    NewDate = date3;
                                    Newprice = Price3;
                                }
                                dt = dtp.Copy();
                                dt.Rows[0]["NEW_DATE"] = NewDate;
                                dt.Rows[0]["NEW_PRICE"] = Newprice;
                            }
                            break;
                        case 2:     //Set Price
                            
                            sb.Clear();
                            if (Unitid > 0)
                            {
                                sb.AppendLine("SELECT * FROM M_SETPRICE where ITEM_ID = @ITEM_ID and UNIT_ID=@UNIT_ID ");
                            }
                            else
                            {
                                sb.AppendLine("SELECT * FROM M_SETPRICE where ITEM_ID = @ITEM_ID ");
                            }
                            

                            _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                            _dataAdapter.SelectCommand.Parameters.Clear();
                            _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = Id;
                            if (Unitid > 0)
                            {
                                _dataAdapter.SelectCommand.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = Unitid;
                            }
                            _dataAdapter.Fill(dt);
                            break;
                    }
                    
                            

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetPriceListByItem :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        public static string GetSetPriceByItem(int Id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int i;
            string SetPrice = "";
            
            

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //SqlCommand Totalf = new SqlCommand("UDF_GET_SETPRICE_BY_ITEM", conn);
                    //SqlParameter code1 = new SqlParameter("@ITEM_ID", SqlDbType.Int);
                    //code1.Value = Id;
                    //Totalf.CommandType = CommandType.StoredProcedure;
                    //Totalf.Parameters.Clear();
                    //Totalf.Parameters.Add(code1);
                    //SetPrice = Totalf.ExecuteScalar().ToString();

                    using (SqlCommand comm = new SqlCommand("dbo.UDF_GET_SETPRICE_BY_ITEM", conn))
                    {
                        comm.CommandType = CommandType.StoredProcedure;

                        SqlParameter p1 = new SqlParameter("@ITEM_ID", SqlDbType.Int);
                        // You can call the return value parameter anything, .e.g. "@Result".
                        SqlParameter p2 = new SqlParameter("@Result", SqlDbType.VarChar);

                        p1.Direction = ParameterDirection.Input;
                        p2.Direction = ParameterDirection.ReturnValue;

                        p1.Value = Id;

                        comm.Parameters.Add(p1);
                        comm.Parameters.Add(p2);

                        //conn.Open();
                        comm.ExecuteNonQuery();

                        if (p2.Value != DBNull.Value)
                            SetPrice = (string)p2.Value;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetSetPriceByItem :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return SetPrice;
        }
        #endregion

        #region RS
        public static bool CheckClearUETAX(int BSH_ID)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlDataReader reader;
            StringBuilder sb = new StringBuilder();
            bool UETAX = false;
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    //Head
                    sb.Clear();
                    sb.AppendLine("Select IS_UETAX From BSDETAIL Where (IS_UETAX = 0 or IS_UETAX is null) and BSD_PID=@BSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSH_ID;
                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        UETAX = false;
                    }
                    else
                    {
                        UETAX = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return UETAX;
        }

        public static bool CheckClearURSR(int TSH_ID)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlDataReader reader;
            StringBuilder sb = new StringBuilder();
            bool URSR = false;
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {

                    //Head
                    sb.Clear();
                    sb.AppendLine("Select IS_URSR From TSDETAIL Where (IS_URSR = 0 or IS_URSR is null) and TSD_PID=@TSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TSH_ID;
                    reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        URSR = false;
                    }
                    else
                    {
                        URSR = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return URSR;
        }

        public static DataTable GetListRS(cls_Struct.GetListRS RS)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    //sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE, ");
                    //sb.AppendLine("case RC_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _RC_STATUS");
                    sb.AppendLine("Select A.*,(CASE WHEN A.RSH_STATUS = 5 THEN 'T' ELSE 'F' END) as RSHpost,(CASE WHEN A.RSH_STATUS = 1 THEN 'เปิด' WHEN A.RSH_STATUS = 2 THEN 'พิมพ์' WHEN A.RSH_STATUS = 5 THEN 'รับ+POS' WHEN A.RSH_STATUS = 99 THEN 'ยกเลิก' END) as RSHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From ETAXHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");
                    sb.AppendLine(" Where A.DELETED = 0");

                    if (RS.RSno.Length > 0)
                    {
                        sb.AppendLine(" And A.RSH_NO = @RSH_NO");
                    }
                    if (RS.Customer > 0)
                    {
                        sb.AppendLine(" And A.CUS_ID = @CUS_ID");
                    }

                    if (RS.DateType != 2)
                        sb.AppendLine(" And A.RSH_DATE BETWEEN @dateFrom AND @dateTo");

                    if (RS.RSStatus > 0)
                    {
                        sb.AppendLine(" And A.RSH_STATUS = @RSH_STATUS");
                    }

                    sb.AppendLine(" Order By A.RSH_DATE Desc, A.RSH_NO desc");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (RS.RSno.Length > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@RSH_NO", SqlDbType.VarChar, 50).Value = RS.RSno;
                    }
                    if (RS.Customer > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RS.Customer;
                    }

                    if (RS.DateType != 2)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = RS.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = RS.DateTo;
                    }

                    if (RS.RSStatus > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@RSH_STATUS", SqlDbType.TinyInt).Value = RS.RSStatus;
                    }

                    dt = new DataTable("RS");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListBS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataTable GetListRSR(cls_Struct.GetListRSR RS)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    //sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE, ");
                    //sb.AppendLine("case RC_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _RC_STATUS");
                    sb.AppendLine("Select A.*,(CASE WHEN A.RSRH_STATUS = 5 THEN 'T' ELSE 'F' END) as RSRHpost,(CASE WHEN A.RSRH_STATUS = 1 THEN 'เปิด' WHEN A.RSRH_STATUS = 2 THEN 'พิมพ์' WHEN A.RSRH_STATUS = 5 THEN 'รับ+POS' WHEN A.RSRH_STATUS = 99 THEN 'ยกเลิก' END) as RSRHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From RSRHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");
                    sb.AppendLine(" Where A.DELETED = 0");

                    if (RS.RSno.Length > 0)
                    {
                        sb.AppendLine(" And A.RSRH_NO = @RSRH_NO");
                    }
                    if (RS.Customer > 0)
                    {
                        sb.AppendLine(" And A.CUS_ID = @CUS_ID");
                    }

                    if (RS.DateType != 2)
                        sb.AppendLine(" And A.RSRH_DATE BETWEEN @dateFrom AND @dateTo");

                    if (RS.RSStatus > 0)
                    {
                        sb.AppendLine(" And A.RSRH_STATUS = @RSRH_STATUS");
                    }

                    sb.AppendLine(" Order By A.RSRH_DATE Desc, A.RSRH_NO Desc");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (RS.RSno.Length > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@RSRH_NO", SqlDbType.VarChar, 50).Value = RS.RSno;
                    }

                    if (RS.Customer > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RS.Customer;
                    }

                    if (RS.DateType != 2)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = RS.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = RS.DateTo;
                    }

                    if (RS.RSStatus > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@RSRH_STATUS", SqlDbType.TinyInt).Value = RS.RSStatus;
                    }

                    dt = new DataTable("RSR");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListRSR :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataSet GetRSById(int RSid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From ETAXHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where RSH_ID = @RSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RSH_ID", SqlDbType.Int).Value = RSid;
                    _dataAdapter.Fill(dsResult, "ETAXHEADER");


                    //มี Detail ของตัวเองแล้ว
                    sb.Clear();
                    sb.AppendLine("Select G.BSH_NO, G.BSH_DATE, A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From ETAXDETAIL A");                    
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON B.ITEM_ID = A.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON D.BRAND_ID = A.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON E.UNIT_ID = A.UNIT_ID");
                    //sb.AppendLine("LEFT JOIN BSDETAIL F ON F.BSD_ID = A.BSD_ID");
                    sb.AppendLine("LEFT JOIN BSHEADER G ON G.BSH_ID = A.BSH_ID");
                    sb.AppendLine("Where RSD_PID = @RSD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RSid;
                    _dataAdapter.Fill(dsResult, "ETAXDETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetRSById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool DeleteRS(int RSid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update ETAXHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RSH_ID = @RSH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RSH_ID", SqlDbType.Int).Value = RSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update ETAXDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RSD_PID = @RSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RSid;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;

                    DataTable dt = new DataTable();
                    LoadSpecifyData(string.Format("Select BSH_ID,BSD_ID From ETAXDETAIL Where RSD_PID = {0} group by BSH_ID,BSD_ID", RSid), out dt, "ETAXDETAIL");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow drow in dt.Rows)
                        {
                            sb.Clear();
                            sb.AppendFormat("Update BSHEADER WITH (UPDLOCK) Set IS_UETAX =0 Where BSH_ID = {0}", cls_Library.DBInt(drow["BSH_ID"]));

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.ExecuteNonQuery();

                            sb.Clear();
                            sb.AppendFormat("Update BSDETAIL WITH (UPDLOCK) Set IS_UETAX =0 Where BSD_PID = {0} and BSD_ID = {1}", cls_Library.DBInt(drow["BSH_ID"]), cls_Library.DBInt(drow["BSD_ID"]));
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeleteRSR(int RSRid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update RSRHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RSRH_ID = @RSRH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RSRH_ID", SqlDbType.Int).Value = RSRid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update RSRDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where RSRD_PID = @RSRD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSRid;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;

                    DataTable dt = new DataTable();
                    LoadSpecifyData(string.Format("Select BSH_ID,BSD_ID From RSRDETAIL Where RSRD_PID = {0} group by BSH_ID,BSD_ID", RSRid), out dt, "RSRDETAIL");
                    if (dt.Rows.Count > 0)
                    {
                        foreach (DataRow drow in dt.Rows)
                        {
                            sb.Clear();
                            sb.AppendFormat("Update BSHEADER WITH (UPDLOCK) Set IS_CLEAR =0 Where BSH_ID = {0}", cls_Library.DBInt(drow["TSH_ID"]));

                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.ExecuteNonQuery();

                            sb.Clear();
                            sb.AppendFormat("Update BSDETAIL WITH (UPDLOCK) Set IS_CLEAR =0 Where BSD_PID = {0} and BSD_ID = {1}", cls_Library.DBInt(drow["TSH_ID"]), cls_Library.DBInt(drow["TSD_ID"]));
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SaveRS(cls_Struct.ActionMode mode, cls_Struct.StructRS RS, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            //int id = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            //XXXXXX    //ZOZO
                            //RS.RSH_NO = RS.TBSH_NO; //cls_Library.GetAutotNumber(cls_Struct.VoucherType.RS);
                            RS.RSH_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.RS);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO ETAXHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("RSH_NO,");
                            sb.AppendLine("RSH_DATE,");
                            sb.AppendLine("BSH_ID,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("RSH_ADDRESS,");
                            sb.AppendLine("RSH_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETE_NO,");
                            sb.AppendLine("SALE_PER,");
                            sb.AppendLine("RES_PER,");
                            sb.AppendLine("ACCEPT_PER,");
                            sb.AppendLine("PER_VAT,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@RSH_NO,");
                            sb.AppendLine("@RSH_DATE,");
                            sb.AppendLine("@BSH_ID,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@RSH_ADDRESS,");
                            sb.AppendLine("@RSH_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETE_NO,");
                            sb.AppendLine("@SALE_PER,");
                            sb.AppendLine("@RES_PER,");
                            sb.AppendLine("@ACCEPT_PER,");
                            sb.AppendLine("@PER_VAT,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE ETAXHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("RSH_NO = @RSH_NO,");
                            sb.AppendLine("RSH_DATE = @RSH_DATE,");
                            sb.AppendLine("BSH_ID = @BSH_ID,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("RSH_ADDRESS = @RSH_ADDRESS,");
                            sb.AppendLine("RSH_STATUS = @RSH_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("DELETE_NO =@DELETE_NO,");
                            sb.AppendLine("SALE_PER =@SALE_PER,");
                            sb.AppendLine("RES_PER =@RES_PER,");
                            sb.AppendLine("PER_VAT = @PER_VAT,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE RSH_ID = @RSH_ID");
                            break;

                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@RSH_NO", SqlDbType.VarChar, 50).Value = RS.RSH_NO;
                    if ((RS.RSH_DATE == DateTime.MinValue) || (RS.RSH_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@RSH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@RSH_DATE", SqlDbType.DateTime).Value = RS.RSH_DATE;

                    cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = RS.BSH_ID;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RS.CUS_ID;
                    cmd.Parameters.Add("@RSH_ADDRESS", SqlDbType.Int).Value = RS.RSH_ADDRESS;
                    cmd.Parameters.Add("@RSH_STATUS", SqlDbType.TinyInt).Value = RS.RSH_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.SmallInt).Value = RS.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = RS.LIST_NO;
                    cmd.Parameters.Add("@DELETE_NO", SqlDbType.SmallInt).Value = RS.DELETE_NO;
                    cmd.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = RS.SALE_PER;
                    cmd.Parameters.Add("@RES_PER", SqlDbType.Int).Value = RS.RES_PER;
                    cmd.Parameters.Add("@PER_VAT", SqlDbType.Float).Value = RS.PER_VAT;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = RS.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = RS.VATSUM;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = RS.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@RSH_ID", SqlDbType.Int).Value = RS.RSH_ID;

                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@ACCEPT_PER", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        RS.RSH_ID = (int)shipperIdParam.Value;

                    }
                    #endregion

                    #region Detail

                    bool IsDel = false;
                    DataRow dr;
                    int irow = 0;
                    for (int i = 0; i < dsData.Tables["ETAXDETAIL"].Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dsData.Tables["ETAXDETAIL"].Rows[i];

                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                sb.AppendLine("INSERT INTO ETAXDETAIL WITH (UPDLOCK) (");
                                sb.AppendLine("RSD_PID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("BSH_ID,");
                                sb.AppendLine("BSD_ID,");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("ITEM_CODE,");
                                sb.AppendLine("FULL_NAME,");
                                sb.AppendLine("MODEL1,");
                                sb.AppendLine("BRAND_ID,");
                                sb.AppendLine("UNIT_ID,");
                                sb.AppendLine("QTY,");
                                sb.AppendLine("CONV,");
                                sb.AppendLine("UPRICE,");
                                sb.AppendLine("COG,");
                                sb.AppendLine("DISCPER,");
                                sb.AppendLine("DISCA,");
                                sb.AppendLine("VATL,");
                                sb.AppendLine("CREATE_BY,");
                                sb.AppendLine("CREATE_DATE,");
                                sb.AppendLine("UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE,");
                                sb.AppendLine("DELETED");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@RSD_PID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@BSH_ID,");
                                sb.AppendLine("@BSD_ID,");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@ITEM_CODE,");
                                sb.AppendLine("@FULL_NAME,");
                                sb.AppendLine("@MODEL1,");
                                sb.AppendLine("@BRAND_ID,");
                                sb.AppendLine("@UNIT_ID,");
                                sb.AppendLine("@QTY,");
                                sb.AppendLine("@CONV,");
                                sb.AppendLine("@UPRICE,");
                                sb.AppendLine("@COG,");
                                sb.AppendLine("@DISCPER,");
                                sb.AppendLine("@DISCA,");
                                sb.AppendLine("@VATL,");
                                sb.AppendLine("@CREATE_BY,");
                                sb.AppendLine("@CREATE_DATE,");
                                sb.AppendLine("@UPDATE_BY,");
                                sb.AppendLine("@UPDATE_DATE,");
                                sb.AppendLine("@DELETED");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE ETAXDETAIL WITH (UPDLOCK) SET ");

                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("BSH_ID = @BSH_ID,");
                                sb.AppendLine("BSD_ID = @BSD_ID,");
                                sb.AppendLine("ITEM_ID = @ITEM_ID,");
                                sb.AppendLine("ITEM_CODE = @ITEM_CODE,");
                                sb.AppendLine("FULL_NAME = @FULL_NAME,");
                                sb.AppendLine("MODEL1 = @MODEL1,");
                                sb.AppendLine("BRAND_ID = @BRAND_ID,");
                                sb.AppendLine("UNIT_ID = @UNIT_ID,");
                                sb.AppendLine("QTY = @QTY,");
                                sb.AppendLine("CONV = @CONV,");
                                sb.AppendLine("UPRICE = @UPRICE,");
                                sb.AppendLine("COG = @COG,");
                                sb.AppendLine("DISCPER = @DISCPER,");
                                sb.AppendLine("DISCA = @DISCA,");
                                sb.AppendLine("VATL = @VATL,");
                                sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                                sb.AppendLine("WHERE RSD_ID = @RSD_ID AND RSD_PID = @RSD_PID");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("UPDATE ETAXDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                                sb.AppendLine("WHERE RSD_ID = @RSD_ID AND RSD_PID = @RSD_PID");
                                IsDel = true;
                                break;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.Clear();
                                sb.AppendLine("UPDATE ETAXDETAIL WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE RSD_ID = @RSD_ID AND RSD_PID = @RSD_PID");

                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;

                                //cmd.CommandText = sb.ToString();
                                //cmd.Parameters.Clear();

                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@RSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSD_ID"]);
                                cmd.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RS.RSH_ID;
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        //cmd.CommandText = sb.ToString();
                        //cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RS.RSH_ID;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                        }
                        else
                        {
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        }

                        cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSH_ID"]);
                        cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        cmd.Parameters.Add("@ITEM_CODE", SqlDbType.Char,8).Value = cls_Library.DBString(dr["ITEM_CODE"]);
                        cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["FULL_NAME"]);
                        cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["MODEL1"]);
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                        cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                        cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                        cmd.Parameters.Add("@UPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["UPRICE"]);
                        cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                        cmd.Parameters.Add("@DISCPER", SqlDbType.NVarChar, 100).Value = cls_Library.DBString(dr["DISCPER"]);
                        cmd.Parameters.Add("@DISCA", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCA"]);
                        cmd.Parameters.Add("@VATL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VATL"]);

                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@RSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSD_ID"]);
                                cmd.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RS.RSH_ID;
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                                cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                                cmd.Parameters.Add("@RSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSD_ID"]);
                                cmd.Parameters.Add("@RSD_PID", SqlDbType.Int).Value = RS.RSH_ID;
                                break;
                        }

                        cmd.ExecuteNonQuery();

                        //PIAK Update IS_UETAX in Detail
                        sb.Clear();
                        sb.AppendLine("UPDATE BSDETAIL WITH (UPDLOCK) SET IS_UETAX = 1 WHERE BSD_ID = @BSD_ID and BSD_PID=@BSD_PID");
                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                        cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSH_ID"]);
                        cmd.ExecuteNonQuery();
                    }

                    ////ZOZO
                    //List<int> listID = dsData.Tables["ETAXDETAIL"].AsEnumerable().Where(r => !r.Field<int>("mode").Equals((int)cls_Struct.ActionMode.Delete)).Select(r => r.Field<int>("BSH_ID")).Distinct().ToList();
                    //foreach (int idBS in listID)
                    //{
                    //    //Update IS_UETAX = 1 ของบิลขายใบนั้น
                    //    bool IsAll = cls_Data.CheckClearUETAX(idBS);
                    //    if (IsAll)
                    //    {
                    //        sb.Clear();
                    //        sb.AppendLine("UPDATE BSHEADER WITH (UPDLOCK) SET IS_UETAX = 1 WHERE BSH_ID = @BSH_ID");
                    //        cmd = new SqlCommand();
                    //        cmd.Connection = conn;
                    //        cmd.CommandText = sb.ToString();
                    //        cmd.Parameters.Clear();
                    //        cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = idBS;
                    //        cmd.ExecuteNonQuery();
                    //    }                       
                    //}

                    //if (IsDel)
                    //{

                    //}



                    //กรณีมีการลบรายการสัก 1 รายการ ให้ตรวจสอบใน ETAXDETAIL ทั้งหมดว่ามีการใช้ BS id นี้หรือไม่ ถ้าไม่มีการใช้แล้วให้ไปเคลียร์ BSHEADER ว่ายังไม่ถูกโหลดไปทำใบกำกับภาษี

                    //xx //Clear BSHEADR 
                    ////Update IS_UETAX = 1 ของบิลขายใบนั้น
                    //sb.Clear();
                    //sb.AppendLine("UPDATE BSHEADER WITH (UPDLOCK) SET IS_UETAX = 1 WHERE BSH_ID = @BSH_ID");
                    //cmd.CommandText = sb.ToString();
                    //cmd.Parameters.Clear();
                    //cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = RS.BSH_ID;
                    //cmd.ExecuteNonQuery();
                    #endregion

                    tran.Commit();

                    //ZOZO
                    List<int> listID = dsData.Tables["ETAXDETAIL"].AsEnumerable().Where(r => !r.Field<int>("mode").Equals((int)cls_Struct.ActionMode.Delete)).Select(r => r.Field<int>("BSH_ID")).Distinct().ToList();
                    foreach (int idBS in listID)
                    {
                        //Update IS_UETAX = 1 ของบิลขายใบนั้น
                        bool IsAll = cls_Data.CheckClearUETAX(idBS);
                        if (IsAll)
                        {
                            sb.Clear();
                            sb.AppendLine("UPDATE BSHEADER WITH (UPDLOCK) SET IS_UETAX = 1 WHERE BSH_ID = @BSH_ID");
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = idBS;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveRS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                //cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        #endregion

        #region PS

        public static DataTable GetListPS(cls_Struct.GetListPS PS)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    //sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE, ");
                    //sb.AppendLine("case RC_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _RC_STATUS");
                    sb.AppendLine("Select A.*,(CASE WHEN A.PSH_STATUS = 5 THEN 'T' ELSE 'F' END) as PSHpost,(CASE WHEN A.PSH_STATUS = 1 THEN 'เปิด' WHEN A.PSH_STATUS = 2 THEN 'พิมพ์' WHEN A.PSH_STATUS = 5 THEN 'รับ+POS' WHEN A.PSH_STATUS = 99 THEN 'ยกเลิก' END) as PSHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From PSHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");
                    sb.AppendLine(" Where A.DELETED = 0");

                    if (PS.PSno.Length > 0)
                    {
                        sb.AppendLine(" And A.PSH_NO = @PSH_NO");
                    }
                    if (PS.Customer > 0)
                    {
                        sb.AppendLine(" And A.CUS_ID = @CUS_ID");
                    }

                    if (PS.Per > 0)
                    {
                        sb.AppendLine(" And A.SALE_PER = @SALE_PER");
                    }

                    if (PS.DateType != 2)
                    {
                        sb.AppendLine(" And A.PSH_DATE BETWEEN @dateFrom AND @dateTo");
                    }

                    if (PS.PSStatus > 0)
                    {
                        sb.AppendLine(" And A.PSH_STATUS = @PSH_STATUS");
                    }

                    if (PS.PayType > 0)
                    {
                        switch (PS.PayType)
                        {
                            case 1: //รับมัดจำ
                                sb.AppendLine(" And A.DEPOSIT_AMT > 0");
                                break;
                            case 2: //เงินสด
                                sb.AppendLine(" And A.CASH_AMT > 0");
                                break;
                            case 3: //บัตร
                                sb.AppendLine(" And A.CARD_AMT > 0");
                                break;
                            case 4: //เช็ค
                                sb.AppendLine(" And A.CHEQUE_AMT > 0");
                                break;
                            case 5: //เงินโอน
                                sb.AppendLine(" And A.TRANS_AMT > 0");
                                break;
                        }
                    }
                    sb.AppendLine(" Order By A.PSH_DATE Desc, A.PSH_NO desc");

                    //if (PS.PSno.Length > 0)
                    //{
                    //    sb.AppendLine("Select * From PSHEADER Where DELETED = 0 And PSH_NO = @PSH_NO");
                    //}
                    //else
                    //{
                    //    sb.AppendLine("Select * From PSHEADER Where DELETED = 0");
                    //    if (PS.Customer > 0)
                    //    {
                    //        sb.AppendLine("And CUS_ID = @CUS_ID");
                    //    }

                    //    if (PS.Per > 0)
                    //    {
                    //        sb.AppendLine("And SALE_PER = @SALE_PER");
                    //    }

                    //    if (PS.DateType != 2)
                    //    {
                    //        sb.AppendLine("And PSH_DATE BETWEEN @dateFrom AND @dateTo");
                    //    }

                    //    if (PS.PSStatus > 0)
                    //    {
                    //        sb.AppendLine("And PSH_STATUS = @PSH_STATUS");
                    //    }

                    //    if (PS.PayType > 0)
                    //    {
                    //        switch (PS.PayType)
                    //        {
                    //            case 1: //รับมัดจำ
                    //                sb.AppendLine("And DEPOSIT_AMT > 0");
                    //                break;
                    //            case 2: //เงินสด
                    //                sb.AppendLine("And CASH_AMT > 0");
                    //                break;
                    //            case 3: //บัตร
                    //                sb.AppendLine("And CARD_AMT > 0");
                    //                break;
                    //            case 4: //เช็ค
                    //                sb.AppendLine("And CHEQUE_AMT > 0");
                    //                break;
                    //            case 5: //เงินโอน
                    //                sb.AppendLine("And TRANS_AMT > 0");
                    //                break;
                    //        }
                    //    }                        
                    //    sb.AppendLine(" Order By PSH_DATE Desc, PSH_NO");
                    //}
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();

                    if (PS.PSno.Length >0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@PSH_NO", SqlDbType.VarChar, 50).Value = PS.PSno;
                    }
                    if (PS.Customer > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = PS.Customer;
                    }
                    if (PS.Per > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = PS.Per;
                    }

                    if (PS.DateType != 2)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = PS.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = PS.DateTo;
                    }

                    if (PS.PSStatus > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@PSH_STATUS", SqlDbType.TinyInt).Value = PS.PSStatus;
                    }

                    dt = new DataTable("PS");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListPS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataSet GetPSById(int PSid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From PSHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where PSH_ID = @PSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = PSid;
                    _dataAdapter.Fill(dsResult, "PSHEADER");

                    sb.Clear();
                    sb.AppendLine("Select A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From PSDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("Where PSD_PID = @PSD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PSid;
                    _dataAdapter.Fill(dsResult, "PSDETAIL");

                    #region รับชำระ
                    //บัตร
                    dsResult.Tables.Add(GetDataCard(ref conn, 2, PSid));

                    //เงินโอน
                    dsResult.Tables.Add(GetDataTRANSFER_PAY(ref conn, 2, PSid));

                    ////เช็ค
                    dsResult.Tables.Add(GetDataCHEQUE(ref conn, 2, PSid));

                    //อื่นๆ
                    dsResult.Tables.Add(GetDataOTHER(ref conn, 2, PSid));
                    #endregion

                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetPSById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool DeletePS(int PSid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update PSHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where PSH_ID = @PSH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = PSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update PSDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where PSD_PID = @PSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SavePS(cls_Struct.ActionMode mode, cls_Struct.StructPS PS, DataSet dsData, bool IsCauto = false)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            DataRow dr;
            int irow;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            PS.PSH_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.PS);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO PSHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("PSH_NO,");
                            sb.AppendLine("PSH_DATE,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("PSH_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETE_NO,");
                            sb.AppendLine("SALE_PER,");
                            sb.AppendLine("RES_PER,");
                            sb.AppendLine("ACCEPT_PER,");
                            sb.AppendLine("CASH_AMT,");
                            sb.AppendLine("CARD_AMT,");
                            sb.AppendLine("TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT,");
                            sb.AppendLine("OTHER_AMT,");
                            sb.AppendLine("SUM_AMT,");
                            sb.AppendLine("DEPOSIT_AMT,");
                            sb.AppendLine("PER_VAT,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@PSH_NO,");
                            sb.AppendLine("@PSH_DATE,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@PSH_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETE_NO,");
                            sb.AppendLine("@SALE_PER,");
                            sb.AppendLine("@RES_PER,");
                            sb.AppendLine("@ACCEPT_PER,");
                            sb.AppendLine("@CASH_AMT,");
                            sb.AppendLine("@CARD_AMT,");
                            sb.AppendLine("@TRANS_AMT,");
                            sb.AppendLine("@CHEQUE_AMT,");
                            sb.AppendLine("@OTHER_AMT,");
                            sb.AppendLine("@SUM_AMT,");
                            sb.AppendLine("@DEPOSIT_AMT,");
                            sb.AppendLine("@PER_VAT,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE PSHEADER WITH (UPDLOCK) SET ");
                            sb.AppendLine("PSH_NO = @PSH_NO,");
                            sb.AppendLine("PSH_DATE = @PSH_DATE,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("PSH_STATUS = @PSH_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("DELETE_NO = @DELETE_NO,");
                            sb.AppendLine("SALE_PER = @SALE_PER,");
                            sb.AppendLine("RES_PER = @RES_PER,");
                            sb.AppendLine("CASH_AMT = @CASH_AMT,");
                            sb.AppendLine("CARD_AMT = @CARD_AMT,");
                            sb.AppendLine("TRANS_AMT = @TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT = @CHEQUE_AMT,");
                            sb.AppendLine("OTHER_AMT = @OTHER_AMT,");
                            sb.AppendLine("SUM_AMT = @SUM_AMT,");
                            sb.AppendLine("DEPOSIT_AMT = @DEPOSIT_AMT,");
                            sb.AppendLine("PER_VAT = @PER_VAT,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine(" WHERE PSH_ID = @PSH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@PSH_NO", SqlDbType.VarChar, 50).Value = PS.PSH_NO;
                    if ((PS.PSH_DATE == DateTime.MinValue) || (PS.PSH_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@PSH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@PSH_DATE", SqlDbType.DateTime).Value = PS.PSH_DATE;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = PS.CUS_ID;
                    cmd.Parameters.Add("@PSH_STATUS", SqlDbType.TinyInt).Value = PS.PSH_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.SmallInt).Value = PS.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = PS.LIST_NO;
                    cmd.Parameters.Add("@DELETE_NO", SqlDbType.SmallInt).Value = PS.DELETE_NO;
                    cmd.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = PS.SALE_PER;
                    cmd.Parameters.Add("@RES_PER", SqlDbType.Int).Value = PS.RES_PER;
                    cmd.Parameters.Add("@CASH_AMT", SqlDbType.Decimal).Value = PS.CASH_AMT;
                    cmd.Parameters.Add("@CARD_AMT", SqlDbType.Decimal).Value = PS.CARD_AMT;
                    cmd.Parameters.Add("@TRANS_AMT", SqlDbType.Decimal).Value = PS.TRANS_AMT;
                    cmd.Parameters.Add("@CHEQUE_AMT", SqlDbType.Decimal).Value = PS.CHEQUE_AMT;
                    cmd.Parameters.Add("@OTHER_AMT", SqlDbType.Decimal).Value = PS.OTHER_AMT;
                    cmd.Parameters.Add("@SUM_AMT", SqlDbType.Decimal).Value = PS.SUM_AMT;
                    cmd.Parameters.Add("@DEPOSIT_AMT", SqlDbType.Decimal).Value = PS.DEPOSIT_AMT;
                    cmd.Parameters.Add("@PER_VAT", SqlDbType.Float).Value = PS.PER_VAT;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = PS.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = PS.VATSUM;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = PS.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = PS.PSH_ID;

                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@ACCEPT_PER", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        PS.PSH_ID = (int)shipperIdParam.Value;
                    }
                    #endregion

                    if (!IsCauto)
                    {

                        #region Detail

                        irow = 0;
                        for (int i = 0; i < dsData.Tables["PSDETAIL"].Rows.Count; i++)
                        {
                            sb.Clear();
                            dr = dsData.Tables["PSDETAIL"].Rows[i];

                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case (int)cls_Struct.ActionMode.Add:
                                case (int)cls_Struct.ActionMode.Copy:
                                    sb.AppendLine("INSERT INTO PSDETAIL WITH (UPDLOCK) (");
                                    sb.AppendLine("PSD_PID,");
                                    sb.AppendLine("LIST_NO,");
                                    sb.AppendLine("ITEM_ID,");
                                    sb.AppendLine("FULL_NAME,");
                                    sb.AppendLine("MODEL1,");
                                    sb.AppendLine("BRAND_ID,");
                                    sb.AppendLine("UNIT_ID,");
                                    sb.AppendLine("QTY,");
                                    sb.AppendLine("CONV,");
                                    sb.AppendLine("UPRICE,");
                                    sb.AppendLine("COG,");
                                    sb.AppendLine("DISCPER,");
                                    sb.AppendLine("DISCA,");
                                    sb.AppendLine("VATL,");
                                    sb.AppendLine("CREATE_BY,");
                                    sb.AppendLine("CREATE_DATE,");
                                    sb.AppendLine("UPDATE_BY,");
                                    sb.AppendLine("UPDATE_DATE,");
                                    sb.AppendLine("DELETED,");
                                    sb.AppendLine("DELETE_ISCNT");
                                    sb.AppendLine(") VALUES (");
                                    sb.AppendLine("@PSD_PID,");
                                    sb.AppendLine("@LIST_NO,");
                                    sb.AppendLine("@ITEM_ID,");
                                    sb.AppendLine("@FULL_NAME,");
                                    sb.AppendLine("@MODEL1,");
                                    sb.AppendLine("@BRAND_ID,");
                                    sb.AppendLine("@UNIT_ID,");
                                    sb.AppendLine("@QTY,");
                                    sb.AppendLine("@CONV,");
                                    sb.AppendLine("@UPRICE,");
                                    sb.AppendLine("@COG,");
                                    sb.AppendLine("@DISCPER,");
                                    sb.AppendLine("@DISCA,");
                                    sb.AppendLine("@VATL,");
                                    sb.AppendLine("@CREATE_BY,");
                                    sb.AppendLine("@CREATE_DATE,");
                                    sb.AppendLine("@UPDATE_BY,");
                                    sb.AppendLine("@UPDATE_DATE,");
                                    sb.AppendLine("@DELETED,");
                                    sb.AppendLine("@DELETE_ISCNT");
                                    sb.AppendLine(")");
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    irow++;
                                    sb.AppendLine("UPDATE PSDETAIL WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO = @LIST_NO,");
                                    sb.AppendLine("ITEM_ID = @ITEM_ID,");
                                    sb.AppendLine("FULL_NAME = @FULL_NAME,");
                                    sb.AppendLine("MODEL1 = @MODEL1,");
                                    sb.AppendLine("BRAND_ID = @BRAND_ID,");
                                    sb.AppendLine("UNIT_ID = @UNIT_ID,");
                                    sb.AppendLine("QTY = @QTY,");
                                    sb.AppendLine("CONV = @CONV,");
                                    sb.AppendLine("UPRICE = @UPRICE,");
                                    sb.AppendLine("COG = @COG,");
                                    sb.AppendLine("DISCPER = @DISCPER,");
                                    sb.AppendLine("DISCA = @DISCA,");
                                    sb.AppendLine("VATL = @VATL,");
                                    sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                                    sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                                    sb.AppendLine("WHERE PSD_ID = @PSD_ID AND PSD_PID = @PSD_PID");
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    sb.AppendLine("UPDATE PSDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE, DELETE_ISCNT =@DELETE_ISCNT");
                                    sb.AppendLine("WHERE PSD_ID = @PSD_ID AND PSD_PID = @PSD_PID");
                                    break;
                                case (int)cls_Struct.ActionMode.Default:
                                    irow++;
                                    sb.Clear();
                                    sb.AppendLine("UPDATE PSDETAIL WITH (UPDLOCK) SET ");
                                    sb.AppendLine("LIST_NO = @LIST_NO");
                                    sb.AppendLine("WHERE PSD_ID = @PSD_ID AND PSD_PID = @PSD_PID");

                                    cmd.CommandText = sb.ToString();
                                    cmd.Parameters.Clear();

                                    cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                    cmd.Parameters.Add("@PSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PSD_ID"]);
                                    cmd.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PS.PSH_ID;
                                    cmd.ExecuteNonQuery();
                                    continue;
                            }

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                            {
                                cmd.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PS.PSH_ID;
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                            }
                            else
                            {
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            }

                            cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                            cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["FULL_NAME"]);
                            cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["MODEL1"]);
                            cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                            cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                            cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                            cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                            cmd.Parameters.Add("@UPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["UPRICE"]);
                            cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                            cmd.Parameters.Add("@DISCPER", SqlDbType.NVarChar, 100).Value = cls_Library.DBString(dr["DISCPER"]);
                            cmd.Parameters.Add("@DISCA", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCA"]);
                            cmd.Parameters.Add("@VATL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VATL"]);

                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case (int)cls_Struct.ActionMode.Add:
                                case (int)cls_Struct.ActionMode.Copy:
                                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                                    cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = 0;
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                    cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                                    cmd.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PS.PSH_ID;
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    cmd.Parameters.Clear();
                                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                                    cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                                    cmd.Parameters.Add("@PSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["PSD_ID"]);
                                    cmd.Parameters.Add("@PSD_PID", SqlDbType.Int).Value = PS.PSH_ID;
                                    break;
                            }

                            cmd.ExecuteNonQuery();
                        }
                        #endregion

                        #region การชำระเงิน

                        //บัตร
                        if (dsData.Tables.Contains("MAP_CARD"))
                        {
                            SaveMAP_CARD(2, PS.PSH_ID, ref conn, ref tran, dsData.Tables["MAP_CARD"]);
                        }

                        //เงินโอน
                        if (dsData.Tables.Contains("MAP_TRANSFER_PAY"))
                        {
                            SaveMAP_TRANSFER_PAY(2, PS.PSH_ID, ref conn, ref tran, dsData.Tables["MAP_TRANSFER_PAY"]);
                        }

                        ////เช็ค
                        //if (dsData.Tables.Contains("MAP_CHEQUE"))
                        //{
                        //    SaveMAP_CHEQUE(2, PS.PSH_ID, ref conn, ref tran, dsData.Tables["MAP_CHEQUE"]);
                        //}

                        //อื่นๆ
                        if (dsData.Tables.Contains("MAP_OTHER"))
                        {
                            SaveMAP_OTHER(2, PS.PSH_ID, ref conn, ref tran, dsData.Tables["MAP_OTHER"]);
                        }
                        #endregion
                    }

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SavePS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                //cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        #endregion

        #region TS

        public static DataTable GetListTS(cls_Struct.GetListTS TS)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("Select *,case VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS,");
                    //sb.AppendLine("case SELL_TYPE when 1 then 'ปกติ' when 2 then 'เบิกห้าง' when 3 then 'ชดเชย' when 4 then 'Back Order' Else 'สินค้าตัวอย่าง' End as _SELL_TYPE, ");
                    //sb.AppendLine("case RC_STATUS when 1 then 'เปิด' when 2 then 'ปิด' Else 'ยกเลิก' End as _RC_STATUS");
                    sb.AppendLine("Select A.*,(CASE WHEN A.TSH_STATUS = 5 THEN 'T' ELSE 'F' END) as TSHpost,(CASE WHEN A.TSH_STATUS = 1 THEN 'เปิด' WHEN A.TSH_STATUS = 2 THEN 'พิมพ์' WHEN A.TSH_STATUS = 5 THEN 'รับ+POS' WHEN A.TSH_STATUS = 99 THEN 'ยกเลิก' END) as TSHstatus,B.USER_CODE,C.USER_CODE AS RES_CODE,D.USER_CODE as ACPT_CODE,M.CUSTOMER_CODE From TSHEADER A INNER JOIN M_CUSTOMERS M ON A.CUS_ID = M.CUSTOMER_ID LEFT OUTER JOIN M_USERS B ON A.SALE_PER = B.USER_ID LEFT OUTER JOIN M_USERS AS C ON A.RES_PER = C.USER_ID LEFT OUTER JOIN M_USERS AS D ON A.ACCEPT_PER = D.USER_ID");
                    sb.AppendLine(" Where A.DELETED = 0");

                    if (TS.TSno.Length > 0)
                    {
                        sb.AppendLine(" And A.TSH_NO = @TSH_NO");
                    }

                    if (TS.Customer > 0)
                    {
                        sb.AppendLine(" And A.CUS_ID = @CUS_ID");
                    }
                    if (TS.Per > 0)
                    {
                        sb.AppendLine(" And A.SALE_PER = @SALE_PER");
                    }
                    if (TS.DateType != 2)
                        sb.AppendLine(" And A.TSH_DATE BETWEEN @dateFrom AND @dateTo");

                    if (TS.TSStatus > 0)
                    {
                        sb.AppendLine(" And A.TSH_STATUS = @TSH_STATUS");
                    }
                    if (TS.PayType > 0)
                    {
                        switch (TS.PayType)
                        {
                            case 1: //เงินสด
                                sb.AppendLine(" And A.CASH_AMT > 0");
                                break;
                            case 2: //เช็ค
                                sb.AppendLine(" And A.CHEQUE_AMT > 0");
                                break;
                            case 3: //เงินโอน
                                sb.AppendLine(" And A.TRANS_AMT > 0");
                                break;
                        }
                    }

                    sb.AppendLine(" Order By A.TSH_DATE Desc, A.TSH_NO Desc");


                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (TS.TSno.Length > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@TSH_NO", SqlDbType.VarChar, 50).Value = TS.TSno;
                    }

                    if (TS.Customer > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = TS.Customer;
                    }
                    if (TS.Per > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = TS.Per;
                    }

                    if (TS.DateType != 2)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@dateFrom", SqlDbType.DateTime).Value = TS.DateFrom;
                        _dataAdapter.SelectCommand.Parameters.Add("@dateTo", SqlDbType.DateTime).Value = TS.DateTo;
                    }

                    if (TS.TSStatus > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@TSH_STATUS", SqlDbType.TinyInt).Value = TS.TSStatus;
                    }

                    dt = new DataTable("TS");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListTS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        public static DataSet GetTSById(int TSid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From TSHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where TSH_ID = @TSH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = TSid;
                    _dataAdapter.Fill(dsResult, "TSHEADER");

                    sb.Clear();
                    sb.AppendLine("Select G.TSH_NO, G.TSH_DATE,A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From TSDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("LEFT JOIN TSHEADER G ON G.TSH_ID = A.TSD_PID");
                    sb.AppendLine("Where TSD_PID = @TSD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TSid;
                    _dataAdapter.Fill(dsResult, "TSDETAIL");

                    #region การคืนเงิน
                    //บัตร
                    dsResult.Tables.Add(GetDataCard(ref conn, 3, TSid));

                    //เงินโอน
                    dsResult.Tables.Add(GetDataTRANSFER_PAY(ref conn, 3, TSid));

                    ////เช็ค
                    dsResult.Tables.Add(GetDataCHEQUE(ref conn, 3, TSid));

                    //อื่นๆ
                    dsResult.Tables.Add(GetDataOTHER(ref conn, 3, TSid));
                    #endregion
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetTSById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool DeleteTS(int TSid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                DateTime _date = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    //Head
                    sb.Clear();
                    sb.AppendLine("Update TSHEADER WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where TSH_ID = @TSH_ID");
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = TSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //Detail
                    sb.Clear();
                    sb.AppendLine("Update TSDETAIL WITH (UPDLOCK) Set DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE Where TSD_PID = @TSD_PID");

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                    cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = _date;
                    cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TSid;

                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();

                    //ZOZO
                    //XXXX Update BSD 

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                throw ex;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SaveTS(cls_Struct.ActionMode mode, cls_Struct.StructTS TS, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            DataRow dr;
            int irow;
            DataTable dtBs = new DataTable();
            bool IsClear = false;
            double QtyB, Qty, QtyCut;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            TS.TSH_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.TS);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO TSHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("TSH_NO,");
                            sb.AppendLine("TSH_DATE,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("BS_ID,");
                            sb.AppendLine("TSH_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETE_NO,");
                            sb.AppendLine("SALE_PER,");
                            sb.AppendLine("RES_PER,");
                            sb.AppendLine("ACCEPT_PER,");
                            sb.AppendLine("PRINT_TYPE,");
                            sb.AppendLine("IS_ETAX,");
                            sb.AppendLine("IS_REFUND,");
                            //sb.AppendLine("PAYMENT_TYPE,");
                            sb.AppendLine("CASH_AMT,");              
                            sb.AppendLine("TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT,");
                            sb.AppendLine("OTHER_AMT,");
                            sb.AppendLine("SUM_AMT,");
                            sb.AppendLine("PER_VAT,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@TSH_NO,");
                            sb.AppendLine("@TSH_DATE,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@BS_ID,");
                            sb.AppendLine("@TSH_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETE_NO,");
                            sb.AppendLine("@SALE_PER,");
                            sb.AppendLine("@RES_PER,");
                            sb.AppendLine("@ACCEPT_PER,");
                            sb.AppendLine("@PRINT_TYPE,");
                            sb.AppendLine("@IS_ETAX,");
                            sb.AppendLine("@IS_REFUND,");
                            //sb.AppendLine("@PAYMENT_TYPE,");
                            sb.AppendLine("@CASH_AMT,");
                            sb.AppendLine("@TRANS_AMT,");
                            sb.AppendLine("@CHEQUE_AMT,");
                            sb.AppendLine("@OTHER_AMT,");
                            sb.AppendLine("@SUM_AMT,");
                            sb.AppendLine("@PER_VAT,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE TSHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("TSH_NO = @TSH_NO,");
                            sb.AppendLine("TSH_DATE = @TSH_DATE,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("BS_ID = @BS_ID,");
                            sb.AppendLine("TSH_STATUS = @TSH_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("DELETE_NO = @DELETE_NO,");
                            sb.AppendLine("SALE_PER = @SALE_PER,");
                            sb.AppendLine("RES_PER = @RES_PER,");
                            sb.AppendLine("PRINT_TYPE = @PRINT_TYPE,");
                            sb.AppendLine("IS_ETAX = @IS_ETAX,");
                            sb.AppendLine("IS_REFUND = @IS_REFUND,");
                            //sb.AppendLine("PAYMENT_TYPE = @PAYMENT_TYPE,");
                            sb.AppendLine("CASH_AMT = @CASH_AMT,");
                            sb.AppendLine("TRANS_AMT = @TRANS_AMT,");
                            sb.AppendLine("CHEQUE_AMT = @CHEQUE_AMT,");
                            sb.AppendLine("OTHER_AMT = @OTHER_AMT,");
                            sb.AppendLine("SUM_AMT = @SUM_AMT,");
                            sb.AppendLine("PER_VAT = @PER_VAT,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE TSH_ID = @TSH_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@TSH_NO", SqlDbType.VarChar, 50).Value = TS.TSH_NO;
                    if ((TS.TSH_DATE == DateTime.MinValue) || (TS.TSH_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@TSH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@TSH_DATE", SqlDbType.DateTime).Value = TS.TSH_DATE;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = TS.CUS_ID;
                    cmd.Parameters.Add("@BS_ID", SqlDbType.Int).Value = TS.BS_ID;
                    cmd.Parameters.Add("@TSH_STATUS", SqlDbType.TinyInt).Value = TS.TSH_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.SmallInt).Value = TS.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = TS.LIST_NO;
                    cmd.Parameters.Add("@DELETE_NO", SqlDbType.SmallInt).Value = TS.DELETE_NO;
                    cmd.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = TS.SALE_PER;
                    cmd.Parameters.Add("@RES_PER", SqlDbType.Int).Value = TS.RES_PER;
                    cmd.Parameters.Add("@PRINT_TYPE", SqlDbType.VarChar, 1).Value = TS.PRINT_TYPE;
                    cmd.Parameters.Add("@IS_ETAX", SqlDbType.Bit).Value = TS.IS_ETAX ==true?1:0;
                    cmd.Parameters.Add("@IS_REFUND", SqlDbType.Bit).Value = TS.IS_REFUND;
                    //cmd.Parameters.Add("@PAYMENT_TYPE", SqlDbType.TinyInt).Value = TS.PAYMENT_TYPE;
                    cmd.Parameters.Add("@CASH_AMT", SqlDbType.Decimal).Value = TS.CASH_AMT;
                    cmd.Parameters.Add("@TRANS_AMT", SqlDbType.Decimal).Value = TS.TRANS_AMT;
                    cmd.Parameters.Add("@CHEQUE_AMT", SqlDbType.Decimal).Value = TS.CHEQUE_AMT;
                    cmd.Parameters.Add("@OTHER_AMT", SqlDbType.Decimal).Value = TS.OTHER_AMT;
                    cmd.Parameters.Add("@SUM_AMT", SqlDbType.Decimal).Value = TS.SUM_AMT;
                    cmd.Parameters.Add("@PER_VAT", SqlDbType.Float).Value = TS.PER_VAT;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = TS.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = TS.VATSUM;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = TS.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = TS.TSH_ID;
            
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@ACCEPT_PER", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        TS.TSH_ID = (int)shipperIdParam.Value;
                    }          
                    #endregion

                    #region Detail
                    irow = 0;
                    int BSHid;
                    int BSDid;
                    for (int i = 0; i < dsData.Tables["TSDETAIL"].Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dsData.Tables["TSDETAIL"].Rows[i];
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                        case (int)cls_Struct.ActionMode.Add:
                        case (int)cls_Struct.ActionMode.Copy:
                            sb.AppendLine("INSERT INTO TSDETAIL WITH (UPDLOCK) (");
                            sb.AppendLine("TSD_PID,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("BSH_ID,");
                            sb.AppendLine("BSD_ID,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("MODEL1,");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("UNIT_ID,");
                            sb.AppendLine("QTY,");
                            sb.AppendLine("CONV,");
                            sb.AppendLine("UPRICE,");
                            sb.AppendLine("COG,");
                            sb.AppendLine("DISCPER,");
                            sb.AppendLine("DISCA,");
                            sb.AppendLine("VATL,");
                                sb.AppendLine("Ref_BSH_NO,");
                                sb.AppendLine("Ref_BSH_DATE,");
                                sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED,");
                            sb.AppendLine("DELETE_ISCNT");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@TSD_PID,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@BSH_ID,");
                            sb.AppendLine("@BSD_ID,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@MODEL1,");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@UNIT_ID,");
                            sb.AppendLine("@QTY,");
                            sb.AppendLine("@CONV,");
                            sb.AppendLine("@UPRICE,");
                            sb.AppendLine("@COG,");
                            sb.AppendLine("@DISCPER,");
                            sb.AppendLine("@DISCA,");
                            sb.AppendLine("@VATL,");
                                sb.AppendLine("@Ref_BSH_NO,");
                                sb.AppendLine("@Ref_BSH_DATE,");
                                sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED,");
                            sb.AppendLine("@DELETE_ISCNT");
                            sb.AppendLine(")");
                            break;
                        case (int)cls_Struct.ActionMode.Edit:
                            irow++;
                            sb.AppendLine("UPDATE TSDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("BSH_ID = @BSH_ID,");
                            sb.AppendLine("BSD_ID = @BSD_ID,");
                            sb.AppendLine("ITEM_ID = @ITEM_ID,");
                            sb.AppendLine("FULL_NAME = @FULL_NAME,");
                            sb.AppendLine("MODEL1 = @MODEL1,");
                            sb.AppendLine("BRAND_ID = @BRAND_ID,");
                            sb.AppendLine("UNIT_ID = @UNIT_ID,");
                            sb.AppendLine("QTY = @QTY,");
                            sb.AppendLine("CONV = @CONV,");
                            sb.AppendLine("UPRICE = @UPRICE,");
                            sb.AppendLine("COG = @COG,");
                            sb.AppendLine("DISCPER = @DISCPER,");
                            sb.AppendLine("DISCA = @DISCA,");
                            sb.AppendLine("VATL = @VATL,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE TSD_ID = @TSD_ID AND TSD_PID = @TSD_PID");
                            break;
                        case (int)cls_Struct.ActionMode.Delete:
                            sb.AppendLine("UPDATE TSDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE, DELETE_ISCNT =@DELETE_ISCNT");
                            sb.AppendLine("WHERE TSD_ID = @TSD_ID AND TSD_PID = @TSD_PID");                            
                            break;
                        case (int)cls_Struct.ActionMode.Default:
                            irow++;
                            sb.Clear();
                            sb.AppendLine("UPDATE TSDETAIL WITH (UPDLOCK) SET ");
                            sb.AppendLine("LIST_NO = @LIST_NO");
                            sb.AppendLine("WHERE TSD_ID = @TSD_ID AND TSD_PID = @TSD_PID");

                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();

                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                            cmd.Parameters.Add("@TSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSD_ID"]);
                            cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TS.TSH_ID;
                            cmd.ExecuteNonQuery();
                            continue;
                        }

                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TS.TSH_ID;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                        }
                        else
                        {
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        }
                        cmd.Parameters.Add("@BSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSH_ID"]);
                        cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BSD_ID"]);
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["FULL_NAME"]);
                        cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["MODEL1"]);
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                        cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                        cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                        cmd.Parameters.Add("@UPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["UPRICE"]);
                        cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                        cmd.Parameters.Add("@DISCPER", SqlDbType.NVarChar, 100).Value = cls_Library.DBString(dr["DISCPER"]);
                        cmd.Parameters.Add("@DISCA", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCA"]);
                        cmd.Parameters.Add("@VATL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VATL"]);
                        cmd.Parameters.Add("@Ref_BSH_NO", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["Ref_BSH_NO"]);
                        if ((cls_Library.DBDateTime(dr["Ref_BSH_DATE"]) == DateTime.MinValue) || (cls_Library.DBDateTime(dr["Ref_BSH_DATE"]) == DateTime.MaxValue))
                            cmd.Parameters.Add("@Ref_BSH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                        else
                            cmd.Parameters.Add("@Ref_BSH_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["Ref_BSH_DATE"]);

                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                            cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                            cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = 0;
                            break;
                            case (int)cls_Struct.ActionMode.Edit:
                            cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                            cmd.Parameters.Add("@TSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSD_ID"]);
                            cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TS.TSH_ID;
                            break;
                            case (int)cls_Struct.ActionMode.Delete:
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                            cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                            cmd.Parameters.Add("@TSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSD_ID"]);
                            cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = TS.TSH_ID;
                            break;
                        }
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();


                        //ZOZO
                        BSHid = cls_Library.DBInt(dr["BSH_ID"]);
                        BSDid = cls_Library.DBInt(dr["BSD_ID"]);

                        dtBs = GetBalanceQtyBS(BSDid, BSHid);
                        if (dtBs.Rows.Count > 0)
                        {

                            Qty = cls_Library.DBDouble(dr["QTY"]);

                            QtyCut = cls_Library.DBDouble(dtBs.Rows[0]["QTYCUT"]);
                            QtyB = cls_Library.DBDouble(dtBs.Rows[0]["QTY"]) - cls_Library.DBDouble(dtBs.Rows[0]["QTYCUT"]);
                            //IsClear = cls_Library.DBbool(dtBs.Rows[0]["IS_CLEAR"]);

                            sb.Clear();
                            sb.AppendLine("UPDATE BSDETAIL WITH (UPDLOCK) SET QTYCUT = @QTYCUT, IS_CLEAR = @IS_CLEAR WHERE BSD_ID = @BSD_ID And BSD_PID = @BSD_PID");
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();


                            switch (cls_Library.DBInt(dr["mode"]))
                            {
                                case (int)cls_Struct.ActionMode.Add:
                                case (int)cls_Struct.ActionMode.Copy:
                                    if (Qty >= QtyB) IsClear = true;

                                    cmd.Parameters.Add("@QTYCUT", SqlDbType.Float).Value = QtyCut + Qty;
                                    cmd.Parameters.Add("@IS_CLEAR", SqlDbType.Bit).Value = IsClear? 1: 0;

                                    cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = BSDid;
                                    cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSHid;
                                    //cmd.ExecuteNonQuery();
                                    break;
                                case (int)cls_Struct.ActionMode.Edit:
                                    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ต้องรู้ว่า แก่ไขปริมาณ เพิ่มขึ้นหรือลดลง
                                    break;
                                case (int)cls_Struct.ActionMode.Delete:
                                    IsClear = false;
                                    if (Qty >= QtyCut) IsClear = true;

                                    cmd.Parameters.Add("@QTYCUT", SqlDbType.Float).Value = QtyCut - Qty;
                                    cmd.Parameters.Add("@IS_CLEAR", SqlDbType.Bit).Value = IsClear ? 1 : 0;

                                    cmd.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = BSDid;
                                    cmd.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = BSHid;
                                    //cmd.ExecuteNonQuery();
                                    break;
                            }

                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #region ประเภทเงินได้
                    //บัตร
                    if (dsData.Tables.Contains("MAP_CARD"))
                    {
                        SaveMAP_CARD(3, TS.TSH_ID, ref conn, ref tran, dsData.Tables["MAP_CARD"]);
                    }

                    //เงินโอน
                    if (dsData.Tables.Contains("MAP_TRANSFER_PAY"))
                    {
                        SaveMAP_TRANSFER_PAY(3, TS.TSH_ID, ref conn, ref tran, dsData.Tables["MAP_TRANSFER_PAY"]);
                    }

                    //เช็ค
                    if (dsData.Tables.Contains("MAP_CHEQUE"))
                    {
                        SaveMAP_CHEQUE(3, TS.TSH_ID, ref conn, ref tran, dsData.Tables["MAP_CHEQUE"]);
                    }

                    //อื่นๆ
                    if (dsData.Tables.Contains("MAP_OTHER"))
                    {
                        SaveMAP_OTHER(3, TS.TSH_ID, ref conn, ref tran, dsData.Tables["MAP_OTHER"]);
                    }
                    #endregion


                    //บัตร
                    //if (dsData.Tables.Contains("MAP_CARD"))
                    //{
                    //  SaveMAP_CARD(TS.TSH_ID, dsData.Tables["MAP_CARD"], ref conn, ref tran);
                    //}

                    //คืนเงินค่ามัดจำสินค้า "N" Auto สร้างใบรับมัดจำล่วงหน้า
                    if ((!TS.IS_REFUND) && (mode == cls_Struct.ActionMode.Add))
                    {
                        cls_Struct.StructPS PS = new cls_Struct.StructPS();
                        PS.PSH_ID = 0;
                        PS.PSH_NO = "";
                        PS.PSH_DATE = DateTime.Now;
                        PS.CUS_ID = TS.CUS_ID;
                        PS.PSH_STATUS = 1;
                        PS.PRINT_NO = 0;
                        PS.LIST_NO = 1;
                        PS.DELETE_NO = 0;
                        PS.SALE_PER = TS.SALE_PER;
                        PS.CASH_AMT = TS.NETSUM;
                        PS.CARD_AMT = 0;
                        PS.TRANS_AMT = 0;
                        PS.CHEQUE_AMT = 0;
                        PS.OTHER_AMT = 0;
                        PS.SUM_AMT = TS.NETSUM;


                        //PS.PER_VAT = cls_Library.CDouble(spinVatePer.EditValue);  //XXXX
                        //PS.SUMCOG = cls_Library.CDecimal(spinSumCog.EditValue);
                        //PS.VATSUM = cls_Library.CDecimal(spinSumVat.EditValue);
                        PS.NETSUM = TS.NETSUM;


                        DataTable dt = dsData.Tables["TSDETAIL"].Clone();   //XXXXXXXXXXXXXXXXXXXX
                        dr = dt.NewRow();
                        dr["mode"] = (int)cls_Struct.ActionMode.Add;
                        //dr["PSD_PID"] = 0;
                        dr["LIST_NO"] = 1;
                        dr["ITEM_ID"] = -1;
                        dr["ITEM_CODE"] = "0000001";
                        dr["CONV"] = 1;

                        dr["FULL_NAME"] = "";
                        dr["MODEL1"] = "";
                        dr["BRAND_ID"] = 0;
                        dr["BRAND_CODE"] = "";
                        dr["UNIT_ID"] = 0;
                        dr["UNIT_CODE"] = "";

                        dr["QTY"] = 1;

                        dr["UPRICE"] = TS.NETSUM;
                        dr["DISCPER"] = "";
                        dr["DISCA"] = 0;
                        dr["VATL"] = 0;
                        dr["COG"] = TS.NETSUM;

                        dt.Rows.Add(dr);
                        dt.TableName = "PSDETAIL";
                        DataSet ds = new DataSet();
                        ds.Tables.Add(dt);

                        bool IsSaveOK = SavePS(cls_Struct.ActionMode.Add, PS, ds, false);
                        if (!IsSaveOK)
                        {
                            //กรณี Auto สร้างไม่ได้
                        }
                    }

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveTS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                //cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        #endregion

        #region RSR

        public static DataSet GetRSRById(int RSRid)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select A.*, B.CUSTOMER_CODE From RSRHEADER A");
                    sb.AppendLine("LEFT JOIN M_CUSTOMERS B ON A.CUS_ID = B.CUSTOMER_ID");
                    sb.AppendLine("Where RSRH_ID = @RSRH_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RSRH_ID", SqlDbType.Int).Value = RSRid;
                    _dataAdapter.Fill(dsResult, "RSRHEADER");

                    sb.Clear();
                    sb.AppendLine("Select G.TSH_NO, G.TSH_DATE, A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME From RSRDETAIL A");
                    sb.AppendLine("LEFT JOIN M_ITEMS B ON A.ITEM_ID = B.ITEM_ID");
                    sb.AppendLine("LEFT JOIN M_BRANDS D ON A.BRAND_ID = D.BRAND_ID");
                    sb.AppendLine("LEFT JOIN M_UNITS E ON A.UNIT_ID = E.UNIT_ID");
                    sb.AppendLine("LEFT JOIN TSHEADER G ON G.TSH_ID = A.TSH_ID");
                    sb.AppendLine("Where RSRD_PID = @RSRD_PID And A.DELETED = 0");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSRid;
                    _dataAdapter.Fill(dsResult, "RSRDETAIL");
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetRSRById :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dsResult;
        }

        public static bool SaveRSR(cls_Struct.ActionMode mode, cls_Struct.StructRSR RSR, DataSet dsData)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            //int id = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region Head
                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            RSR.RSRH_NO = cls_Library.GetAutotNumber(cls_Struct.VoucherType.RSR);
                            sb.Clear();
                            sb.AppendLine("INSERT INTO RSRHEADER WITH (UPDLOCK) (");
                            sb.AppendLine("RSRH_NO,");
                            sb.AppendLine("RSRH_DATE,");
                            sb.AppendLine("TSH_ID,");
                            sb.AppendLine("CUS_ID,");
                            sb.AppendLine("RSRH_ADDRESS,");
                            sb.AppendLine("RSRH_STATUS,");
                            sb.AppendLine("PRINT_NO,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETE_NO,");
                            sb.AppendLine("SALE_PER,");
                            sb.AppendLine("RES_PER,");
                            sb.AppendLine("ACCEPT_PER,");
                            sb.AppendLine("PER_VAT,");
                            sb.AppendLine("SUMCOG,");
                            sb.AppendLine("VATSUM,");
                            sb.AppendLine("NETSUM,");
                            sb.AppendLine("CREATE_BY,");
                            sb.AppendLine("CREATE_DATE,");
                            sb.AppendLine("UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE,");
                            sb.AppendLine("DELETED");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@RSRH_NO,");
                            sb.AppendLine("@RSRH_DATE,");
                            sb.AppendLine("@TSH_ID,");
                            sb.AppendLine("@CUS_ID,");
                            sb.AppendLine("@RSRH_ADDRESS,");
                            sb.AppendLine("@RSRH_STATUS,");
                            sb.AppendLine("@PRINT_NO,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETE_NO,");
                            sb.AppendLine("@SALE_PER,");
                            sb.AppendLine("@RES_PER,");
                            sb.AppendLine("@ACCEPT_PER,");
                            sb.AppendLine("@PER_VAT,");
                            sb.AppendLine("@SUMCOG,");
                            sb.AppendLine("@VATSUM,");
                            sb.AppendLine("@NETSUM,");
                            sb.AppendLine("@CREATE_BY,");
                            sb.AppendLine("@CREATE_DATE,");
                            sb.AppendLine("@UPDATE_BY,");
                            sb.AppendLine("@UPDATE_DATE,");
                            sb.AppendLine("@DELETED");
                            sb.AppendLine(")");
                            sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE RSRHEADER WITH (UPDLOCK) SET");
                            sb.AppendLine("RSRH_NO = @RSRH_NO,");
                            sb.AppendLine("RSRH_DATE = @RSRH_DATE,");
                            sb.AppendLine("TSH_ID = @TSH_ID,");
                            sb.AppendLine("CUS_ID = @CUS_ID,");
                            sb.AppendLine("RSRH_ADDRESS = @RSRH_ADDRESS,");
                            sb.AppendLine("RSRH_STATUS = @RSRH_STATUS,");
                            sb.AppendLine("PRINT_NO = @PRINT_NO,");
                            sb.AppendLine("LIST_NO = @LIST_NO,");
                            sb.AppendLine("DELETE_NO =@DELETE_NO,");
                            sb.AppendLine("SALE_PER =@SALE_PER,");
                            sb.AppendLine("PER_VAT = @PER_VAT,");
                            sb.AppendLine("SUMCOG = @SUMCOG,");
                            sb.AppendLine("VATSUM = @VATSUM,");
                            sb.AppendLine("NETSUM = @NETSUM,");
                            sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                            sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                            sb.AppendLine("WHERE RSRH_ID = @RSRH_ID");
                            break;

                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@RSRH_NO", SqlDbType.VarChar, 50).Value = RSR.RSRH_NO;
                    if ((RSR.RSRH_DATE == DateTime.MinValue) || (RSR.RSRH_DATE == DateTime.MaxValue))
                        cmd.Parameters.Add("@RSRH_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    else
                        cmd.Parameters.Add("@RSRH_DATE", SqlDbType.DateTime).Value = RSR.RSRH_DATE;

                    cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = RSR.TSH_ID;
                    cmd.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = RSR.CUS_ID;
                    cmd.Parameters.Add("@RSRH_ADDRESS", SqlDbType.Int).Value = RSR.RSRH_ADDRESS;
                    cmd.Parameters.Add("@RSRH_STATUS", SqlDbType.TinyInt).Value = RSR.RSRH_STATUS;
                    cmd.Parameters.Add("@PRINT_NO", SqlDbType.SmallInt).Value = RSR.PRINT_NO;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = RSR.LIST_NO;
                    cmd.Parameters.Add("@DELETE_NO", SqlDbType.SmallInt).Value = RSR.DELETE_NO;
                    cmd.Parameters.Add("@SALE_PER", SqlDbType.Int).Value = RSR.SALE_PER;
                    cmd.Parameters.Add("@RES_PER", SqlDbType.Int).Value = RSR.RES_PER;
                    cmd.Parameters.Add("@PER_VAT", SqlDbType.Float).Value = RSR.PER_VAT;
                    cmd.Parameters.Add("@SUMCOG", SqlDbType.Decimal).Value = RSR.SUMCOG;
                    cmd.Parameters.Add("@VATSUM", SqlDbType.Decimal).Value = RSR.VATSUM;
                    cmd.Parameters.Add("@NETSUM", SqlDbType.Decimal).Value = RSR.NETSUM;

                    if (mode == cls_Struct.ActionMode.Edit)
                    {
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@RSRH_ID", SqlDbType.Int).Value = RSR.RSRH_ID;

                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@ACCEPT_PER", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;

                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();

                        RSR.RSRH_ID = (int)shipperIdParam.Value;

                    }
                    #endregion

                    #region Detail
                    DataRow dr;
                    int irow = 0;
                    for (int i = 0; i < dsData.Tables["RSRDETAIL"].Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dsData.Tables["RSRDETAIL"].Rows[i];

                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                sb.AppendLine("INSERT INTO RSRDETAIL WITH (UPDLOCK) (");

                                sb.AppendLine("RSRD_PID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("TSH_ID,");
                                sb.AppendLine("TSD_ID,");
                                sb.AppendLine("ITEM_ID,");
                                sb.AppendLine("FULL_NAME,");
                                sb.AppendLine("MODEL1,");
                                sb.AppendLine("BRAND_ID,");
                                sb.AppendLine("UNIT_ID,");
                                sb.AppendLine("QTY,");
                                sb.AppendLine("CONV,");
                                sb.AppendLine("UPRICE,");
                                sb.AppendLine("COG,");
                                sb.AppendLine("DISCPER,");
                                sb.AppendLine("DISCA,");
                                sb.AppendLine("VATL,");
                                sb.AppendLine("CREATE_BY,");
                                sb.AppendLine("CREATE_DATE,");
                                sb.AppendLine("UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE,");
                                sb.AppendLine("DELETED");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@RSRD_PID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@TSH_ID,");
                                sb.AppendLine("@TSD_ID,");
                                sb.AppendLine("@ITEM_ID,");
                                sb.AppendLine("@FULL_NAME,");
                                sb.AppendLine("@MODEL1,");
                                sb.AppendLine("@BRAND_ID,");
                                sb.AppendLine("@UNIT_ID,");
                                sb.AppendLine("@QTY,");
                                sb.AppendLine("@CONV,");
                                sb.AppendLine("@UPRICE,");
                                sb.AppendLine("@COG,");
                                sb.AppendLine("@DISCPER,");
                                sb.AppendLine("@DISCA,");
                                sb.AppendLine("@VATL,");
                                sb.AppendLine("@CREATE_BY,");
                                sb.AppendLine("@CREATE_DATE,");
                                sb.AppendLine("@UPDATE_BY,");
                                sb.AppendLine("@UPDATE_DATE,");
                                sb.AppendLine("@DELETED");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE RSRDETAIL WITH (UPDLOCK) SET ");

                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("TSH_ID = @TSH_ID,");
                                sb.AppendLine("TSD_ID = @TSH_ID,");
                                sb.AppendLine("ITEM_ID = @ITEM_ID,");
                                sb.AppendLine("FULL_NAME = @FULL_NAME,");
                                sb.AppendLine("MODEL1 = @MODEL1,");
                                sb.AppendLine("BRAND_ID = @BRAND_ID,");
                                sb.AppendLine("UNIT_ID = @UNIT_ID,");
                                sb.AppendLine("QTY = @QTY,");
                                sb.AppendLine("CONV = @CONV,");
                                sb.AppendLine("UPRICE = @UPRICE,");
                                sb.AppendLine("COG = @COG,");
                                sb.AppendLine("DISCPER = @DISCPER,");
                                sb.AppendLine("DISCA = @DISCA,");
                                sb.AppendLine("VATL = @VATL,");
                                sb.AppendLine("UPDATE_BY = @UPDATE_BY,");
                                sb.AppendLine("UPDATE_DATE = @UPDATE_DATE");
                                sb.AppendLine("WHERE RSRD_ID = @RSRD_ID AND RSRD_PID = @RSRD_PID");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("UPDATE RSRDETAIL WITH (UPDLOCK) SET DELETED =1, DELETE_BY =@DELETE_BY, DELETE_DATE =@DELETE_DATE");
                                sb.AppendLine("WHERE RSRD_ID = @RSRD_ID AND RSRD_PID = @RSRD_PID");
                                break;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.Clear();
                                sb.AppendLine("UPDATE RSRDETAIL WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE RSRD_ID = @RSRD_ID AND RSRD_PID = @RSRD_PID");

                                cmd.Connection = conn;
                                cmd.CommandText = sb.ToString();
                                cmd.CommandTimeout = 30;
                                cmd.CommandType = CommandType.Text;
                                cmd.Parameters.Clear();
                                cmd.Transaction = tran;

                                //cmd.CommandText = sb.ToString();
                                //cmd.Parameters.Clear();

                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@RSRD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSRD_ID"]);
                                cmd.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSR.RSRH_ID;
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;
                        //cmd.CommandText = sb.ToString();
                        //cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSR.RSRH_ID;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["LIST_NO"]);
                        }
                        else
                        {
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        }

                        cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSH_ID"]);
                        cmd.Parameters.Add("@TSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSD_ID"]);
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["FULL_NAME"]);
                        cmd.Parameters.Add("@MODEL1", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["MODEL1"]);
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BRAND_ID"]);
                        cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["UNIT_ID"]);
                        cmd.Parameters.Add("@QTY", SqlDbType.Float).Value = cls_Library.DBDouble(dr["QTY"]);
                        cmd.Parameters.Add("@CONV", SqlDbType.Float).Value = cls_Library.DBDouble(dr["CONV"]);
                        cmd.Parameters.Add("@UPRICE", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["UPRICE"]);
                        cmd.Parameters.Add("@COG", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["COG"]);
                        cmd.Parameters.Add("@DISCPER", SqlDbType.NVarChar, 100).Value = cls_Library.DBString(dr["DISCPER"]);
                        cmd.Parameters.Add("@DISCA", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCA"]);
                        cmd.Parameters.Add("@VATL", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["VATL"]);

                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = 0;
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = DateTime.Now;
                                cmd.Parameters.Add("@RSRD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSRD_ID"]);
                                cmd.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSR.RSRH_ID;
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
                                cmd.Parameters.Add("@DELETE_ISCNT", SqlDbType.Bit).Value = cls_Library.DBbool(dr["DELETE_ISCNT"]);
                                cmd.Parameters.Add("@RSRD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["RSRD_ID"]);
                                cmd.Parameters.Add("@RSRD_PID", SqlDbType.Int).Value = RSR.RSRH_ID;
                                break;
                        }

                        cmd.ExecuteNonQuery();

                        //PIAK Update IS_UETAX in Detail
                        sb.Clear();
                        sb.AppendLine("UPDATE TSDETAIL WITH (UPDLOCK) SET IS_URSR = 1 WHERE TSD_ID = @TSD_ID and TSD_PID=@TSD_PID");
                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@TSD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSD_ID"]);
                        cmd.Parameters.Add("@TSD_PID", SqlDbType.Int).Value = cls_Library.DBInt(dr["TSH_ID"]);
                        cmd.ExecuteNonQuery();
                    }
                    #endregion


                    ////อัพเดทข้อมูลของใบรับคืน //ZOZO
                    //List<int> listID = dsData.Tables["RSRDETAIL"].AsEnumerable().Where(r => !r.Field<int>("mode").Equals((int)cls_Struct.ActionMode.Delete)).Select(r => r.Field<int>("TSH_ID")).Distinct().ToList();
                    //foreach (int idTS in listID)
                    //{
                    //    //Update IS_UETAX = 1 ของบิลขายใบนั้น
                    //    sb.Clear();
                    //    sb.AppendLine("UPDATE TSHEADER WITH (UPDLOCK) SET IS_URSR = 1 WHERE TSH_ID = @TSH_ID");
                    //    cmd.CommandText = sb.ToString();
                    //    cmd.Parameters.Clear();
                    //    cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = idTS;
                    //    cmd.ExecuteNonQuery();
                    //}

                    tran.Commit();

                    //อัพเดทข้อมูลของใบรับคืน //ZOZO
                    List<int> listID = dsData.Tables["RSRDETAIL"].AsEnumerable().Where(r => !r.Field<int>("mode").Equals((int)cls_Struct.ActionMode.Delete)).Select(r => r.Field<int>("TSH_ID")).Distinct().ToList();
                    foreach (int idTS in listID)
                    {
                        //Update IS_URSR = 1 ของใบรับคืนใบนั้น
                        bool IsAll = cls_Data.CheckClearURSR(idTS);
                        if (IsAll)
                        {
                            sb.Clear();
                            sb.AppendLine("UPDATE TSHEADER WITH (UPDLOCK) SET IS_URSR = 1 WHERE TSH_ID = @TSH_ID");
                            cmd.CommandText = sb.ToString();
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@TSH_ID", SqlDbType.Int).Value = idTS;
                            cmd.ExecuteNonQuery();
                        }
                            
                    }

                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SaveRSR :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                //cls_Global_DB.GB_ItemID = id;
            }
            return ret;
        }

        #endregion

        #region CUS_TAXINV
        public static bool SaveCus_TaxInv(cls_Struct.ActionMode mode, cls_Struct.StructCusTaxInv data)
        {
            bool ret = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    switch (mode)
                    {
                        case cls_Struct.ActionMode.Add:
                        case cls_Struct.ActionMode.Copy:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_CUS_TAXINV WITH (UPDLOCK) (");
                            sb.AppendLine("ADDRESS_CODE,");
                            sb.AppendLine("CUSTOMER_ID,");
                            sb.AppendLine("ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4,");
                            sb.AppendLine("TAX_ID,");
                            sb.AppendLine("BRANCH,");
                            sb.AppendLine("CUSTOMER_NAME,");
                            sb.AppendLine("TEL,");
                            sb.AppendLine("E_MAIL,");
                            sb.AppendLine("FAX,");
                            sb.AppendLine("CONTRACT");
                            sb.AppendLine(") VALUES(");
                            sb.AppendLine("@ADDRESS_CODE,");
                            sb.AppendLine("@CUSTOMER_ID,");
                            sb.AppendLine("@ADDRESS_1,");
                            sb.AppendLine("@ADDRESS_2,");
                            sb.AppendLine("@ADDRESS_3,");
                            sb.AppendLine("@ADDRESS_4,");
                            sb.AppendLine("@TAX_ID,");
                            sb.AppendLine("@BRANCH,");
                            sb.AppendLine("@CUSTOMER_NAME,");
                            sb.AppendLine("@TEL,");
                            sb.AppendLine("@E_MAIL,");
                            sb.AppendLine("@FAX,");
                            sb.AppendLine("@CONTRACT");
                            sb.AppendLine(")");
                            break;
                        case cls_Struct.ActionMode.Edit:
                            sb.Clear();
                            sb.AppendLine("UPDATE M_CUS_TAXINV WITH (UPDLOCK) SET");
                            sb.AppendLine("ADDRESS_CODE = @ADDRESS_CODE,");
                            sb.AppendLine("CUSTOMER_ID = @CUSTOMER_ID,");
                            sb.AppendLine("ADDRESS_1 = @ADDRESS_1,");
                            sb.AppendLine("ADDRESS_2 = @ADDRESS_2,");
                            sb.AppendLine("ADDRESS_3 = @ADDRESS_3,");
                            sb.AppendLine("ADDRESS_4 = @ADDRESS_4,");
                            sb.AppendLine("TAX_ID = @TAX_ID,");
                            sb.AppendLine("BRANCH = @BRANCH,");
                            sb.AppendLine("CUSTOMER_NAME = @CUSTOMER_NAME,");
                            sb.AppendLine("TEL = @TEL,");
                            sb.AppendLine("E_MAIL = @E_MAIL,");
                            sb.AppendLine("FAX = @FAX,");
                            sb.AppendLine("CONTRACT = @CONTRACT");
                            sb.AppendLine("WHERE ADDRESS_ID = @ADDRESS_ID");
                            break;
                    }

                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Transaction = tran;

                    cmd.Parameters.Add("@ADDRESS_CODE", SqlDbType.VarChar, 5).Value = data.ADDRESS_CODE;
                    cmd.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = data.CUSTOMER_ID;

                    cmd.Parameters.Add("@ADDRESS_1", SqlDbType.VarChar, 100).Value = data.ADDRESS_1;
                    cmd.Parameters.Add("@ADDRESS_2", SqlDbType.VarChar, 100).Value = data.ADDRESS_2;
                    cmd.Parameters.Add("@ADDRESS_3", SqlDbType.VarChar, 100).Value = data.ADDRESS_3;
                    cmd.Parameters.Add("@ADDRESS_4", SqlDbType.VarChar, 100).Value = data.ADDRESS_4;

                    cmd.Parameters.Add("@TAX_ID", SqlDbType.VarChar, 50).Value = data.TAX_ID;
                    cmd.Parameters.Add("@BRANCH", SqlDbType.VarChar, 5).Value = data.BRANCH;
                    cmd.Parameters.Add("@CUSTOMER_NAME", SqlDbType.VarChar, 100).Value = data.CUSTOMER_NAME;
                    cmd.Parameters.Add("@TEL", SqlDbType.NVarChar, 50).Value = data.TEL;
                    cmd.Parameters.Add("@E_MAIL", SqlDbType.VarChar, 50).Value = data.E_MAIL;
                    cmd.Parameters.Add("@FAX", SqlDbType.NVarChar, 50).Value = data.FAX;
                    cmd.Parameters.Add("@CONTRACT", SqlDbType.VarChar, 100).Value = data.CONTRACT;

                    if (mode == cls_Struct.ActionMode.Edit)
                        cmd.Parameters.Add("@ADDRESS_ID", SqlDbType.Int).Value = data.ADDRESS_ID;

                    cmd.ExecuteNonQuery();

                    tran.Commit();
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                ret = false;
                XtraMessageBox.Show("SavePS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }
        #endregion

        #region List บิลขายที่จะออกใบกำกับภาษี
        public static DataTable GetListBSToETAX(int CUSid = 0)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select *");
                    sb.AppendLine("From BSHEADER Where DELETED = 0 And IS_ETAX = 1 And IS_UETAX = 0");
                    if (CUSid > 0)
                    {
                        sb.AppendLine("And CUS_ID = @CUS_ID");
                    }
                    sb.AppendLine("Order By BSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (CUSid > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CUSid;
                    }
                    dt = new DataTable("BSHEADER");
                    _dataAdapter.Fill(dt);

                    //sb.Clear();
                    //sb.AppendLine("Select A.* From BSDETAIL A");
                    //sb.AppendLine("INNER JOIN BSHEADER B ON B.BSD_PID = A.BSH_ID");
                    //sb.AppendLine("Where A.DELETED = 0 And A.IS_ETAX = 1 And A.IS_UETAX = 0 And B.DELETED = 0");
                    //sb.AppendLine("Order By B.BSH_NO, A.LIST_NO");

                    //_dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    //_dataAdapter.SelectCommand.Parameters.Clear();
                    //dt = new DataTable("BSDETAIL");
                    //_dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListBSToETAX :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }
        #endregion

        #region List บิลขายที่จะทำใบรับคืนสินค้าตามลูกค้า

        public static DataTable GetListBSToTS(int CusID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select *");
                    sb.AppendLine("From BSHEADER Where DELETED = 0 And CUS_ID = @CUS_ID And (IS_UTS = 0 or IS_UTS is null)");
                    sb.AppendLine("Order By BSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CusID;
                    dt = new DataTable("BSHEADER");
                    _dataAdapter.Fill(dt);

                    //sb.Clear();
                    //sb.AppendLine("Select A.*, B.ITEM_CODE, B.MODEL1, D.BRAND_CODE, D.BRAND_NAME, E.UNIT_CODE, E.UNIT_NAME,H.* From BSDETAIL A");
                    //sb.AppendLine("INNER JOIN BSHEADER H ON H.BSH_ID = A.BSD_PID");
                    //sb.AppendLine("LEFT JOIN M_ITEMS B ON B.ITEM_ID = A.ITEM_ID");
                    //sb.AppendLine("LEFT JOIN M_BRANDS D ON D.BRAND_ID = A.BRAND_ID");
                    //sb.AppendLine("LEFT JOIN M_UNITS E ON E.UNIT_ID = A.UNIT_ID");
                    //sb.AppendLine("Where A.DELETED = 0 And H.CUS_ID = @CUS_ID And (H.IS_UTS = 0 or H.IS_UTS is null) And (IS_CLEAR = 0 or IS_CLEAR is null)");

                    //_dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    //_dataAdapter.SelectCommand.Parameters.Clear();
                    //_dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CusID;
                    //dt = new DataTable("BSDETAIL");
                    //_dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListBSToTS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        #endregion

        #region List รายการใบมัดจำคงค้างตามรหัสลูกค้าที่ระบุในบิลขาย

        public static DataTable GetListPSToBS(int CusID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select * , (NETSUM - DEPOSIT_AMT) AS SUMCUT, ISNULL('',0) AS AMOUNT");
                    sb.AppendLine(" From PSHEADER Where DELETED = 0 And CUS_ID = @CUS_ID And IS_CLEAR = 0");
                    sb.AppendLine(" Order By PSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CusID;
                    dt = new DataTable("PSHEADER");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListPSToBS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        #endregion

        #region List รับคืนที่จะออกใบกำกับภาษีรับคืน
        public static DataTable GetListTSToRSR(int CUSid = 0)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select *");
                    sb.AppendLine("From TSHEADER Where DELETED = 0 And IS_ETAX = 1 and (IS_URSR = 0 or IS_URSR is null)");
                    if (CUSid > 0)
                    {
                        sb.AppendLine("And CUS_ID = @CUS_ID");
                    }
                    sb.AppendLine("Order By TSH_NO");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    if (CUSid > 0)
                    {
                        _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CUSid;
                    }
                    dt = new DataTable("TSHEADER");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListTSToRSR :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }
        #endregion

        #region การชำระเงิน

        #region บัตร

        private static DataTable GetDataCard( ref SqlConnection conn, byte Vtype, int Vid)
        {
            DataTable dtData = new DataTable();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                sb.Clear();
                sb.AppendLine("Select A.*,(CASE WHEN A.CARD_TYPE = 1 THEN 'บัตรเครดิต' WHEN A.CARD_TYPE = 2 THEN 'บัตรเดบิต' WHEN A.CARD_TYPE = 3 THEN 'อื่น ๆ '  END) as CARD_TYPE_NAME, B.CREDITCARD_CODE, B.CREDITCARD_DESCRIPTION From MAP_CARD A");
                sb.AppendLine("INNER JOIN M_CREDITCARDS B ON A.CREDITCARD_ID = B.CREDITCARD_ID");
                sb.AppendLine("Where A.VOUCHER_TYPE = @VOUCHER_TYPE And A.VOUCHER_ID = @VOUCHER_ID Order by A.LIST_NO");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = Vid;
                _dataAdapter.Fill(dtData);
                dtData.TableName = "MAP_CARD";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtData;
        }

        private static void SaveMAP_CARD(byte Vtype,  int id, ref SqlConnection conn, ref SqlTransaction tran, DataTable dt)
        {
            StringBuilder sb = new StringBuilder();
            int irow = 0;
            DataRow dr;
            try
            {
                if (dt.Rows.Count <= 0) return;

                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Transaction = tran;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dt.Rows[i];
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                irow++;
                                sb.AppendLine("INSERT INTO MAP_CARD WITH (UPDLOCK) (");
                                sb.AppendLine("VOUCHER_TYPE,");
                                sb.AppendLine("VOUCHER_ID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("CREDITCARD_ID,");
                                sb.AppendLine("CARD_NO,");
                                sb.AppendLine("CARD_TYPE,");
                                sb.AppendLine("NAME,");
                                sb.AppendLine("AMOUNT");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@VOUCHER_TYPE,");
                                sb.AppendLine("@VOUCHER_ID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@CREDITCARD_ID,");
                                sb.AppendLine("@CARD_NO,");
                                sb.AppendLine("@CARD_TYPE,");
                                sb.AppendLine("@NAME,");
                                sb.AppendLine("@AMOUNT");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE MAP_CARD WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("CREDITCARD_ID = @CREDITCARD_ID,");
                                sb.AppendLine("CARD_NO = @CARD_NO,");
                                sb.AppendLine("CARD_TYPE = @CARD_TYPE,");
                                sb.AppendLine("NAME = @NAME,");
                                sb.AppendLine("AMOUNT = @AMOUNT");
                                sb.AppendLine("WHERE SEQUENSE_NO =@SEQUENSE_NO");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("DELETE From MAP_CARD WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.AppendLine("UPDATE MAP_CARD WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE SEQUENSE_NO = @SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                            cmd.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = id;
                        }
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        cmd.Parameters.Add("@CREDITCARD_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["CREDITCARD_ID"]);
                        cmd.Parameters.Add("@CARD_NO", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CARD_NO"]);
                        cmd.Parameters.Add("@CARD_TYPE", SqlDbType.Int).Value = cls_Library.DBInt(dr["CARD_TYPE"]);
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                            case (int)cls_Struct.ActionMode.Edit:
                                cmd.Parameters.Add("@NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["NAME"]);
                                break;

                        }
                                //cmd.Parameters.Add("@NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["NAME"]);
                                cmd.Parameters.Add("@AMOUNT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["AMOUNT"]);

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit) cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);

                        cmd.ExecuteNonQuery();
                    }
                }                
            }
            catch (Exception)
            {
            }
        }

        #endregion

        #region เงินโอน

        private static DataTable GetDataTRANSFER_PAY(ref SqlConnection conn, byte Vtype, int Vid)
        {
            DataTable dtData = new DataTable();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                sb.Clear();
                sb.AppendLine("Select A.*, B.BANKS_ACCOUNT_CODE, B.BANKS_ACCOUNT_NAME From MAP_TRANSFER_PAY A");
                sb.AppendLine("INNER JOIN M_BANKS_ACCOUNTS B ON A.BANKS_ACCOUNT_ID = B.BANKS_ACCOUNT_ID");
                sb.AppendLine("Where A.VOUCHER_TYPE = @VOUCHER_TYPE And A.VOUCHER_ID = @VOUCHER_ID Order by A.LIST_NO");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = Vid;
                _dataAdapter.Fill(dtData);
                dtData.TableName = "MAP_TRANSFER_PAY";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtData;
        }

        private static void SaveMAP_TRANSFER_PAY(byte Vtype, int id, ref SqlConnection conn, ref SqlTransaction tran, DataTable dt)
        {
            StringBuilder sb = new StringBuilder();
            int irow = 0;
            DataRow dr;
            try
            {
                if (dt.Rows.Count <= 0) return;

                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Transaction = tran;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dt.Rows[i];
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                irow++;
                                sb.AppendLine("INSERT INTO MAP_TRANSFER_PAY WITH (UPDLOCK) (");
                                sb.AppendLine("VOUCHER_TYPE,");
                                sb.AppendLine("VOUCHER_ID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("BANKS_ACCOUNT_ID,");
                                sb.AppendLine("BANK_NO,");
                                sb.AppendLine("NAME,");
                                sb.AppendLine("AMOUNT");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@VOUCHER_TYPE,");
                                sb.AppendLine("@VOUCHER_ID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@BANKS_ACCOUNT_ID,");
                                sb.AppendLine("@BANK_NO,");
                                sb.AppendLine("@NAME,");
                                sb.AppendLine("@AMOUNT");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE MAP_TRANSFER_PAY WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("BANKS_ACCOUNT_ID = @BANKS_ACCOUNT_ID,");
                                sb.AppendLine("BANK_NO = @BANK_NO,");
                                sb.AppendLine("NAME = @NAME,");
                                sb.AppendLine("AMOUNT = @AMOUNT");
                                sb.AppendLine("WHERE SEQUENSE_NO =@SEQUENSE_NO");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("DELETE From MAP_TRANSFER_PAY WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.AppendLine("UPDATE MAP_TRANSFER_PAY WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE SEQUENSE_NO = @SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                            cmd.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = id;
                        }
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        cmd.Parameters.Add("@BANKS_ACCOUNT_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BANKS_ACCOUNT_ID"]);
                        cmd.Parameters.Add("@BANK_NO", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["BANK_NO"]);
                        cmd.Parameters.Add("@NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["NAME"]);
                        cmd.Parameters.Add("@AMOUNT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["AMOUNT"]);

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit) cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        #endregion

        #region เช็ค
        private static DataTable GetDataCHEQUE(ref SqlConnection conn, byte Vtype, int Vid)
        {
            DataTable dtData = new DataTable();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                sb.Clear();
                sb.AppendLine("Select * From MAP_CHEQUE");
                sb.AppendLine("Where VOUCHER_TYPE = @VOUCHER_TYPE And VOUCHER_ID = @VOUCHER_ID Order by LIST_NO");
                //ZOZO
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = Vid;
                _dataAdapter.Fill(dtData);
                dtData.TableName = "MAP_CHEQUE";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtData;
        }

        private static void SaveMAP_CHEQUE(byte Vtype, int id, ref SqlConnection conn, ref SqlTransaction tran, DataTable dt)
        {
            StringBuilder sb = new StringBuilder();
            int irow = 0;
            DataRow dr;
            try
            {
                if (dt.Rows.Count <= 0) return;

                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Transaction = tran;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dt.Rows[i];
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                irow++;
                                sb.AppendLine("INSERT INTO MAP_CHEQUE WITH (UPDLOCK) (");
                                sb.AppendLine("VOUCHER_TYPE,");
                                sb.AppendLine("VOUCHER_ID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("CHEQUE_ID,");
                                sb.AppendLine("BANK_ID,");
                                sb.AppendLine("CHEQUE_NO,");
                                sb.AppendLine("CHEQUE_DATE,");
                                sb.AppendLine("CHEQUE_NAME,");
                                sb.AppendLine("AMOUNT");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@VOUCHER_TYPE,");
                                sb.AppendLine("@VOUCHER_ID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@CHEQUE_ID,");
                                sb.AppendLine("@BANK_ID,");
                                sb.AppendLine("@CHEQUE_NO,");
                                sb.AppendLine("@CHEQUE_DATE,");
                                sb.AppendLine("@CHEQUE_NAME,");
                                sb.AppendLine("@AMOUNT");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE MAP_CHEQUE WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("CHEQUE_ID = @CHEQUE_ID,");
                                sb.AppendLine("BANK_ID = @BANK_ID,");
                                sb.AppendLine("CHEQUE_NO = @CHEQUE_NO,");
                                sb.AppendLine("CHEQUE_DATE = @CHEQUE_DATE,");
                                sb.AppendLine("CHEQUE_NAME = @CHEQUE_NAME,");
                                sb.AppendLine("AMOUNT = @AMOUNT");
                                sb.AppendLine("WHERE SEQUENSE_NO =@SEQUENSE_NO");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("DELETE From MAP_CHEQUE WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.AppendLine("UPDATE MAP_CHEQUE WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE SEQUENSE_NO = @SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                            cmd.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = id;
                        }
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        cmd.Parameters.Add("@CHEQUE_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["CHEQUE_ID"]);
                        cmd.Parameters.Add("@BANK_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["BANK_ID"]);
                        cmd.Parameters.Add("@CHEQUE_NO", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["CHEQUE_NO"]);
                        if ((cls_Library.DBDateTime(dr["CHEQUE_DATE"]) == DateTime.MinValue) || (cls_Library.DBDateTime(dr["CHEQUE_DATE"]) == DateTime.MaxValue))
                            cmd.Parameters.Add("@CHEQUE_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                        else
                            cmd.Parameters.Add("@CHEQUE_DATE", SqlDbType.DateTime).Value = cls_Library.DBDateTime(dr["CHEQUE_DATE"]);
                        cmd.Parameters.Add("@CHEQUE_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["CHEQUE_NAME"]);
                        cmd.Parameters.Add("@AMOUNT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["AMOUNT"]);

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit) cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        #endregion

        #region อื่นๆ        
        private static DataTable GetDataOTHER(ref SqlConnection conn, byte Vtype, int Vid)
        {
            DataTable dtData = new DataTable();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                sb.Clear();
                sb.AppendLine("Select * From MAP_OTHER");
                sb.AppendLine("Where VOUCHER_TYPE = @VOUCHER_TYPE And VOUCHER_ID = @VOUCHER_ID Order by LIST_NO");
                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                _dataAdapter.SelectCommand.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = Vid;
                _dataAdapter.Fill(dtData);
                dtData.TableName = "MAP_OTHER";
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtData;
        }

        private static void SaveMAP_OTHER(byte Vtype, int id, ref SqlConnection conn, ref SqlTransaction tran, DataTable dt)
        {
            StringBuilder sb = new StringBuilder();
            int irow = 0;
            DataRow dr;
            try
            {
                if (dt.Rows.Count <= 0) return;

                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Transaction = tran;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sb.Clear();
                        dr = dt.Rows[i];
                        switch (cls_Library.DBInt(dr["mode"]))
                        {
                            case (int)cls_Struct.ActionMode.Add:
                            case (int)cls_Struct.ActionMode.Copy:
                                irow++;
                                sb.AppendLine("INSERT INTO MAP_OTHER WITH (UPDLOCK) (");
                                sb.AppendLine("VOUCHER_TYPE,");
                                sb.AppendLine("VOUCHER_ID,");
                                sb.AppendLine("LIST_NO,");
                                sb.AppendLine("DESCRIPTION,");
                                //sb.AppendLine("NAME,");
                                sb.AppendLine("AMOUNT");
                                sb.AppendLine(") VALUES (");
                                sb.AppendLine("@VOUCHER_TYPE,");
                                sb.AppendLine("@VOUCHER_ID,");
                                sb.AppendLine("@LIST_NO,");
                                sb.AppendLine("@DESCRIPTION,");
                                //sb.AppendLine("@NAME,");
                                sb.AppendLine("@AMOUNT");
                                sb.AppendLine(")");
                                break;
                            case (int)cls_Struct.ActionMode.Edit:
                                irow++;
                                sb.AppendLine("UPDATE MAP_OTHER WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO,");
                                sb.AppendLine("DESCRIPTION = @DESCRIPTION,");
                                //sb.AppendLine("NAME = @NAME,");
                                sb.AppendLine("AMOUNT = @AMOUNT");
                                sb.AppendLine("WHERE SEQUENSE_NO =@SEQUENSE_NO");
                                break;
                            case (int)cls_Struct.ActionMode.Delete:
                                sb.AppendLine("DELETE From MAP_OTHER WHERE SEQUENSE_NO=@SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                            case (int)cls_Struct.ActionMode.Default:
                                irow++;
                                sb.AppendLine("UPDATE MAP_OTHER WITH (UPDLOCK) SET ");
                                sb.AppendLine("LIST_NO = @LIST_NO");
                                sb.AppendLine("WHERE SEQUENSE_NO = @SEQUENSE_NO");

                                cmd.CommandText = sb.ToString();
                                cmd.Parameters.Clear();
                                cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                                cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                                cmd.ExecuteNonQuery();
                                continue;
                        }

                        cmd.CommandText = sb.ToString();
                        cmd.Parameters.Clear();

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Add)
                        {
                            cmd.Parameters.Add("@VOUCHER_TYPE", SqlDbType.TinyInt).Value = Vtype;
                            cmd.Parameters.Add("@VOUCHER_ID", SqlDbType.Int).Value = id;
                        }
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.Int).Value = irow;
                        cmd.Parameters.Add("@DESCRIPTION", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["DESCRIPTION"]);
                        //cmd.Parameters.Add("@NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["NAME"]);
                        cmd.Parameters.Add("@AMOUNT", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["AMOUNT"]);

                        if (cls_Library.DBInt(dr["mode"]) == (int)cls_Struct.ActionMode.Edit) cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        #endregion

        #endregion

        private static DataTable GetBalanceQtyBS(int id, int pid)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            double balance = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select QTY, QTYCUT, IS_CLEAR");
                    sb.AppendLine(" From BSDETAIL Where BSD_ID = @BSD_ID And BSD_PID = @BSD_PID");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@BSD_ID", SqlDbType.Int).Value = id;
                    _dataAdapter.SelectCommand.Parameters.Add("@BSD_PID", SqlDbType.Int).Value = pid;
                    dt = new DataTable("BSDETAIL");
                    _dataAdapter.Fill(dt);
                    //balance = cls_Library.DBDecimal(dt.Rows[0]["QTYCUT"]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetListPSToBS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        public static DataTable GetAddress(int CusId, int type = 0)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    if (type ==1)
                    {
                        sb.AppendLine("Select *,CONCAT(ADDRESS_CODE, '   ', CUSTOMER_NAME) AS ADDRESSNAME From M_CUS_TAXINV Where CUSTOMER_ID = @CUSTOMER_ID");
                    }
                    else
                    {
                        sb.AppendLine("Select ADDRESS_ID, ADDRESS_CODE,CONCAT(ADDRESS_CODE, '   ', CUSTOMER_NAME) AS ADDRESSNAME From M_CUS_TAXINV Where CUSTOMER_ID = @CUSTOMER_ID");
                    }                                        

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@CUSTOMER_ID", SqlDbType.Int).Value = CusId;
                    dt = new DataTable("M_CUS_TAXINV");
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetAddress :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }

            return dt;
        }

        private static decimal GetDepositPS(int ID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal balance = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select DEPOSIT_AMT");
                    sb.AppendLine(" From PSHEADER Where PSH_ID = @PSH_ID");          

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = ID;
                    dt = new DataTable("PSHEADER");
                    _dataAdapter.Fill(dt);
                    balance = cls_Library.DBDecimal(dt.Rows[0]["DEPOSIT_AMT"]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetDepositPS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return balance;
        }

        private static decimal GetBalancePS(int ID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal balance = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select SUM_AMT");
                    sb.AppendLine(" From PSHEADER Where PSH_ID = @PSH_ID");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@PSH_ID", SqlDbType.Int).Value = ID;
                    dt = new DataTable("PSHEADER");
                    _dataAdapter.Fill(dt);
                    balance = cls_Library.DBDecimal(dt.Rows[0]["SUM_AMT"]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetBalancePS :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return balance;
        }

        public static int GetItemID(string Code)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int Id = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select ITEM_ID");
                    sb.AppendLine(" From M_ITEMS Where ITEM_CODE = @ITEM_CODE");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_CODE", SqlDbType.Char, 8).Value = Code;
                    dt = new DataTable("PSHEADER");
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Id = cls_Library.DBInt(dt.Rows[0]["ITEM_ID"]);
                    }          
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetItemID :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Id;
        }

        public static DataTable GetItemSaleHistory(int CusId, int ItemId)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.Clear();
                    sb.AppendLine("Select TOP 10 A.UPRICE, A.QTY, A.CONV, B.BSH_DATE From BSDETAIL A");
                    sb.AppendLine("INNER JOIN BSHEADER B ON A.BSD_PID = B.BSH_ID");
                    sb.AppendLine("Where B.CUS_ID = @CUS_ID And A.ITEM_ID = @ITEM_ID");
                    sb.AppendLine("Order By BSH_DATE DESC");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@CUS_ID", SqlDbType.Int).Value = CusId;
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemId;
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("GetItemSaleHistory :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        #endregion

        #endregion

        #region PIAK
        public static bool DeleteBank(int id)
        {
        bool ok = false;
        SqlConnection cn = new SqlConnection();
        SqlCommand cmd;
        string sql = string.Empty;
        SqlTransaction tran;
        string tf = string.Empty;
        DateTime DT;

        cls_Global_DB.ConnectDatabase(ref cn);

        tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

        try
        {
        DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
        cmd = new SqlCommand();
        cmd.Connection = cn;
        //Voucher
        sql = "Update M_BANKS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where BANK_ID=@BANK_ID";
        cmd.CommandText = sql;
        cmd.CommandTimeout = 60;
        cmd.CommandType = CommandType.Text;
        cmd.Parameters.Clear();
        cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
        cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
        cmd.Parameters.Add("@BANK_ID", SqlDbType.Int, 4).Value = id;
        cmd.Transaction = tran;
        cmd.ExecuteNonQuery();
        ok = true;
        tran.Commit();
        }
        catch
        {
        tran.Rollback();
        ok = false;
        }
        finally
        {
        cls_Global_DB.CloseDB(ref cn);
        }
        return ok;
        }

        public static bool DeleteBankAccount(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_BANKS_ACCOUNTS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where BANKS_ACCOUNT_ID=@BANKS_ACCOUNT_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@BANKS_ACCOUNT_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteBrand(int Brandid)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("Delete From M_BRANDS WHERE BRAND_ID=@BRAND_ID");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = Brandid;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //ส่วนลดขาย
                sb.Clear();
                sb.AppendLine("Delete From D_BRAND_SALE_DISCOUNT_STEPS WHERE BRAND_ID=@BRAND_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = Brandid;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //ส่วนลดซื้อ
                sb.Clear();
                sb.AppendLine("Delete From D_BRAND_REFERENCE_DISCOUNTS WHERE BRAND_ID=@BRAND_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = Brandid;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeleteBuying(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_BUYING_TYPES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where BUYING_TYPE_ID=@BUYING_TYPE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@BUYING_TYPE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteCategory(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_CATEGORIES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where CATEGORY_ID=@CATEGORY_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@CATEGORY_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteContact(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_CONTACTS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where CONTACT_ID=@CONTACT_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@CONTACT_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteComplementary(int id)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("Delete From M_COMPLEMENTARIES WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสกลุ่มสินค้าเฉพาะใช้ด้วยกัน 1 
                sb.Clear();
                sb.AppendLine("Delete From D_COMPLEMENTARY_SUB1 WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสกลุ่มสินค้าเฉพาะใช้ด้วยกัน 2 
                sb.Clear();
                sb.AppendLine("Delete From D_COMPLEMENTARY_SUB2 WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสกลุ่มสินค้าเฉพาะใช้ด้วยกัน 3 
                sb.Clear();
                sb.AppendLine("Delete From D_COMPLEMENTARY_SUB3 WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสสินค้า
                sb.Clear();
                sb.AppendLine("Delete From D_COMPLEMENTARY_ITEMS WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeleteComplementarySub1(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_COMPLEMENTARIES_SUB1 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteComplementarySub2(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_COMPLEMENTARIES_SUB2 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteComplementarySub3(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_COMPLEMENTARIES_SUB3 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteCreditcard(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_CREDITCARDS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where CREDITCARD_ID=@CREDITCARD_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@CREDITCARD_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteDocument(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_DOCUMENTS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where DOCUMENT_ID=@DOCUMENT_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@DOCUMENT_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteEmployee(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_EMPLOYEES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where EMPLOYEE_ID=@EMPLOYEE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@EMPLOYEE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteItemSpecial(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = cn.CreateCommand();
            SqlDataAdapter da = null;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            DateTime DT;
            DataTable dt = new DataTable("M_ITEMS_SPECIALS");

            //int Stockid = 0;
            cls_Global_DB.ConnectDatabase(ref cn);
            cls_Global_DB.ConnectDatabase(ref conn);

            SqlDataAdapter da1 = null;
            DataTable dtSubdata = new DataTable("D_ITEMS_SPECIALS_SUB");

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            int Count = 0;
            int[] ITEMS_SUB_ID = new int[0];
            int[] Job_id = new int[0];
      

            try
            {
            //Xdate = DateTime.Now.ToShortDateString;
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            ok = true;

            sql = "Select ITEMS_SUB_ID,ITEMS_SPECIAL_ID From D_ITEMS_SPECIALS_SUB where ITEMS_SPECIAL_ID=@ITEMS_SPECIAL_ID";
            da = new SqlDataAdapter(sql, conn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int, 4).Value = id;
            dt = new DataTable("D_ITEMS_SPECIALS_SUB");
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                Count += 1;
                Array.Resize(ref ITEMS_SUB_ID, Count);
                ITEMS_SUB_ID[Count - 1] = cls_Library.DBInt(dt.Rows[i]["ITEMS_SUB_ID"]);
                }
            }

            //D_ITEMS_SPECIALS_ITEMS
            for (int i = 0; i < Count; i++)
            {
                sql = "Update D_ITEMS_SPECIALS_ITEMS WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE where ITEMS_SUB_ID=@ITEMS_SUB_ID ";
                cmd = new SqlCommand();
                cmd.CommandText = sql;
                cmd.Connection = cn;
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@ITEMS_SUB_ID", SqlDbType.Int, 4).Value = ITEMS_SUB_ID[i];
                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
            }

            //D_ITEMS_SPECIALS_SUB
            sql = "Update D_ITEMS_SPECIALS_SUB WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where ITEMS_SPECIAL_ID=@ITEMS_SPECIAL_ID";
            cmd = new SqlCommand();
            cmd.Connection = cn;
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int, 4).Value = id;
            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();

            //M_ITEMS_SPECIALS
            sql = "Update M_ITEMS_SPECIALS WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where ITEMS_SPECIAL_ID=@ITEMS_SPECIAL_ID";
            cmd = new SqlCommand();
            cmd.Connection = cn;
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int, 4).Value = id;
            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static bool DeleteItemSpecialSub1(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_ITEMS_SPECIALS_SUB1 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteItemSpecialSub2(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_ITEMS_SPECIALS_SUB2 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteLogisticCompany(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_LOGISTIC_COMPANIES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where LOGISTIC_ID=@LOGISTIC_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@LOGISTIC_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteJobType(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_JOB_TYPES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where JOB_TYPE_ID=@JOB_TYPE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@JOB_TYPE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteModel(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_MODELS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where MODEL_ID=@MODEL_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@MODEL_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeletePackageType(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_PACKAGE_TYPES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where PACKAGE_TYPE_ID=@PACKAGE_TYPE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@PACKAGE_TYPE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeletePersonal(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_PERSONALS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where PERSONAL_ID=@PERSONAL_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@PERSONAL_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeletePOGroups(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_PO_GROUPS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where PO_GROUP_ID=@PO_GROUP_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@PO_GROUP_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteReturnReason(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_RETURN_REASONS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where RETURN_REASON_ID=@RETURN_REASON_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@RETURN_REASON_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteSize(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_SIZES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SIZE_ID=@SIZE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SIZE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteSpecial(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_SPECIALS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SPECIAL_ID=@SPECIAL_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SPECIAL_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteSubstitute(int id)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("Delete From M_SUBSTITUTES WHERE SUBSTITUTE_ID=@SUBSTITUTE_ID");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสกลุ่มสินค้าเฉพาะใช้ด้วยกัน 1 
                sb.Clear();
                sb.AppendLine("Delete From D_SUBSTITUTE_SUB1 WHERE SUBSTITUTE_ID=@SUBSTITUTE_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสกลุ่มสินค้าเฉพาะใช้ด้วยกัน 2 
                sb.Clear();
                sb.AppendLine("Delete From D_SUBSTITUTE_SUB2 WHERE SUBSTITUTE_ID=@SUBSTITUTE_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                //รหัสสินค้า
                sb.Clear();
                sb.AppendLine("Delete From D_SUBSTITUTE_ITEMS WHERE SUBSTITUTE_ID=@SUBSTITUTE_ID");

                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            throw ex;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool DeleteSubstituteSub1(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_SUBSTITUTES_SUB1 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteSubstituteSub2(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_SUBSTITUTES_SUB2 WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where SUB_ID=@SUB_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@SUB_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteTransport(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_TRANSPORTS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where TRANSPORT_ID=@TRANSPORT_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@TRANSPORT_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteType(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_TYPES WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where TYPE_ID=@TYPE_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@TYPE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteUnit(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlCommand cmd;
            string sql = string.Empty;
            SqlTransaction tran;
            string tf = string.Empty;
            DateTime DT;

            cls_Global_DB.ConnectDatabase(ref cn);

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            try
            {
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());
            cmd = new SqlCommand();
            cmd.Connection = cn;
            //Voucher
            sql = "Update M_UNITS WITH (UPDLOCK) set DELETED=1,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where UNIT_ID=@UNIT_ID";
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Parameters.Add("@UNIT_ID", SqlDbType.Int, 4).Value = id;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            ok = true;
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return ok;
        }

        public static bool DeleteVersatile(int id)
        {
            bool ok = false;
            SqlConnection cn = new SqlConnection();
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = cn.CreateCommand();
            SqlDataAdapter da = null;
            SqlDataReader rd = null;
            string sql = string.Empty;
            SqlTransaction tran;
            DateTime DT;
            DataTable dt = new DataTable("M_VERSATILES");

            //int Stockid = 0;
            cls_Global_DB.ConnectDatabase(ref cn);
            cls_Global_DB.ConnectDatabase(ref conn);

            SqlDataAdapter da1 = null;
            DataTable dtSubdata = new DataTable("M_VERSATILES_SUB");

            tran = cn.BeginTransaction(IsolationLevel.ReadCommitted);

            int Count = 0;
            int[] SUB_ID = new int[0];


            try
            {
            //Xdate = DateTime.Now.ToShortDateString;
            DT = Convert.ToDateTime(cls_Global_class.GetDateCulture(DateTime.Now).ToShortDateString());

            ok = true;

            sql = "Select SUB_ID,VERSATILE_ID From M_VERSATILES_SUB where VERSATILE_ID=@VERSATILE_ID order by LIST_NO";
            da = new SqlDataAdapter(sql, conn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("@VERSATILE_ID", SqlDbType.Int, 4).Value = id;
            dt = new DataTable("M_VERSATILES_SUB");
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                Count += 1;
                Array.Resize(ref SUB_ID, Count);
                SUB_ID[Count - 1] = cls_Library.DBInt(dt.Rows[i]["SUB_ID"]);
                }
            }

            //M_VERSATILES_ITEM
            for (int i = 0; i < Count; i++)
            {
                sql = "Update M_VERSATILES_ITEM WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE where VERSATILE_SUB_ID=@VERSATILE_SUB_ID ";
                cmd = new SqlCommand();
                cmd.CommandText = sql;
                cmd.Connection = cn;
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@VERSATILE_SUB_ID", SqlDbType.Int, 4).Value = SUB_ID[i];
                cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
                cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
                cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();
            }

            //M_VERSATILES_SUB
            sql = "Update M_VERSATILES_SUB WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where VERSATILE_ID=@VERSATILE_ID";
            cmd = new SqlCommand();
            cmd.Connection = cn;
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();

            //M_VERSATILES
            sql = "Update M_VERSATILES WITH (UPDLOCK) set DELETED=@DELETED,DELETE_BY=@DELETE_BY,DELETE_DATE=@DELETE_DATE Where VERSATILE_ID=@VERSATILE_ID";
            cmd = new SqlCommand();
            cmd.Connection = cn;
            cmd.CommandText = sql;
            cmd.CommandTimeout = 60;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.Clear();
            cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int, 4).Value = id;
            cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = true;
            cmd.Parameters.Add("@DELETE_BY", SqlDbType.Int, 4).Value = cls_Global_class.GB_Userid;
            cmd.Parameters.Add("@DELETE_DATE", SqlDbType.DateTime).Value = DT;
            cmd.Transaction = tran;
            cmd.ExecuteNonQuery();
            tran.Commit();
            }
            catch
            {
            tran.Rollback();
            ok = false;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }

            return ok;
        }

        public static DataSet GetListBanks()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BANKS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_BANKS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBanks :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListBanksByID(int BankID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BANKS Where BANK_ID=@BankID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@BankID", SqlDbType.Int).Value = BankID;
                _dataAdapter.Fill(dsResult, "M_BANKS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBanksByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_BANKS"].Copy();
        }

        public static DataSet GetListBankAccounts()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BANKS_ACCOUNTS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_BANKS_ACCOUNTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBankAccounts :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListBanksAccountByID(int BankID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BANKS_ACCOUNTS Where BANKS_ACCOUNT_ID=@BankID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@BankID", SqlDbType.Int).Value = BankID;
                _dataAdapter.Fill(dsResult, "M_BANKS_ACCOUNTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBanksAccountByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_BANKS_ACCOUNTS"].Copy();
        }

        public static DataTable GetListBanksForLookUp()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("select BANK_ID AS _id, ABBREVIATE_NAME AS code, FULL_NAME AS name from M_BANKS Where DELETED=0 order by ABBREVIATE_NAME");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_BANKS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBanks :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_BANKS"].Copy();
        }

        public static DataSet GetListBrands()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BRANDS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_BRANDS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBrands :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetListBrandsById(int BrandID)
        {
            DataSet dsResult = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";

            try
            {
            //ยี่ห้อสินค้า
            sqltex = string.Format("Select A.* From M_BRANDS A Where A.BRAND_ID = {0}", BrandID);
            LoadSpecifyData(sqltex, out dt, "M_BRANDS");
            dsResult.Tables.Add(dt);

            //ส่วนลดขาย
            sqltex = string.Format("Select A.* From D_BRAND_SALE_DISCOUNT_STEPS A Where A.BRAND_ID = {0}", BrandID);
            LoadSpecifyData(sqltex, out dt, "D_BRAND_SALE_DISCOUNT_STEPS");
            dsResult.Tables.Add(dt);

            //ส่วนลดซื้อ
            sqltex = string.Format("Select A.*,case A.VAT_STATUS when 1 then 'Vat นอก' when 2 then 'Vat ใน' Else 'ไม่มี Vat' End as _VAT_STATUS From D_BRAND_REFERENCE_DISCOUNTS A Where A.BRAND_ID = {0}", BrandID);
            LoadSpecifyData(sqltex, out dt, "D_BRAND_REFERENCE_DISCOUNTS");
            dsResult.Tables.Add(dt);

            //ลูกค้าที่ได้รับส่วนลด
            sqltex = string.Format("SELECT A.CUSTOMER_ID, A.BRAND_ID, C.CUSTOMER_CODE, C.CUSTOMER_NAME,CAST(A.DISCOUNT_RATE_STEP1 AS Varchar) + ',' + CAST(A.DISCOUNT_RATE_STEP2 AS Varchar) + ',' + CAST(A.DISCOUNT_RATE_STEP3 AS Varchar) + ',' + CAST(A.DISCOUNT_RATE_STEP4 AS Varchar) AS DISCOUNT_RATE, C.SALE_ENABLED_STATUS FROM D_CUSTOMER_BRAND_DISCOUNT_STEPS A LEFT JOIN M_BRANDS B ON A.BRAND_ID = B.BRAND_ID LEFT JOIN M_CUSTOMERS C ON A.CUSTOMER_ID = C.CUSTOMER_ID  Where A.BRAND_ID = {0}", BrandID);
            LoadSpecifyData(sqltex, out dt, "D_DISCOUNT_RATE");
            dsResult.Tables.Add(dt);

            }
            catch (Exception ex)
            {
            XtraMessageBox.Show("GetListBrandsById :" + ex.Message);
            }
            return dsResult;
        }

        public static DataSet GetListBuyingType()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BUYING_TYPES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_BUYING_TYPES");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBuyingType :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListBuyingTypeByID(int BuyingID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_BUYING_TYPES Where BUYING_TYPE_ID=@BuyingID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@BuyingID", SqlDbType.Int).Value = BuyingID;
                _dataAdapter.Fill(dsResult, "M_BUYING_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListBuyingTypeByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_BUYING_TYPES"].Copy();
        }

        public static DataSet GetListContacts()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_CONTACTS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_CONTACTS");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListContacts :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListContactsByID(int ContactID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_CONTACTS Where CONTACT_ID=@ContactID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ContactID", SqlDbType.Int).Value = ContactID;
                _dataAdapter.Fill(dsResult, "M_CONTACTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListContactsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_CONTACTS"].Copy();
        }

        public static DataSet GetListCategories()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_CATEGORIES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_CATEGORIES");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListCATEGORIES :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListCategoriesByID(int CategoryID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_CATEGORIES Where CATEGORY_ID=@CategoryID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@CategoryID", SqlDbType.Int).Value = CategoryID;
                _dataAdapter.Fill(dsResult, "M_CATEGORIES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListCATEGORIES :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_CATEGORIES"].Copy();
        }

        public static DataSet GetListComplementarys()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarys :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetListComplementarysById(int CompID)
        {
            DataSet dsResult = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";

            try
            {
            //กลุ่มสินค้าเฉพาะ
            sqltex = string.Format("Select A.* From M_COMPLEMENTARIES A Where A.COMPLEMENTARY_ID = {0}", CompID);
            LoadSpecifyData(sqltex, out dt, "M_COMPLEMENTARIES");
            dsResult.Tables.Add(dt);

            //สินค้าเฉพาะ 1
            sqltex = string.Format("Select A.* From D_COMPLEMENTARY_SUB1 A Where A.COMPLEMENTARY_ID = {0} order by A.LIST_NO", CompID);
            LoadSpecifyData(sqltex, out dt, "D_COMPLEMENTARY_SUB1");
            dsResult.Tables.Add(dt);

            //สินค้าเฉพาะ 2
            sqltex = string.Format("Select A.* From D_COMPLEMENTARY_SUB2 A Where A.COMPLEMENTARY_ID = {0} order by A.LIST_NO", CompID);
            LoadSpecifyData(sqltex, out dt, "D_COMPLEMENTARY_SUB2");
            dsResult.Tables.Add(dt);

            //สินค้าเฉพาะ 3
            sqltex = string.Format("Select A.* From D_COMPLEMENTARY_SUB3 A Where A.COMPLEMENTARY_ID = {0} order by A.LIST_NO", CompID);
            LoadSpecifyData(sqltex, out dt, "D_COMPLEMENTARY_SUB3");
            dsResult.Tables.Add(dt);

            //รหัสสินค้า
            sqltex = string.Format("Select A.* From D_COMPLEMENTARY_ITEMS A  Left Join M_COMPLEMENTARIES B on A.COMPLEMENTARY_ID = B.COMPLEMENTARY_ID Where A.COMPLEMENTARY_ID = {0} order by A.LIST_NO", CompID);
            LoadSpecifyData(sqltex, out dt, "D_COMPLEMENTARY_ITEMS");
            dsResult.Tables.Add(dt);

            }
            catch (Exception ex)
            {
            XtraMessageBox.Show("GetListComplementarysById :" + ex.Message);
            }
            return dsResult;
        }

        public static DataSet GetListComplementarysSub1()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB1 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub1 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListComplementarysSub1ByID(int CompID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB1 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = CompID;
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub1ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_COMPLEMENTARIES_SUB1"].Copy();
        }

        public static DataSet GetListComplementarysSub2()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB2 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub2 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListComplementarysSub2ByID(int CompID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB2 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = CompID;
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub2ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_COMPLEMENTARIES_SUB2"].Copy();
        }

        public static DataSet GetListComplementarysSub3()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB3 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB3");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub3 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListComplementarysSub3ByID(int CompID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_COMPLEMENTARIES_SUB3 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = CompID;
                _dataAdapter.Fill(dsResult, "M_COMPLEMENTARIES_SUB3");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub3ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_COMPLEMENTARIES_SUB3"].Copy();
        }

        public static DataSet GetListCreditcards()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.CREDITCARD_ID,A.BANK_ID,");
                sb.AppendLine("A.CREDITCARD_CODE,A.CREDITCARD_DESCRIPTION,");
                sb.AppendLine("B.ABBREVIATE_NAME, B.FULL_NAME From M_CREDITCARDS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID Where A.DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_CREDITCARDS");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListCreditcards :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListCreditcardsByID(int CreditcardID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select A.CREDITCARD_ID,A.BANK_ID,");
                sb.AppendLine("A.CREDITCARD_CODE,A.CREDITCARD_DESCRIPTION,");
                sb.AppendLine("B.ABBREVIATE_NAME, B.FULL_NAME From M_CREDITCARDS A INNER JOIN M_BANKS B ON A.BANK_ID = B.BANK_ID Where A.CREDITCARD_ID=@CreditcardID and A.DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@CreditcardID", SqlDbType.Int).Value = CreditcardID;
                _dataAdapter.Fill(dsResult, "M_CREDITCARDS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListCreditcardsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_CREDITCARDS"].Copy();
        }

        public static DataSet GetListLogisticCompany()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_LOGISTIC_COMPANIES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_LOGISTIC_COMPANIES");


            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListLogisticCompany :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListLogisticCompanyByID(int LogisticID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_LOGISTIC_COMPANIES Where LOGISTIC_ID=@LogisticID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@LogisticID", SqlDbType.Int).Value = LogisticID;
                _dataAdapter.Fill(dsResult, "M_LOGISTIC_COMPANIES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListLogisticCompanyByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_LOGISTIC_COMPANIES"].Copy();
        }

        public static DataSet GetListDocuments()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_DOCUMENTS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_DOCUMENTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListDocuments :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListDocumentsByID(int DocumentID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_DOCUMENTS Where DOCUMENT_ID=@DocumentID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@DocumentID", SqlDbType.Int).Value = DocumentID;
                _dataAdapter.Fill(dsResult, "M_DOCUMENTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListDocumentsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_DOCUMENTS"].Copy();
        }

        public static DataSet GetListEmployees()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_EMPLOYEES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_EMPLOYEES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListEmployees :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListEmployeesByID(int EmployeeID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_EMPLOYEES Where EMPLOYEE_ID=@EmployeeID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@EmployeeID", SqlDbType.Int).Value = EmployeeID;
                _dataAdapter.Fill(dsResult, "M_EMPLOYEES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListEmployeesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_EMPLOYEES"].Copy();
        }

        public static DataSet GetListItemSpecials()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_ITEMS_SPECIALS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_ITEMS_SPECIALS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListItemSpecials :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetListItemSpecialsSub1()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_ITEMS_SPECIALS_SUB1 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_ITEMS_SPECIALS_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListItemSpecialsSub1 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListItemSpecialsSub1ByID(int SubID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_ITEMS_SPECIALS_SUB1 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = SubID;
                _dataAdapter.Fill(dsResult, "M_ITEMS_SPECIALS_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListItemSpecialsSub1ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_ITEMS_SPECIALS_SUB1"].Copy();
        }

        public static DataSet GetListItemSpecialsSub2()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_ITEMS_SPECIALS_SUB2 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_ITEMS_SPECIALS_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListItemSpecialsSub2 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListItemSpecialsSub2ByID(int SubID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_ITEMS_SPECIALS_SUB2 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = SubID;
                _dataAdapter.Fill(dsResult, "M_ITEMS_SPECIALS_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListItemSpecialsSub2ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_ITEMS_SPECIALS_SUB2"].Copy();
        }

        public static DataSet GetListJobTypes()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_JOB_TYPES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_JOB_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListJobType :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListJobTypesByID(int JobTypeID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_JOB_TYPES Where JOB_TYPE_ID=@JobTypeID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@JobTypeID", SqlDbType.Int).Value = JobTypeID;
                _dataAdapter.Fill(dsResult, "M_JOB_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListJobTypesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_JOB_TYPES"].Copy();
        }

        public static DataSet GetListModels()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_MODELS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_MODELS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListModels :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListModelsByID(int ModelID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_MODELS Where MODEL_ID=@ModelID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ModelID", SqlDbType.Int).Value = ModelID;
                _dataAdapter.Fill(dsResult, "M_MODELS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListModels :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_MODELS"].Copy();
        }

        public static DataSet GetListPackageTypes()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PACKAGE_TYPES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_PACKAGE_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPackageTypes :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListPackageTypesByID(int PackageTypeID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PACKAGE_TYPES Where PACKAGE_TYPE_ID=@PackageTypeID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@PackageTypeID", SqlDbType.Int).Value = PackageTypeID;
                _dataAdapter.Fill(dsResult, "M_PACKAGE_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPackageTypesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_PACKAGE_TYPES"].Copy();
        }

        public static DataSet GetListPersonals()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PERSONALS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_PERSONALS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPersonals :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListPersonalsByID(int PersonalID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PERSONALS Where PERSONAL_ID=@PersonalID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@PersonalID", SqlDbType.Int).Value = PersonalID;
                _dataAdapter.Fill(dsResult, "M_PERSONALS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPersonalsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_PERSONALS"].Copy();
        }

        public static DataSet GetListPOGroups()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PO_GROUPS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_PO_GROUPS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPOGroups :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListPOGroupsByID(int POGroupsID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PO_GROUPS Where PO_GROUP_ID=@POGroupsID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@POGroupsID", SqlDbType.Int).Value = POGroupsID;
                _dataAdapter.Fill(dsResult, "M_PO_GROUPS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPOGroupsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_PO_GROUPS"].Copy();
        }

        public static DataSet GetListPriceList()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PRICELIST Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_PRICELIST");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPriceList :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListPriceListByID(int PriceListID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PRICELIST Where PRICELIST_ID=@PriceListID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@PriceListID", SqlDbType.Int).Value = PriceListID;
                _dataAdapter.Fill(dsResult, "M_PRICELIST");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPriceListByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_PRICELIST"].Copy();
        }

        public static DataTable GetListPriceListByItemID(int ItemID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_PRICELIST Where ITEM_ID=@ITEM_ID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = ItemID;
                _dataAdapter.Fill(dsResult, "M_PRICELIST");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListPriceListByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_PRICELIST"].Copy();
        }

        public static DataSet GetListReturnReasons()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_RETURN_REASONS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_RETURN_REASONS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListReturnReasons :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListReturnReasonsByID(int ReturnID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_RETURN_REASONS Where RETURN_REASON_ID=@ReturnID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ReturnID", SqlDbType.Int).Value = ReturnID;
                _dataAdapter.Fill(dsResult, "M_RETURN_REASONS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListReturnReasonsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_RETURN_REASONS"].Copy();
        }

        public static DataSet GetListSizes()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SIZES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_SIZES");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSizes :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListSizesByID(int SizeID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SIZES Where SIZE_ID=@SizeID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SizeID", SqlDbType.Int).Value = SizeID;
                _dataAdapter.Fill(dsResult, "M_SIZES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSizesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_SIZES"].Copy();
        }

        public static DataSet GetListSpecials()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SPECIALS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_SPECIALS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSpecials :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListSpecialsByID(int SpecialsID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SPECIALS Where SPECIAL_ID=@SpecialsID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SpecialsID", SqlDbType.Int).Value = SpecialsID;
                _dataAdapter.Fill(dsResult, "M_SPECIALS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSpecialsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_SPECIALS"].Copy();
        }

        public static DataSet GetListSubstitutes()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SUBSTITUTES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_SUBSTITUTES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSubstitutes :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataSet GetListSubstitutesById(int SubID)
        {
            DataSet dsResult = new DataSet();
            DataTable dt = new DataTable();
            string sqltex = "";

            try
            {
            //กลุ่มสินค้าเฉพาะ
            sqltex = string.Format("Select A.* From M_SUBSTITUTES A Where A.SUBSTITUTE_ID = {0}", SubID);
            LoadSpecifyData(sqltex, out dt, "M_SUBSTITUTES");
            dsResult.Tables.Add(dt);

            //สินค้าเฉพาะ 1
            sqltex = string.Format("Select A.* From D_SUBSTITUTE_SUB1 A Where A.SUBSTITUTE_ID = {0} order by A.LIST_NO", SubID);
            LoadSpecifyData(sqltex, out dt, "D_SUBSTITUTE_SUB1");
            dsResult.Tables.Add(dt);

            //สินค้าเฉพาะ 2
            sqltex = string.Format("Select A.* From D_SUBSTITUTE_SUB2 A Where A.SUBSTITUTE_ID = {0} order by A.LIST_NO", SubID);
            LoadSpecifyData(sqltex, out dt, "D_SUBSTITUTE_SUB2");
            dsResult.Tables.Add(dt);

            //รหัสสินค้า
            sqltex = string.Format("Select A.* From D_SUBSTITUTE_ITEMS A Left Join M_SUBSTITUTES B on A.SUBSTITUTE_ID = B.SUBSTITUTE_ID Where A.SUBSTITUTE_ID = {0} order by A.LIST_NO", SubID);
            LoadSpecifyData(sqltex, out dt, "D_SUBSTITUTE_ITEMS");
            dsResult.Tables.Add(dt);

            }
            catch (Exception ex)
            {
            XtraMessageBox.Show("GetListSubstitutesById :" + ex.Message);
            }
            return dsResult;
        }

        public static DataSet GetListSubstitutesSub1()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SUBSTITUTES_SUB1 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_SUBSTITUTES_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSubstitutesSub1 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListSubstitutesSub1ByID(int SubID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SUBSTITUTES_SUB1 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = SubID;
                _dataAdapter.Fill(dsResult, "M_SUBSTITUTES_SUB1");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub1ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_SUBSTITUTES_SUB1"].Copy();
        }

        public static DataSet GetListSubstitutesSub2()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SUBSTITUTES_SUB2 Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_SUBSTITUTES_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListSubstitutesSub2 :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListSubstitutesSub2ByID(int SubID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_SUBSTITUTES_SUB2 Where SUB_ID=@SubID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = SubID;
                _dataAdapter.Fill(dsResult, "M_SUBSTITUTES_SUB2");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListComplementarysSub2ByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_SUBSTITUTES_SUB2"].Copy();
        }

        public static DataSet GetListTransports()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_TRANSPORTS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_TRANSPORTS");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListTransports :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListTransportsByID(int TranID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_TRANSPORTS Where TRANSPORT_ID=@TranID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@TranID", SqlDbType.Int).Value = TranID;
                _dataAdapter.Fill(dsResult, "M_TRANSPORTS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListTransportsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_TRANSPORTS"].Copy();
        }

        public static DataSet GetListTypes()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_TYPES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_TYPES");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListTypes :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListTypesByID(int TypeID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_TYPES Where TYPE_ID=@TypeID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@TypeID", SqlDbType.Int).Value = TypeID;
                _dataAdapter.Fill(dsResult, "M_TYPES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListTypesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_TYPES"].Copy();
        }

        public static DataSet GetListUnits()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_UNITS Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_UNITS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListUnits :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListUnitsByID(int UnitID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_UNITS Where UNIT_ID=@UnitID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@UnitID", SqlDbType.Int).Value = UnitID;
                _dataAdapter.Fill(dsResult, "M_UNITS");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListUnitsByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_UNITS"].Copy();
        }

        public static DataSet GetVersatiles()
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_VERSATILES Where DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.Fill(dsResult, "M_VERSATILES");


            }


            //LoadSpecifyData(sb.ToString(), out dt, "M_ITEMS");
            //dsResult.Tables.Add(dt);
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetVersatiles :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult;
        }

        public static DataTable GetListVersatilesByID(int VerID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_VERSATILES Where VERSATILE_ID=@VerID And DELETED=0");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@VerID", SqlDbType.Int).Value = VerID;
                _dataAdapter.Fill(dsResult, "M_VERSATILES");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListVersatilesByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_VERSATILES"].Copy();
        }

        public static DataTable GetListVersatilesItemByID(int SubID)
        {
            DataSet dsResult = new DataSet();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("Select * From M_VERSATILES_ITEM Where VERSATILE_SUB_ID=@SubID And DELETED=0 Order by SUB_ID,LIST_NO");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@SubID", SqlDbType.Int).Value = SubID;
                _dataAdapter.Fill(dsResult, "M_VERSATILES_ITEM");
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetListVersatilesItemByID :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return dsResult.Tables["M_VERSATILES_ITEM"].Copy();
        }

        public static string GetMarkTransData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string Xcap = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("SELECT sum(QTY_MARK) as QTY_MARK from RCDETAIL where QTY_MARK > 0 and ITEM_ID = @ITEM_ID and DELETED=0");

                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;

                    dt = new DataTable();
                    
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        double iCount = cls_Library.DBDouble(dt.Rows[0]["QTY_MARK"]);
                        //if (iCount > 0) Xcap = "Mark คืน";
                        if (iCount > 0) Xcap = iCount.ToString("#,##0");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetMarkTransData :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Xcap;
        }

        public static string GetNameFromTBname(int id, string tb, string xf,bool LastList = false)
        {
            DataTable dt = new DataTable(tb);
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xcap = "";
            string table = "";
            string tableID = "";
            string Soption = "";


            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                Soption = "";
                switch (tb)
                {
                    case "BANKS":
                        table = "M_BANKS";
                        tableID = "BANK_ID";
                        break;
                    case "CATEGORIES":
                        table = "M_CATEGORIES";
                        tableID = "CATEGORY_ID";
                        break;
                    case "CUSTOMERS":
                        table = "M_CUSTOMERS";
                        tableID = "CUSTOMER_ID";
                        break;
                    case "ITEMS":
                        table = "M_ITEMS";
                        tableID = "ITEM_ID";
                        break;
                    case "ITEMS_SPECIALS":
                        table = "M_ITEMS_SPECIALS";
                        tableID = "ITEMS_SPECIAL_ID";
                    break;
                    case "ITEMS_SPECIALS_SUB1":
                        table = "M_ITEMS_SPECIALS_SUB1";
                        tableID = "SUB_ID";
                        break;
                    case "ITEMS_SPECIALS_SUB2":
                        table = "M_ITEMS_SPECIALS_SUB2";
                        tableID = "SUB_ID";
                        break;
                    case "SIZES":
                        table = "M_SIZES";
                        tableID = "SIZE_ID";
                        break;
                    case "TYPES":
                        table = "M_TYPES";
                        tableID = "TYPE_ID";
                        break;
                    case "UNITS":
                        table = "M_UNITS";
                        tableID = "UNIT_ID";
                        break;
                    case "BRANDS":
                        table = "M_BRANDS";
                        tableID = "BRAND_ID";
                        break;
                    case "PO_GROUPS":
                        table = "M_PO_GROUPS";
                        tableID = "PO_GROUP_ID";
                        break;
                    case "COMPLEMENTARIES_SUB1":
                        table = "M_COMPLEMENTARIES_SUB1";
                        tableID = "SUB_ID";
                        break;
                    case "COMPLEMENTARIES_SUB2":
                        table = "M_COMPLEMENTARIES_SUB2";
                        tableID = "SUB_ID";
                        break;
                    case "COMPLEMENTARIES_SUB3":
                        table = "M_COMPLEMENTARIES_SUB3";
                        tableID = "SUB_ID";
                        break;
                    case "SUBSTITUTES_SUB1":
                        table = "M_SUBSTITUTES_SUB1";
                        tableID = "SUB_ID";
                        break;
                    case "SUBSTITUTES_SUB2":
                        table = "M_SUBSTITUTES_SUB2";
                        tableID = "SUB_ID";
                        break;
                    case "VENDORS":
                        table = "M_VENDORS";
                        tableID = "VENDOR_ID";
                        break;
                    case "USER":
                        table = "M_USERS";
                        tableID = "USER_ID";
                        break;
                    case "ITEM_ALTERNATE_PARTS":
                        table = "D_ITEM_ALTERNATE_PARTS";
                        tableID = "ITEM_ID";
                        Soption = " LIST_NO = 1";
                        if (LastList) Soption = "";
                        break;
                    case "ITEM_VENDORS":
                        table = "D_ITEM_VENDORS";
                        tableID = "ITEM_ID";
                        Soption = " LIST_NO = 1";
                        break;
                    case "ITEM_PO_GROUPS":
                        table = "D_ITEM_PO_GROUPS";
                        tableID = "ITEM_ID";
                        Soption = " LIST_NO = 1";
                    break;
                    case "ITEM_LOCATIONS":
                        table = "D_ITEM_LOCATIONS";
                        tableID = "ITEM_ID";
                        Soption = " LIST_NO = 1";
                        break;
                    case "M_SETPRICE":
                        table = "M_SETPRICE";
                        tableID = "ITEM_ID";
                        break;
                    case "M_BANKS_ACCOUNTS":
                        table = "M_BANKS_ACCOUNTS";
                        tableID = "BANKS_ACCOUNT_ID";
                        break;
                    case "VW_RCAll":
                        table = "Vw_RCall";
                        tableID = "ITEM_ID";
                        break;
                    case "T_LASTRECPO":
                        table = "T_LASTRECPO";
                        tableID = "ITEM_ID";
                        break;
                    case "T_LASTRECRC":
                        table = "T_LASTRECRC";
                        tableID = "ITEM_ID";
                        break;
                }

                sql = "Select " + xf + " From " + table;
                sql += " where " + tableID + "=@" + tableID + "";
                if (Soption.Length > 0)
                {
                    sql += " and " + Soption;
                }

                if (LastList)
                {
                    switch (tb)
                    {
                        case "ITEM_ALTERNATE_PARTS":
                            sql += " order by LIST_NO desc";
                            break;
                    }

                }

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@" + tableID, SqlDbType.Int).Value = id;
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xcap = cls_Library.DBString(dt.Rows[0][xf]);
                }
            }
            catch (Exception ex)
            {
            MessageBox.Show(ex.Message);
            Xcap = "";
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static string GetNameFromTBname(string Code, string tb, string xf)
        {
            DataTable dt = new DataTable(tb);
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xcap = "";
            string table = "";
            string tableCode = "";

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
            switch (tb)
            {
                case "BANKS":
                    table = "M_BANKS";
                    tableCode = "BANK_ID";
                    break;
                case "CATEGORIES":
                    table = "M_CATEGORIES";
                    tableCode = "CATEGORY_CODE";
                    break;
                case "CUSTOMERS":
                    table = "M_CUSTOMERS";
                    tableCode = "CUSTOMER_CODE";
                    break;
                    case "ITEMS":
                table = "M_ITEMS";
                tableCode = "ITEM_CODE";
                break;
                case "ITEMS_SPECIALS":
                table = "M_ITEMS_SPECIALS";
                tableCode = "ITEMS_SPECIAL_ID";
                break;
                case "ITEMS_SPECIALS_SUB1":
                table = "M_ITEMS_SPECIALS_SUB1";
                tableCode = "SUB_ID";
                break;
                case "ITEMS_SPECIALS_SUB2":
                table = "M_ITEMS_SPECIALS_SUB2";
                tableCode = "SUB_ID";
                break;
                case "SIZES":
                table = "M_SIZES";
                tableCode = "SIZE_CODE";
                break;
                case "TYPES":
                table = "M_TYPES";
                tableCode = "TYPE_ID";
                break;
                case "UNITS":
                table = "M_UNITS";
                tableCode = "UNIT_ID";
                break;
                case "BRANDS":
                table = "M_BRANDS";
                tableCode = "BRAND_ID";
                break;
                case "PO_GROUPS":
                table = "M_PO_GROUPS";
                tableCode = "PO_GROUP_ID";
                break;
                case "COMPLEMENTARIES_SUB1":
                table = "M_COMPLEMENTARIES_SUB1";
                tableCode = "SUB_ID";
                break;
                case "COMPLEMENTARIES_SUB2":
                table = "M_COMPLEMENTARIES_SUB2";
                tableCode = "SUB_ID";
                break;
                case "COMPLEMENTARIES_SUB3":
                table = "M_COMPLEMENTARIES_SUB3";
                tableCode = "SUB_ID";
                break;
                case "SUBSTITUTES_SUB1":
                table = "M_SUBSTITUTES_SUB1";
                tableCode = "SUB_ID";
                break;
                case "SUBSTITUTES_SUB2":
                table = "M_SUBSTITUTES_SUB2";
                tableCode = "SUB_ID";
                break;
                case "VENDORS":
                table = "M_VENDORS";
                tableCode = "VENDOR_ID";
                break;
                case "USER":
                    table = "M_USERS";
                    tableCode = "USER_CODE";
                    break;

            }

            sql = "Select " + xf + " From " + table;
            sql += " where " + tableCode + "=@" + tableCode + "";
            da = new SqlDataAdapter(sql, cn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("@" + tableCode, SqlDbType.Char).Value = Code;
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                Xcap = cls_Library.DBString(dt.Rows[0][xf]);
            }
            }
            catch
            {
            Xcap = "";
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static string GetNameFromTBname(int id, int subid, string tb, string xf)
        {
            DataTable dt = new DataTable(tb);
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            string Xcap = "";
            string table = "";
            string tableID = "";
            string tableSubID = "";
            string Soption = "";


            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                Soption = "";
                switch (tb)
                {
                    case "D_ITEM_UNITS":
                        table = "D_ITEM_UNITS";
                        tableID = "ITEM_ID";
                        tableSubID = "UNIT_ID";
                        break;
                }

                sql = "Select " + xf + " From " + table;
                sql += " where " + tableID + "=@" + tableID + " and " + tableSubID + "=@" + tableSubID;
                if (Soption.Length > 0)
                {
                    sql += " and " + Soption;
                }              

                da = new SqlDataAdapter(sql, cn);
                da.SelectCommand.Parameters.Clear();
                da.SelectCommand.Parameters.Add("@" + tableID, SqlDbType.Int).Value = id;
                da.SelectCommand.Parameters.Add("@" + tableSubID, SqlDbType.Int).Value = subid;
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xcap = cls_Library.DBString(dt.Rows[0][xf]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                Xcap = "";
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static object GetByteFromTBname(int id, string tb, string xf)
        {
            DataTable dt = new DataTable(tb);
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sql = string.Empty;
            object Xcap = null;
            string table = "";
            string tableID = "";
            string Soption = "";


            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
            Soption = "";
            switch (tb)
            {
                case "ITEM_PICTURES":
                table = "D_ITEM_PICTURES";
                tableID = "ITEM_ID";
                Soption = " LIST_NO = 1";
                break;
            }

            sql = "Select " + xf + " From " + table;
            sql += " where " + tableID + "=@" + tableID + "";
            if (Soption.Length > 0)
            {
                sql += " and " + Soption;
            }

            da = new SqlDataAdapter(sql, cn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("@" + tableID, SqlDbType.Int).Value = id;
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                Xcap = (Byte[])(dt.Rows[0][xf]);
            }
            }
            catch
            {
                Xcap = null;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref cn);
            }
            return Xcap;
        }

        public static bool SaveBrandCode(int mode, cls_Struct.StructBrands SBRN, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            string sql = "";

            Savemode = mode;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    #region ยี่ห้อสินค้า
                    switch (mode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO M_BRANDS WITH (UPDLOCK) (");
                        sb.AppendLine("BRAND_CODE,");
                        sb.AppendLine("BRAND_NAME,");
                        sb.AppendLine("DESCRIPTION,");
                        sb.AppendLine("ADDITION_DESCRIPTION,");
                        sb.AppendLine("SETUP_PRICE_DATE,");
                        sb.AppendLine("TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("CURRENT_VAT_STATUS,");
                        sb.AppendLine("SALE_CODE,");
                        sb.AppendLine("PRINT_TYPE,");
                        sb.AppendLine("CREATE_DATE,");
                        sb.AppendLine("CREATE_BY,");
                        sb.AppendLine("UPDATE_DATE,");
                        sb.AppendLine("UPDATE_BY,");
                        sb.AppendLine("DELETED)");
                        sb.AppendLine("VALUES(");
                        sb.AppendLine("@BRAND_CODE,");
                        sb.AppendLine("@BRAND_NAME,");
                        sb.AppendLine("@DESCRIPTION,");
                        sb.AppendLine("@ADDITION_DESCRIPTION,");
                        sb.AppendLine("@SETUP_PRICE_DATE,");
                        sb.AppendLine("@TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("@CURRENT_VAT_STATUS,");
                        sb.AppendLine("@SALE_CODE,");
                        sb.AppendLine("@PRINT_TYPE,");
                        sb.AppendLine("@CREATE_DATE,");
                        sb.AppendLine("@CREATE_BY,");
                        sb.AppendLine("@UPDATE_DATE,");
                        sb.AppendLine("@UPDATE_BY,");
                        sb.AppendLine("@DELETED)");
                        sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE M_BRANDS WITH (UPDLOCK) SET ");
                        sb.AppendLine("BRAND_CODE = @BRAND_CODE,");
                        sb.AppendLine("BRAND_NAME = @BRAND_NAME,");
                        sb.AppendLine("DESCRIPTION = @DESCRIPTION,");
                        sb.AppendLine("ADDITION_DESCRIPTION =@ADDITION_DESCRIPTION,");
                        sb.AppendLine("SETUP_PRICE_DATE =@SETUP_PRICE_DATE,");
                        sb.AppendLine("TAX_INVOICE_VAT_STATUS =@TAX_INVOICE_VAT_STATUS,");
                        sb.AppendLine("CURRENT_VAT_STATUS =@CURRENT_VAT_STATUS,");
                        sb.AppendLine("SALE_CODE =@SALE_CODE,");
                        sb.AppendLine("PRINT_TYPE = @PRINT_TYPE,");
                        sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                        sb.AppendLine("UPDATE_BY =@UPDATE_BY");
                        sb.AppendLine(" WHERE BRAND_ID=@BRAND_ID");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@BRAND_CODE", SqlDbType.Char, 4).Value = SBRN.BRAND_CODE;
                    cmd.Parameters.Add("@BRAND_NAME", SqlDbType.VarChar, 50).Value = SBRN.BRAND_NAME;
                    cmd.Parameters.Add("@DESCRIPTION", SqlDbType.VarChar, 50).Value = SBRN.DESCRIPTION;
                    cmd.Parameters.Add("@ADDITION_DESCRIPTION", SqlDbType.VarChar, 50).Value = SBRN.ADDITION_DESCRIPTION;
                    if ((SBRN.SETUP_PRICE_DATE == DateTime.MinValue) || (SBRN.SETUP_PRICE_DATE == DateTime.MaxValue))
                    {
                    cmd.Parameters.Add("@SETUP_PRICE_DATE", SqlDbType.DateTime).Value = DBNull.Value;
                    }
                    else
                    {
                    cmd.Parameters.Add("@SETUP_PRICE_DATE", SqlDbType.DateTime).Value = SBRN.SETUP_PRICE_DATE;
                    }
                    cmd.Parameters.Add("@TAX_INVOICE_VAT_STATUS", SqlDbType.TinyInt).Value = SBRN.TAX_INVOICE_VAT_STATUS;
                    cmd.Parameters.Add("@CURRENT_VAT_STATUS", SqlDbType.TinyInt).Value = SBRN.CURRENT_VAT_STATUS;
                    cmd.Parameters.Add("@SALE_CODE", SqlDbType.TinyInt).Value = SBRN.SALE_CODE;
                    cmd.Parameters.Add("@PRINT_TYPE", SqlDbType.Bit).Value = SBRN.PRINT_TYPE;
                    switch (mode)
                    {
                    case 1:
                        cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = SBRN.CREATE_DATE;
                        cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = SBRN.CREATE_BY;
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SBRN.UPDATE_DATE;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SBRN.UPDATE_BY;
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        break;
                    case 2:
                        cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SBRN.UPDATE_DATE;
                        cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SBRN.UPDATE_BY;
                        break;
                    }

                    cmd.Transaction = tran;
                    if (mode == 2)
                    {
                    cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = SBRN.BRAND_ID;
                    id = SBRN.BRAND_ID;
                    cmd.ExecuteNonQuery();
                    }
                    else
                    {
                    shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                    shipperIdParam.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(shipperIdParam);
                    cmd.ExecuteNonQuery();

                    id = (int)shipperIdParam.Value;
                    }
                    #endregion

                    #region ส่วนลดขาย

                    #region section 1
                    irow = 0;
                    if (dsData.Tables.Contains("D_BRAND_SALE_DISCOUNT_STEPS"))
                    {
                    foreach (DataRow dr in dsData.Tables["D_BRAND_SALE_DISCOUNT_STEPS"].Rows)
                    {
                        irow++;
                        switch (mode)
                        {
                            case 1:
                                Savemode = 1;
                                break;
                            case 2:
                                Savemode = irow > cls_Global_DB.GB_Dbrand_Salediscount ? 1 : 2;
                                break;
                        }
                        switch (Savemode)
                        {
                            case 1:
                                sb.Clear();
                                sb.AppendLine("INSERT INTO D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) (");
                                sb.AppendLine("BRAND_ID,");
                                sb.AppendLine("DISCOUNT_CODE,");
                                sb.AppendLine("DISCOUNT_RATE_STEP1,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP2,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP3,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP4,");
                                sb.AppendLine("ENABLED_STATUS,");
                                sb.AppendLine("LIST_NO)");
                                sb.AppendLine("VALUES (");
                                sb.AppendLine("@BRAND_ID,");
                                sb.AppendLine("@DISCOUNT_CODE,");
                                sb.AppendLine("@DISCOUNT_RATE_STEP1,");
                                //sb.AppendLine("@DISCOUNT_RATE_STEP2,");
                                //sb.AppendLine("@DISCOUNT_RATE_STEP3,");
                                //sb.AppendLine("@DISCOUNT_RATE_STEP4,");
                                sb.AppendLine("@ENABLED_STATUS,");
                                sb.AppendLine("@LIST_NO)");
                                break;
                            case 2:
                                sb.Clear();
                                sb.AppendLine("UPDATE D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) SET ");
                                sb.AppendLine("BRAND_ID =@BRAND_ID,");
                                sb.AppendLine("DISCOUNT_CODE =@DISCOUNT_CODE,");
                                sb.AppendLine("DISCOUNT_RATE_STEP1 =@DISCOUNT_RATE_STEP1,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP2 =@DISCOUNT_RATE_STEP2,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP3 =@DISCOUNT_RATE_STEP3,");
                                //sb.AppendLine("DISCOUNT_RATE_STEP4 =@DISCOUNT_RATE_STEP4,");
                                sb.AppendLine("ENABLED_STATUS =@ENABLED_STATUS,");
                                sb.AppendLine("LIST_NO =@LIST_NO");
                                sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                                break;
                        }
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@DISCOUNT_CODE", SqlDbType.Char, 1).Value = cls_Library.DBString(dr["DISCOUNT_CODE"]);
                        cmd.Parameters.Add("@DISCOUNT_RATE_STEP1", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP1"]);
                        //cmd.Parameters.Add("@DISCOUNT_RATE_STEP2", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP2"]);
                        //cmd.Parameters.Add("@DISCOUNT_RATE_STEP3", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP3"]);
                        //cmd.Parameters.Add("@DISCOUNT_RATE_STEP4", SqlDbType.Decimal).Value = cls_Library.DBDecimal(dr["DISCOUNT_RATE_STEP4"]);
                        cmd.Parameters.Add("@ENABLED_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["ENABLED_STATUS"]);
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                        cmd.Transaction = tran;
                        if (Savemode == 2)
                        {
                        cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                        idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                        }
                        cmd.ExecuteNonQuery();
                    }
                    }
                    #endregion

                    #region Section 2
                    if ((mode == 2) && (dsData.Tables["D_BRAND_SALE_DISCOUNT_STEPS"].Rows.Count < cls_Global_DB.GB_Dbrand_Salediscount))
                    {
                        k = dsData.Tables["D_BRAND_SALE_DISCOUNT_STEPS"].Rows.Count;
                        for (int j = k + 1; j <= cls_Global_DB.GB_Dbrand_Salediscount; j++)
                        {
                            //Mark Details ไว้ก่อนลบจริง
                            sql = "Delete from D_BRAND_SALE_DISCOUNT_STEPS WITH (UPDLOCK) Where BRAND_ID=@BRAND_ID and LIST_NO=@LIST_NO";
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sql;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = id;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #endregion

                    #region ส่วนลดซื้อ

                    #region section 1
                    irow = 0;
                    if (dsData.Tables.Contains("D_BRAND_REFERENCE_DISCOUNTS"))
                    {
                    foreach (DataRow dr in dsData.Tables["D_BRAND_REFERENCE_DISCOUNTS"].Rows)
                    {
                        irow++;
                        switch (mode)
                        {
                        case 1:
                            Savemode = 1;
                            break;
                        case 2:
                            Savemode = irow > cls_Global_DB.GB_Dbrand_Buydiscount ? 1 : 2;
                            break;
                        }
                        switch (Savemode)
                        {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO D_BRAND_REFERENCE_DISCOUNTS WITH (UPDLOCK) (");
                            sb.AppendLine("BRAND_ID,");
                            sb.AppendLine("DISCOUNT_RATE,");
                            sb.AppendLine("VAT_STATUS,");
                            sb.AppendLine("ACTIVE_STATUS,");
                            sb.AppendLine("LIST_NO)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@BRAND_ID,");
                            sb.AppendLine("@DISCOUNT_RATE,");
                            sb.AppendLine("@VAT_STATUS,");
                            sb.AppendLine("@ACTIVE_STATUS,");
                            sb.AppendLine("@LIST_NO)");
                            break;
                        case 2:
                            sb.Clear();
                            sb.AppendLine("UPDATE D_BRAND_REFERENCE_DISCOUNTS WITH (UPDLOCK) SET ");
                            sb.AppendLine("BRAND_ID =@BRAND_ID,");
                            sb.AppendLine("DISCOUNT_RATE =@DISCOUNT_RATE,");
                            sb.AppendLine("VAT_STATUS =@VAT_STATUS,");
                            sb.AppendLine("ACTIVE_STATUS =@ACTIVE_STATUS,");
                            sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                            break;
                        }
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@DISCOUNT_RATE", SqlDbType.Int).Value = cls_Library.DBInt(dr["DISCOUNT_RATE"]);
                        cmd.Parameters.Add("@VAT_STATUS", SqlDbType.TinyInt).Value = cls_Library.DBInt(dr["VAT_STATUS"]);
                        cmd.Parameters.Add("@ACTIVE_STATUS", SqlDbType.Bit).Value = cls_Library.DBbool(dr["ACTIVE_STATUS"]);
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                        cmd.Transaction = tran;
                        if (Savemode == 2)
                        {
                            cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                            idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                        }
                        cmd.ExecuteNonQuery();
                    }
                    }
                    #endregion

                    #region Section 2
                    if ((mode == 2) && (dsData.Tables["D_BRAND_REFERENCE_DISCOUNTS"].Rows.Count < cls_Global_DB.GB_Dbrand_Buydiscount))
                    {
                        k = dsData.Tables["D_BRAND_REFERENCE_DISCOUNTS"].Rows.Count;
                        for (int j = k + 1; j <= cls_Global_DB.GB_Dbrand_Buydiscount; j++)
                        {
                            //Mark Details ไว้ก่อนลบจริง
                            sql = "Delete from D_BRAND_REFERENCE_DISCOUNTS WITH (UPDLOCK) Where BRAND_ID=@BRAND_ID and LIST_NO=@LIST_NO";
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sql;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@BRAND_ID", SqlDbType.Int).Value = id;
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                    }
                    #endregion

                    #endregion

                    tran.Commit();
                    result = true;
                }
            }
            catch (Exception ex)
            {
                tran.Rollback();
                result = false;
                throw;
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
                cls_Global_DB.GB_ItemID = id;
            }
            return result;
        }

        public static bool SaveComplementaryCode(int mode, cls_Struct.StructComplementarys SCOMP, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            string sql = "";

            Savemode = mode;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region กลุ่มสินค้าเฉพาะ
                switch (mode)
                {
                case 1:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO M_COMPLEMENTARIES WITH (UPDLOCK) (");
                    sb.AppendLine("COMPLEMENTARY_CODE,");
                    sb.AppendLine("COMPLEMENTARY_NAME,");
                    sb.AppendLine("COMPLEMENTARY_DESCRIPTION,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("DELETED)");
                    sb.AppendLine("VALUES(");
                    sb.AppendLine("@COMPLEMENTARY_CODE,");
                    sb.AppendLine("@COMPLEMENTARY_NAME,");
                    sb.AppendLine("@COMPLEMENTARY_DESCRIPTION,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@DELETED)");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                    break;
                case 2:
                    sb.Clear();
                    sb.AppendLine("UPDATE M_COMPLEMENTARIES WITH (UPDLOCK) SET ");
                    sb.AppendLine("COMPLEMENTARY_CODE = @COMPLEMENTARY_CODE,");
                    sb.AppendLine("COMPLEMENTARY_NAME = @COMPLEMENTARY_NAME,");
                    sb.AppendLine("COMPLEMENTARY_DESCRIPTION = @COMPLEMENTARY_DESCRIPTION,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY");
                    sb.AppendLine(" WHERE COMPLEMENTARY_ID=@COMPLEMENTARY_ID");
                    break;
                }
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@COMPLEMENTARY_CODE", SqlDbType.Char, 3).Value = SCOMP.COMPLEMENTARY_CODE;
                cmd.Parameters.Add("@COMPLEMENTARY_NAME", SqlDbType.VarChar, 100).Value = SCOMP.COMPLEMENTARY_NAME;
                cmd.Parameters.Add("@COMPLEMENTARY_DESCRIPTION", SqlDbType.VarChar, 200).Value = SCOMP.COMPLEMENTARY_DESCRIPTION;
                switch (mode)
                {
                case 1:
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = SCOMP.CREATE_DATE;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = SCOMP.CREATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SCOMP.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SCOMP.UPDATE_BY;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                    break;
                case 2:
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SCOMP.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SCOMP.UPDATE_BY;
                    break;
                }

                cmd.Transaction = tran;
                if (mode == 2)
                {
                cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = SCOMP.COMPLEMENTARY_ID;
                id = SCOMP.COMPLEMENTARY_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }
                #endregion

                #region รหัสสินค้าย่อย 1

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_COMPLEMENTARY_SUB1"))
                {
                foreach (DataRow dr in dsData.Tables["D_COMPLEMENTARY_SUB1"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dcomp_Sub1 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_COMPLEMENTARY_SUB1 WITH (UPDLOCK) (");
                        sb.AppendLine("COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@COMPLEMENTARY_ID,");
                        sb.AppendLine("@SUB_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_COMPLEMENTARY_SUB1 WITH (UPDLOCK) SET ");
                        sb.AppendLine("COMPLEMENTARY_ID =@COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID =@SUB_ID,");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION =@SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB_ID"]);
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar,3).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_COMPLEMENTARY_SUB1"].Rows.Count < cls_Global_DB.GB_Dcomp_Sub1))
                {
                k = dsData.Tables["D_COMPLEMENTARY_SUB1"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dcomp_Sub1; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_COMPLEMENTARY_SUB1 WITH (UPDLOCK) Where COMPLEMENTARY_ID=@COMPLEMENTARY_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                #region รหัสสินค้าย่อย 2

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_COMPLEMENTARY_SUB2"))
                {
                foreach (DataRow dr in dsData.Tables["D_COMPLEMENTARY_SUB2"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dcomp_Sub2 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_COMPLEMENTARY_SUB2 WITH (UPDLOCK) (");
                        sb.AppendLine("COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@COMPLEMENTARY_ID,");
                        sb.AppendLine("@SUB_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_COMPLEMENTARY_SUB2 WITH (UPDLOCK) SET ");
                        sb.AppendLine("COMPLEMENTARY_ID =@COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID =@SUB_ID,");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION =@SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB_ID"]);
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 3).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_COMPLEMENTARY_SUB2"].Rows.Count < cls_Global_DB.GB_Dcomp_Sub2))
                {
                k = dsData.Tables["D_COMPLEMENTARY_SUB2"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dcomp_Sub2; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_COMPLEMENTARY_SUB2 WITH (UPDLOCK) Where COMPLEMENTARY_ID=@COMPLEMENTARY_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                #region รหัสสินค้าย่อย 3

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_COMPLEMENTARY_SUB3"))
                {
                foreach (DataRow dr in dsData.Tables["D_COMPLEMENTARY_SUB3"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dcomp_Sub3 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_COMPLEMENTARY_SUB3 WITH (UPDLOCK) (");
                        sb.AppendLine("COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@COMPLEMENTARY_ID,");
                        sb.AppendLine("@SUB_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_COMPLEMENTARY_SUB3 WITH (UPDLOCK) SET ");
                        sb.AppendLine("COMPLEMENTARY_ID =@COMPLEMENTARY_ID,");
                        sb.AppendLine("SUB_ID =@SUB_ID,");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION =@SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB_ID"]);
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 3).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_COMPLEMENTARY_SUB3"].Rows.Count < cls_Global_DB.GB_Dcomp_Sub3))
                {
                k = dsData.Tables["D_COMPLEMENTARY_SUB3"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dcomp_Sub3; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_COMPLEMENTARY_SUB3 WITH (UPDLOCK) Where COMPLEMENTARY_ID=@COMPLEMENTARY_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                #region รหัสสินค้า

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_COMPLEMENTARY_ITEMS"))
                {
                foreach (DataRow dr in dsData.Tables["D_COMPLEMENTARY_ITEMS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dcomp_Item ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_COMPLEMENTARY_ITEMS WITH (UPDLOCK) (");
                        sb.AppendLine("COMPLEMENTARY_ID,");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("ITEM_CODE,");
                        sb.AppendLine("ITEM_NAME,");
                        sb.AppendLine("ITEM_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@COMPLEMENTARY_ID,");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@ITEM_CODE,");
                        sb.AppendLine("@ITEM_NAME,");
                        sb.AppendLine("@ITEM_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_COMPLEMENTARY_ITEMS WITH (UPDLOCK) SET ");
                        sb.AppendLine("COMPLEMENTARY_ID =@COMPLEMENTARY_ID,");
                        sb.AppendLine("ITEM_ID =@ITEM_ID,");
                        sb.AppendLine("ITEM_CODE =@ITEM_CODE,");
                        sb.AppendLine("ITEM_NAME =@ITEM_NAME,");
                        sb.AppendLine("ITEM_DESCRIPTION =@ITEM_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@ITEM_CODE", SqlDbType.VarChar, 8).Value = cls_Library.DBString(dr["ITEM_CODE"]);
                    cmd.Parameters.Add("@ITEM_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ITEM_NAME"]);
                    cmd.Parameters.Add("@ITEM_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["ITEM_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_COMPLEMENTARY_ITEMS"].Rows.Count < cls_Global_DB.GB_Dcomp_Item))
                {
                k = dsData.Tables["D_COMPLEMENTARY_ITEMS"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dcomp_Item; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_COMPLEMENTARY_ITEMS WITH (UPDLOCK) Where COMPLEMENTARY_ID=@COMPLEMENTARY_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@COMPLEMENTARY_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            result = false;
            throw;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SaveItemSpecialCode(int mode, cls_Struct.StructItemSpecials SITEMS, DataTable Sdata, DataTable[] Itemdata)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            int Savemode2 = 0;
            string sql = "";

            Savemode = mode;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region กลุ่มสินค้าเฉพาะ
                switch (mode)
                {
                case 1:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO M_ITEMS_SPECIALS WITH (UPDLOCK) (");
                    sb.AppendLine("ITEMS_SPECIAL_CODE,");
                    sb.AppendLine("ITEMS_SPECIAL_NAME,");
                    sb.AppendLine("ITEMS_SPECIAL_DESCRIPTION,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER1,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER2,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER3,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("DELETED)");
                    sb.AppendLine("VALUES(");
                    sb.AppendLine("@ITEMS_SPECIAL_CODE,");
                    sb.AppendLine("@ITEMS_SPECIAL_NAME,");
                    sb.AppendLine("@ITEMS_SPECIAL_DESCRIPTION,");
                    sb.AppendLine("@ITEMS_SPECIAL_HEADER1,");
                    sb.AppendLine("@ITEMS_SPECIAL_HEADER2,");
                    sb.AppendLine("@ITEMS_SPECIAL_HEADER3,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@DELETED)");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                    break;
                case 2:
                    sb.Clear();
                    sb.AppendLine("UPDATE M_ITEMS_SPECIALS WITH (UPDLOCK) SET ");
                    sb.AppendLine("ITEMS_SPECIAL_CODE = @ITEMS_SPECIAL_CODE,");
                    sb.AppendLine("ITEMS_SPECIAL_NAME = @ITEMS_SPECIAL_NAME,");
                    sb.AppendLine("ITEMS_SPECIAL_DESCRIPTION = @ITEMS_SPECIAL_DESCRIPTION,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER1 = @ITEMS_SPECIAL_HEADER1,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER2 = @ITEMS_SPECIAL_HEADER2,");
                    sb.AppendLine("ITEMS_SPECIAL_HEADER3 = @ITEMS_SPECIAL_HEADER3,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY");
                    sb.AppendLine(" WHERE ITEMS_SPECIAL_ID=@ITEMS_SPECIAL_ID");
                    break;
                }
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@ITEMS_SPECIAL_CODE", SqlDbType.Char, 3).Value = SITEMS.ITEMS_SPECIAL_CODE;
                cmd.Parameters.Add("@ITEMS_SPECIAL_NAME", SqlDbType.VarChar, 100).Value = SITEMS.ITEMS_SPECIAL_NAME;
                cmd.Parameters.Add("@ITEMS_SPECIAL_DESCRIPTION", SqlDbType.VarChar, 200).Value = SITEMS.ITEMS_SPECIAL_DESCRIPTION;
                cmd.Parameters.Add("@ITEMS_SPECIAL_HEADER1", SqlDbType.VarChar, 50).Value = SITEMS.ITEMS_SPECIAL_HEADER1;
                cmd.Parameters.Add("@ITEMS_SPECIAL_HEADER2", SqlDbType.VarChar, 50).Value = SITEMS.ITEMS_SPECIAL_HEADER2;
                cmd.Parameters.Add("@ITEMS_SPECIAL_HEADER3", SqlDbType.VarChar, 50).Value = SITEMS.ITEMS_SPECIAL_HEADER3;
                switch (mode)
                {
                case 1:
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = SITEMS.CREATE_DATE;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = SITEMS.CREATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SITEMS.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SITEMS.UPDATE_BY;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                    break;
                case 2:
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SITEMS.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SITEMS.UPDATE_BY;
                    break;
                }

                cmd.Transaction = tran;
                if (mode == 2)
                {
                cmd.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int).Value = SITEMS.ITEMS_SPECIAL_ID;
                id = SITEMS.ITEMS_SPECIAL_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }
                #endregion

                #region กลุ่มย่อย
                if (Sdata.Rows.Count > 1)
                {
                #region section 1
                irow = 0;
                if (Sdata.Rows.Count > 1)
                {
                    foreach (DataRow dr in Sdata.Rows)
                    {
                    irow++;
                    if (irow == Sdata.Rows.Count)
                    {
                        break;
                    }
                    switch (mode)
                    {
                        case 1:
                        Savemode = 1;
                        break;
                        case 2:
                        Savemode = irow > cls_Global_DB.GB_Ditem_Sub1 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                        case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_ITEMS_SPECIALS_SUB WITH (UPDLOCK) (");
                        sb.AppendLine("ITEMS_SPECIAL_ID,");
                        sb.AppendLine("SUB1_ID,");
                        sb.AppendLine("SUB1_CODE,");
                        sb.AppendLine("SUB1_NAME,");
                        sb.AppendLine("SUB2_ID,");
                        sb.AppendLine("SUB2_CODE,");
                        sb.AppendLine("SUB2_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION1,");
                        sb.AppendLine("SUB_DESCRIPTION2,");
                        sb.AppendLine("SUB_DESCRIPTION3,");
                        sb.AppendLine("LIST_NO,");
                        sb.AppendLine("DELETED)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@ITEMS_SPECIAL_ID,");
                        sb.AppendLine("@SUB1_ID,");
                        sb.AppendLine("@SUB1_CODE,");
                        sb.AppendLine("@SUB1_NAME,");
                        sb.AppendLine("@SUB2_ID,");
                        sb.AppendLine("@SUB2_CODE,");
                        sb.AppendLine("@SUB2_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION1,");
                        sb.AppendLine("@SUB_DESCRIPTION2,");
                        sb.AppendLine("@SUB_DESCRIPTION3,");
                        sb.AppendLine("@LIST_NO,");
                        sb.AppendLine("@DELETED)");
                        sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                        break;
                        case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_ITEMS_SPECIALS_SUB WITH (UPDLOCK) SET ");
                        sb.AppendLine("SUB1_ID =@SUB1_ID,");
                        sb.AppendLine("SUB1_CODE =@SUB1_CODE,");
                        sb.AppendLine("SUB1_NAME =@SUB1_NAME,");
                        sb.AppendLine("SUB2_ID =@SUB2_ID,");
                        sb.AppendLine("SUB2_CODE =@SUB2_CODE,");
                        sb.AppendLine("SUB2_NAME =@SUB2_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION1 =@SUB_DESCRIPTION1,");
                        sb.AppendLine("SUB_DESCRIPTION2 =@SUB_DESCRIPTION2,");
                        sb.AppendLine("SUB_DESCRIPTION3 =@SUB_DESCRIPTION3");
                        sb.AppendLine(" WHERE ITEMS_SPECIAL_ID =@ITEMS_SPECIAL_ID and LIST_NO=@LIST_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB1_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB1_ID"]);
                    cmd.Parameters.Add("@SUB1_CODE", SqlDbType.VarChar, 4).Value = cls_Library.DBString(dr["SUB1_CODE"]);
                    cmd.Parameters.Add("@SUB1_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB1_NAME"]);
                    cmd.Parameters.Add("@SUB2_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB2_ID"]);
                    cmd.Parameters.Add("@SUB2_CODE", SqlDbType.VarChar, 3).Value = cls_Library.DBString(dr["SUB2_CODE"]);
                    cmd.Parameters.Add("@SUB2_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB2_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION1", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION1"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION2", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION2"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION3", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION3"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                        //cmd.Parameters.Add("@ITEMS_SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEMS_SUB_ID"]);
                        idother = cls_Library.DBInt(dr["ITEMS_SUB_ID"]);
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();
                        idother = (int)shipperIdParam.Value;
                    }

                    int idata = 0;
                    for (int j = 0; j < Itemdata[irow-1].Rows.Count-1; j++)
                    {
                        idata++;
                        Savemode2 = Savemode;
                        if (Savemode == 2)
                        {
                        Savemode2 = idata > cls_Global_DB.GB_Ditem_Item[irow-1] ? 1 : 2;
                        }

                        switch (Savemode2)
                        {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO D_ITEMS_SPECIALS_ITEMS WITH (UPDLOCK) (");
                            sb.AppendLine("ITEMS_SUB_ID,");
                            sb.AppendLine("ITEM1_ID,");
                            sb.AppendLine("ITEM1_CODE,");
                            sb.AppendLine("ITEM1_NAME,");
                            sb.AppendLine("ITEM1_DESCRIPTION,");
                            sb.AppendLine("ITEM2_ID,");
                            sb.AppendLine("ITEM2_CODE,");
                            sb.AppendLine("ITEM2_NAME,");
                            sb.AppendLine("ITEM2_DESCRIPTION,");
                            sb.AppendLine("ITEM3_ID,");
                            sb.AppendLine("ITEM3_CODE,");
                            sb.AppendLine("ITEM3_NAME,");
                            sb.AppendLine("ITEM3_DESCRIPTION,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETED)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@ITEMS_SUB_ID,");
                            sb.AppendLine("@ITEM1_ID,");
                            sb.AppendLine("@ITEM1_CODE,");
                            sb.AppendLine("@ITEM1_NAME,");
                            sb.AppendLine("@ITEM1_DESCRIPTION,");
                            sb.AppendLine("@ITEM2_ID,");
                            sb.AppendLine("@ITEM2_CODE,");
                            sb.AppendLine("@ITEM2_NAME,");
                            sb.AppendLine("@ITEM2_DESCRIPTION,");
                            sb.AppendLine("@ITEM3_ID,");
                            sb.AppendLine("@ITEM3_CODE,");
                            sb.AppendLine("@ITEM3_NAME,");
                            sb.AppendLine("@ITEM3_DESCRIPTION,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETED)");
                            break;
                        case 2:
                            sb.Clear();
                            sb.AppendLine("UPDATE D_ITEMS_SPECIALS_ITEMS WITH (UPDLOCK) SET ");
                            sb.AppendLine("ITEM1_ID =@ITEM1_ID,");
                            sb.AppendLine("ITEM1_CODE =@ITEM1_CODE,");
                            sb.AppendLine("ITEM1_NAME =@ITEM1_NAME,");
                            sb.AppendLine("ITEM1_DESCRIPTION =@ITEM1_DESCRIPTION,");
                            sb.AppendLine("ITEM2_ID =@ITEM2_ID,");
                            sb.AppendLine("ITEM2_CODE =@ITEM2_CODE,");
                            sb.AppendLine("ITEM2_NAME =@ITEM2_NAME,");
                            sb.AppendLine("ITEM2_DESCRIPTION =@ITEM2_DESCRIPTION,");
                            sb.AppendLine("ITEM3_ID =@ITEM3_ID,");
                            sb.AppendLine("ITEM3_CODE =@ITEM3_CODE,");
                            sb.AppendLine("ITEM3_NAME =@ITEM3_NAME,");
                            sb.AppendLine("ITEM3_DESCRIPTION =@ITEM3_DESCRIPTION");
                            //sb.AppendLine("LIST_NO =@LIST_NO");
                            sb.AppendLine(" WHERE ITEMS_SUB_ID =@ITEMS_SUB_ID and LIST_NO=@LIST_NO");
                            break;
                        }
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@ITEMS_SUB_ID", SqlDbType.Int).Value = idother;
                        cmd.Parameters.Add("@ITEM1_ID", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["ITEM1_ID"]);
                        cmd.Parameters.Add("@ITEM1_CODE", SqlDbType.VarChar, 8).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM1_CODE"]);
                        cmd.Parameters.Add("@ITEM1_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM1_NAME"]);
                        cmd.Parameters.Add("@ITEM1_DESCRIPTION", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM1_DESCRIPTION"]);
                        cmd.Parameters.Add("@ITEM2_ID", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["ITEM2_ID"]);
                        cmd.Parameters.Add("@ITEM2_CODE", SqlDbType.VarChar, 8).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM2_CODE"]);
                        cmd.Parameters.Add("@ITEM2_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM2_NAME"]);
                        cmd.Parameters.Add("@ITEM2_DESCRIPTION", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM2_DESCRIPTION"]);
                        cmd.Parameters.Add("@ITEM3_ID", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["ITEM3_ID"]);
                        cmd.Parameters.Add("@ITEM3_CODE", SqlDbType.VarChar, 8).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM3_CODE"]);
                        cmd.Parameters.Add("@ITEM3_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM3_NAME"]);
                        cmd.Parameters.Add("@ITEM3_DESCRIPTION", SqlDbType.VarChar, 100).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM3_DESCRIPTION"]);
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = idata;
                        cmd.Transaction = tran;
                        if (Savemode2 == 2)
                        {
                        //cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["SEQUENSE_NO"]);
                        //idother = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["SEQUENSE_NO"]);
                        }
                        else
                        {
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        }
                        cmd.ExecuteNonQuery();

                    }
                    }
                }
                #endregion

                #region Section 2
                if (mode == 2)
                {
                    if (Sdata.Rows.Count < cls_Global_DB.GB_Ditem_Sub1)
                    {
                    k = Sdata.Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_Ditem_Sub1; j++)
                    {
                        sql = "Delete from D_ITEMS_SPECIALS_SUB WITH (UPDLOCK) Where ITEMS_SPECIAL_ID=@ITEMS_SPECIAL_ID and LIST_NO=@LIST_NO";
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sql;
                        cmd.CommandTimeout = 60;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@ITEMS_SPECIAL_ID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                    }
                    }
                    else
                    {
                    for (int j = 0; j < cls_Global_DB.GB_Ditem_Sub1; j++)
                    {
                        if (Itemdata[j].Rows.Count-1 < cls_Global_DB.GB_Ditem_Item[j])
                        {
                        k = Itemdata[j].Rows.Count-1;
                        for (int s = k + 1; s <= cls_Global_DB.GB_Ditem_Item[j]; s++)
                        {
                            sql = "Delete from D_ITEMS_SPECIALS_ITEMS WITH (UPDLOCK) Where ITEMS_SUB_ID=@ITEMS_SUB_ID and LIST_NO=@LIST_NO";
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sql;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@ITEMS_SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(Sdata.Rows[j]["ITEMS_SUB_ID"]);
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = s;
                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                        }
                    }
                    }
                }
                #endregion
                }


                #endregion

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            result = false;
            throw;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            cls_Global_DB.GB_ItemID = id;
            }
            return result;
        }

        public static bool SaveSubstituteCode(int mode, cls_Struct.StructSubstitutes SSUB, DataSet dsData)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            string sql = "";

            Savemode = mode;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region กลุ่มสินค้าเฉพาะ
                switch (mode)
                {
                case 1:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO M_SUBSTITUTES WITH (UPDLOCK) (");
                    sb.AppendLine("SUBSTITUTE_CODE,");
                    sb.AppendLine("SUBSTITUTE_NAME,");
                    sb.AppendLine("SUBSTITUTE_DESCRIPTION,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("DELETED)");
                    sb.AppendLine("VALUES(");
                    sb.AppendLine("@SUBSTITUTE_CODE,");
                    sb.AppendLine("@SUBSTITUTE_NAME,");
                    sb.AppendLine("@SUBSTITUTE_DESCRIPTION,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@DELETED)");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                    break;
                case 2:
                    sb.Clear();
                    sb.AppendLine("UPDATE M_SUBSTITUTES WITH (UPDLOCK) SET ");
                    sb.AppendLine("SUBSTITUTE_CODE = @SUBSTITUTE_CODE,");
                    sb.AppendLine("SUBSTITUTE_NAME = @SUBSTITUTE_NAME,");
                    sb.AppendLine("SUBSTITUTE_DESCRIPTION = @SUBSTITUTE_DESCRIPTION,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY");
                    sb.AppendLine(" WHERE SUBSTITUTE_ID=@SUBSTITUTE_ID");
                    break;
                }
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@SUBSTITUTE_CODE", SqlDbType.Char, 3).Value = SSUB.SUBSTITUTE_CODE;
                cmd.Parameters.Add("@SUBSTITUTE_NAME", SqlDbType.VarChar, 100).Value = SSUB.SUBSTITUTE_NAME;
                cmd.Parameters.Add("@SUBSTITUTE_DESCRIPTION", SqlDbType.VarChar, 200).Value = SSUB.SUBSTITUTE_DESCRIPTION;
                switch (mode)
                {
                case 1:
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = SSUB.CREATE_DATE;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = SSUB.CREATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SSUB.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SSUB.UPDATE_BY;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                    break;
                case 2:
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SSUB.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SSUB.UPDATE_BY;
                    break;
                }

                cmd.Transaction = tran;
                if (mode == 2)
                {
                cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = SSUB.SUBSTITUTE_ID;
                id = SSUB.SUBSTITUTE_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }
                #endregion

                #region รหัสสินค้าย่อย 1

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_SUBSTITUTE_SUB1"))
                {
                foreach (DataRow dr in dsData.Tables["D_SUBSTITUTE_SUB1"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dsubs_Sub1 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_SUBSTITUTE_SUB1 WITH (UPDLOCK) (");
                        sb.AppendLine("SUBSTITUTE_ID,");
                        sb.AppendLine("SUB_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@SUBSTITUTE_ID,");
                        sb.AppendLine("@SUB_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_SUBSTITUTE_SUB1 WITH (UPDLOCK) SET ");
                        sb.AppendLine("SUBSTITUTE_ID =@SUBSTITUTE_ID,");
                        sb.AppendLine("SUB_ID =@SUB_ID,");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION =@SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB_ID"]);
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 3).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_SUBSTITUTE_SUB1"].Rows.Count < cls_Global_DB.GB_Dsubs_Sub1))
                {
                k = dsData.Tables["D_SUBSTITUTE_SUB1"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dsubs_Sub1; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_SUBSTITUTE_SUB1 WITH (UPDLOCK) Where SUBSTITUTE_ID=@SUBSTITUTE_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                #region รหัสสินค้าย่อย 2

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_SUBSTITUTE_SUB2"))
                {
                foreach (DataRow dr in dsData.Tables["D_SUBSTITUTE_SUB2"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dsubs_Sub2 ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_SUBSTITUTE_SUB2 WITH (UPDLOCK) (");
                        sb.AppendLine("SUBSTITUTE_ID,");
                        sb.AppendLine("SUB_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@SUBSTITUTE_ID,");
                        sb.AppendLine("@SUB_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@SUB_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_SUBSTITUTE_SUB2 WITH (UPDLOCK) SET ");
                        sb.AppendLine("SUBSTITUTE_ID =@SUBSTITUTE_ID,");
                        sb.AppendLine("SUB_ID =@SUB_ID,");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME,");
                        sb.AppendLine("SUB_DESCRIPTION =@SUB_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["SUB_ID"]);
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 3).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@SUB_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["SUB_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_SUBSTITUTE_SUB2"].Rows.Count < cls_Global_DB.GB_Dsubs_Sub2))
                {
                k = dsData.Tables["D_SUBSTITUTE_SUB2"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dsubs_Sub2; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_SUBSTITUTE_SUB2 WITH (UPDLOCK) Where SUBSTITUTE_ID=@SUBSTITUTE_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                #region รหัสสินค้า

                #region section 1
                irow = 0;
                if (dsData.Tables.Contains("D_SUBSTITUTE_ITEMS"))
                {
                foreach (DataRow dr in dsData.Tables["D_SUBSTITUTE_ITEMS"].Rows)
                {
                    irow++;
                    switch (mode)
                    {
                    case 1:
                        Savemode = 1;
                        break;
                    case 2:
                        Savemode = irow > cls_Global_DB.GB_Dsubs_Item ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                    case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO D_SUBSTITUTE_ITEMS WITH (UPDLOCK) (");
                        sb.AppendLine("SUBSTITUTE_ID,");
                        sb.AppendLine("ITEM_ID,");
                        sb.AppendLine("ITEM_CODE,");
                        sb.AppendLine("ITEM_NAME,");
                        sb.AppendLine("ITEM_DESCRIPTION,");
                        sb.AppendLine("LIST_NO)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@SUBSTITUTE_ID,");
                        sb.AppendLine("@ITEM_ID,");
                        sb.AppendLine("@ITEM_CODE,");
                        sb.AppendLine("@ITEM_NAME,");
                        sb.AppendLine("@ITEM_DESCRIPTION,");
                        sb.AppendLine("@LIST_NO)");
                        break;
                    case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE D_SUBSTITUTE_ITEMS WITH (UPDLOCK) SET ");
                        sb.AppendLine("SUBSTITUTE_ID =@SUBSTITUTE_ID,");
                        sb.AppendLine("ITEM_ID =@ITEM_ID,");
                        sb.AppendLine("ITEM_CODE =@ITEM_CODE,");
                        sb.AppendLine("ITEM_NAME =@ITEM_NAME,");
                        sb.AppendLine("ITEM_DESCRIPTION =@ITEM_DESCRIPTION,");
                        sb.AppendLine("LIST_NO =@LIST_NO");
                        sb.AppendLine(" WHERE SEQUENSE_NO=@SEQUENSE_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                    cmd.Parameters.Add("@ITEM_CODE", SqlDbType.VarChar, 8).Value = cls_Library.DBString(dr["ITEM_CODE"]);
                    cmd.Parameters.Add("@ITEM_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(dr["ITEM_NAME"]);
                    cmd.Parameters.Add("@ITEM_DESCRIPTION", SqlDbType.VarChar, 200).Value = cls_Library.DBString(dr["ITEM_DESCRIPTION"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                    cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    idother = cls_Library.DBInt(dr["SEQUENSE_NO"]);
                    }
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #region Section 2
                if ((mode == 2) && (dsData.Tables["D_SUBSTITUTE_ITEMS"].Rows.Count < cls_Global_DB.GB_Dsubs_Item))
                {
                k = dsData.Tables["D_SUBSTITUTE_ITEMS"].Rows.Count;
                for (int j = k + 1; j <= cls_Global_DB.GB_Dsubs_Item; j++)
                {
                    //Mark Details ไว้ก่อนลบจริง
                    sql = "Delete from D_SUBSTITUTE_ITEMS WITH (UPDLOCK) Where SUBSTITUTE_ID=@SUBSTITUTE_ID and LIST_NO=@LIST_NO";
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sql;
                    cmd.CommandTimeout = 60;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@SUBSTITUTE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                    cmd.Transaction = tran;
                    cmd.ExecuteNonQuery();
                }
                }
                #endregion

                #endregion

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            result = false;
            throw;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return result;
        }

        public static bool SaveItemVersatileCode(int mode, cls_Struct.StructVersatiles SITEMS, DataTable Sdata, DataTable[] Itemdata)
        {
            bool result = false;
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            SqlParameter shipperIdParam = null;
            int id = 0, idother = 0;
            int irow = 0;
            int k = 0;
            int Savemode = 0;
            int Savemode2 = 0;
            string sql = "";

            Savemode = mode;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                #region กลุ่มสินค้าเฉพาะ
                switch (mode)
                {
                case 1:
                    sb.Clear();
                    sb.AppendLine("INSERT INTO M_VERSATILES WITH (UPDLOCK) (");
                    sb.AppendLine("VERSATILE_CODE,");
                    sb.AppendLine("VERSATILE_NAME,");
                    sb.AppendLine("VERSATILE_DESCRIPTION,");
                    sb.AppendLine("CREATE_DATE,");
                    sb.AppendLine("CREATE_BY,");
                    sb.AppendLine("UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY,");
                    sb.AppendLine("DELETED)");
                    sb.AppendLine("VALUES(");
                    sb.AppendLine("@VERSATILE_CODE,");
                    sb.AppendLine("@VERSATILE_NAME,");
                    sb.AppendLine("@VERSATILE_DESCRIPTION,");
                    sb.AppendLine("@CREATE_DATE,");
                    sb.AppendLine("@CREATE_BY,");
                    sb.AppendLine("@UPDATE_DATE,");
                    sb.AppendLine("@UPDATE_BY,");
                    sb.AppendLine("@DELETED)");
                    sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                    break;
                case 2:
                    sb.Clear();
                    sb.AppendLine("UPDATE M_VERSATILES WITH (UPDLOCK) SET ");
                    sb.AppendLine("VERSATILE_CODE = @VERSATILE_CODE,");
                    sb.AppendLine("VERSATILE_NAME = @VERSATILE_NAME,");
                    sb.AppendLine("VERSATILE_DESCRIPTION = @VERSATILE_DESCRIPTION,");
                    sb.AppendLine("UPDATE_DATE =@UPDATE_DATE,");
                    sb.AppendLine("UPDATE_BY =@UPDATE_BY");
                    sb.AppendLine(" WHERE VERSATILE_ID=@VERSATILE_ID");
                    break;
                }
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("@VERSATILE_CODE", SqlDbType.Char, 5).Value = SITEMS.VERSATILE_CODE;
                cmd.Parameters.Add("@VERSATILE_NAME", SqlDbType.VarChar, 100).Value = SITEMS.VERSATILE_NAME;
                cmd.Parameters.Add("@VERSATILE_DESCRIPTION", SqlDbType.VarChar, 200).Value = SITEMS.VERSATILE_DESCRIPTION;
                switch (mode)
                {
                case 1:
                    cmd.Parameters.Add("@CREATE_DATE", SqlDbType.DateTime).Value = SITEMS.CREATE_DATE;
                    cmd.Parameters.Add("@CREATE_BY", SqlDbType.Int).Value = SITEMS.CREATE_BY;
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SITEMS.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SITEMS.UPDATE_BY;
                    cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                    break;
                case 2:
                    cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = SITEMS.UPDATE_DATE;
                    cmd.Parameters.Add("@UPDATE_BY", SqlDbType.Int).Value = SITEMS.UPDATE_BY;
                    break;
                }

                cmd.Transaction = tran;
                if (mode == 2)
                {
                cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int).Value = SITEMS.VERSATILE_ID;
                id = SITEMS.VERSATILE_ID;
                cmd.ExecuteNonQuery();
                }
                else
                {
                shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                shipperIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(shipperIdParam);
                cmd.ExecuteNonQuery();

                id = (int)shipperIdParam.Value;
                }
                #endregion

                #region กลุ่มย่อย
                if (Sdata.Rows.Count > 1)
                {
                #region section 1
                irow = 0;
                if (Sdata.Rows.Count > 1)
                {
                    foreach (DataRow dr in Sdata.Rows)
                    {
                    irow++;
                    if (irow == Sdata.Rows.Count)
                    {
                        break;
                    }
                    switch (mode)
                    {
                        case 1:
                        Savemode = 1;
                        break;
                        case 2:
                        Savemode = irow > cls_Global_DB.GB_DitemVersatile_Sub ? 1 : 2;
                        break;
                    }
                    switch (Savemode)
                    {
                        case 1:
                        sb.Clear();
                        sb.AppendLine("INSERT INTO M_VERSATILES_SUB WITH (UPDLOCK) (");
                        sb.AppendLine("VERSATILE_ID,");
                        sb.AppendLine("SUB_CODE,");
                        sb.AppendLine("SUB_NAME,");
                        sb.AppendLine("LIST_NO,");
                        sb.AppendLine("DELETED)");
                        sb.AppendLine("VALUES (");
                        sb.AppendLine("@VERSATILE_ID,");
                        sb.AppendLine("@SUB_CODE,");
                        sb.AppendLine("@SUB_NAME,");
                        sb.AppendLine("@LIST_NO,");
                        sb.AppendLine("@DELETED)");
                        sb.AppendLine("SET @ID = SCOPE_IDENTITY()");
                        break;
                        case 2:
                        sb.Clear();
                        sb.AppendLine("UPDATE M_VERSATILES_SUB WITH (UPDLOCK) SET ");
                        sb.AppendLine("SUB_CODE =@SUB_CODE,");
                        sb.AppendLine("SUB_NAME =@SUB_NAME");
                        sb.AppendLine(" WHERE VERSATILE_ID =@VERSATILE_ID and LIST_NO=@LIST_NO");
                        break;
                    }
                    cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandText = sb.ToString();
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.Clear();
                    cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int).Value = id;
                    cmd.Parameters.Add("@SUB_CODE", SqlDbType.VarChar, 5).Value = cls_Library.DBString(dr["SUB_CODE"]);
                    cmd.Parameters.Add("@SUB_NAME", SqlDbType.VarChar, 100).Value = cls_Library.DBString(dr["SUB_NAME"]);
                    cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = irow;
                    cmd.Transaction = tran;
                    if (Savemode == 2)
                    {
                        //cmd.Parameters.Add("@ITEMS_SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEMS_SUB_ID"]);
                        idother = cls_Library.DBInt(dr["SUB_ID"]);
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        shipperIdParam = new SqlParameter("@ID", SqlDbType.Int);
                        shipperIdParam.Direction = ParameterDirection.Output;
                        cmd.Parameters.Add(shipperIdParam);
                        cmd.ExecuteNonQuery();
                        idother = (int)shipperIdParam.Value;
                        dr["SUB_ID"] = idother;
                    }
                

                    int idata = 0;
                    for (int j = 0; j < Itemdata[irow - 1].Rows.Count - 1; j++)
                    {
                        idata++;
                        Savemode2 = Savemode;
                        if (Savemode == 2)
                        {
                        Savemode2 = idata > cls_Global_DB.GB_DitemVersatile_Item[irow - 1] ? 1 : 2;
                        }

                        switch (Savemode2)
                        {
                        case 1:
                            sb.Clear();
                            sb.AppendLine("INSERT INTO M_VERSATILES_ITEM WITH (UPDLOCK) (");
                            sb.AppendLine("VERSATILE_SUB_ID,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("ITEM_CODE,");
                            sb.AppendLine("FULL_NAME,");
                            sb.AppendLine("LIST_NO,");
                            sb.AppendLine("DELETED)");
                            sb.AppendLine("VALUES (");
                            sb.AppendLine("@VERSATILE_SUB_ID,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@ITEM_CODE,");
                            sb.AppendLine("@FULL_NAME,");
                            sb.AppendLine("@LIST_NO,");
                            sb.AppendLine("@DELETED)");
                            break;
                        case 2:
                            sb.Clear();
                            sb.AppendLine("UPDATE M_VERSATILES_ITEM WITH (UPDLOCK) SET ");
                            sb.AppendLine("ITEM_ID =@ITEM_ID,");
                            sb.AppendLine("ITEM_CODE =@ITEM_CODE,");
                            sb.AppendLine("FULL_NAME =@FULL_NAME");
                            sb.AppendLine(" WHERE VERSATILE_SUB_ID =@VERSATILE_SUB_ID and LIST_NO=@LIST_NO");
                            break;
                        }
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@VERSATILE_SUB_ID", SqlDbType.Int).Value = idother;
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["ITEM_ID"]);
                        cmd.Parameters.Add("@ITEM_CODE", SqlDbType.Char,8).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["ITEM_CODE"]);
                        cmd.Parameters.Add("@FULL_NAME", SqlDbType.VarChar, 50).Value = cls_Library.DBString(Itemdata[irow - 1].Rows[j]["FULL_NAME"]);
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = idata;
                        cmd.Transaction = tran;
                        if (Savemode2 == 2)
                        {
                        //cmd.Parameters.Add("@SEQUENSE_NO", SqlDbType.Int).Value = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["SEQUENSE_NO"]);
                        //idother = cls_Library.DBInt(Itemdata[irow - 1].Rows[j]["SEQUENSE_NO"]);
                        }
                        else
                        {
                        cmd.Parameters.Add("@DELETED", SqlDbType.Bit).Value = false;
                        }
                        cmd.ExecuteNonQuery();

                    }
                    }
                }
                #endregion

                #region Section 2
                if (mode == 2)
                {
                    if (Sdata.Rows.Count < cls_Global_DB.GB_DitemVersatile_Sub)
                    {
                    k = Sdata.Rows.Count;
                    for (int j = k + 1; j <= cls_Global_DB.GB_DitemVersatile_Sub; j++)
                    {
                        sql = "Delete from M_VERSATILES_SUB WITH (UPDLOCK) Where VERSATILE_ID=@VERSATILE_ID and LIST_NO=@LIST_NO";
                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sql;
                        cmd.CommandTimeout = 60;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Parameters.Add("@VERSATILE_ID", SqlDbType.Int).Value = id;
                        cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = j;
                        cmd.Transaction = tran;
                        cmd.ExecuteNonQuery();
                    }
                    }
                    else
                    {
                    for (int j = 0; j < cls_Global_DB.GB_DitemVersatile_Sub; j++)
                    {
                        if (Itemdata[j].Rows.Count - 1 < cls_Global_DB.GB_DitemVersatile_Item[j])
                        {
                        k = Itemdata[j].Rows.Count - 1;
                        for (int s = k + 1; s <= cls_Global_DB.GB_DitemVersatile_Item[j]; s++)
                        {
                            sql = "Delete from M_VERSATILES_ITEM WITH (UPDLOCK) Where VERSATILE_SUB_ID=@VERSATILE_SUB_ID and LIST_NO=@LIST_NO";
                            cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandText = sql;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.Text;
                            cmd.Parameters.Clear();
                            cmd.Parameters.Add("@VERSATILE_SUB_ID", SqlDbType.Int).Value = cls_Library.DBInt(Sdata.Rows[j]["SUB_ID"]);
                            cmd.Parameters.Add("@LIST_NO", SqlDbType.SmallInt).Value = s;
                            cmd.Transaction = tran;
                            cmd.ExecuteNonQuery();
                        }
                        }
                    }
                    }
                }
                #endregion
                }


                #endregion

                tran.Commit();
                result = true;
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            result = false;
            throw;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            cls_Global_DB.GB_ItemID = id;
            }
            return result;
        }

        public static void UpdateItemUnderStock(int ITEM_ID,bool UnderOK = false)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                sb.Clear();
                sb.AppendLine("UPDATE M_ITEMS WITH (UPDLOCK) SET UNDER_STOCK =@UNDER_STOCK WHERE ITEM_ID=@ITEM_ID");
                cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sb.ToString();
                cmd.CommandTimeout = 30;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.Clear();
                cmd.Parameters.Add("ITEM_ID", SqlDbType.Int).Value = ITEM_ID;
                cmd.Parameters.Add("UNDER_STOCK", SqlDbType.Bit).Value = UnderOK;
                cmd.Transaction = tran;
                cmd.ExecuteNonQuery();


                tran.Commit();
            }
            }
            catch (Exception ex)
            {
            tran.Rollback();
            XtraMessageBox.Show("UpdateActiveVoucher :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
        }
        #endregion

        #region Documents
        public static string GetLastCodeDetailMasterAlphabet(string tbName,int id)
        {
            DataTable dt = new DataTable("Master");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sqltext = string.Empty;
            string Xvnos = "";

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
            switch (tbName)
            {
                case "D_BRAND_SALE_DISCOUNT_STEPS":  //ส่วนลดขาย
                sqltext = "select DISCOUNT_CODE from D_BRAND_SALE_DISCOUNT_STEPS where BRAND_ID=@id order by DISCOUNT_CODE desc";
                break;
            }
            da = new SqlDataAdapter(sqltext, cn);
            da.SelectCommand.Parameters.Clear();
            da.SelectCommand.Parameters.Add("id", SqlDbType.Int).Value = id;
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                Xvnos = cls_Library.DBString(dt.Rows[0][0]);
            }
            else
            {
                switch (tbName)
                {
                case "D_BRAND_SALE_DISCOUNT_STEPS": //ส่วนลดขาย
                    Xvnos = "A";
                    Xvnos = cls_Library.SequenceStr(Xvnos);
                    break;
                }
            }
            }
            catch
            {
            dt = null;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return Xvnos;
        }

        public static string GetLastCodeMaster(string tbName,int nDigit)
        {
            DataTable dt = new DataTable("Master");
            SqlConnection cn = new SqlConnection();
            SqlDataAdapter da = null;
            string sqltext = string.Empty;
            string Xvnos = "";
            string Xdigit = "";
            int iRun = 0;

            cls_Global_DB.ConnectDatabase(ref cn);

            try
            {
                iRun = 0;
                switch (tbName)
                {
                    case "M_ITEMS":
                    sqltext = "select ITEM_ID AS _id, ITEM_CODE AS code, FULL_NAME AS name from M_ITEMS order by ITEM_CODE";
                    break;
                    case "BRANDS":  //ยี่ห้อสินค้า
                    sqltext = "select BRAND_CODE from M_BRANDS where DELETED=0 order by BRAND_CODE desc";
                    break;
                    case "BUYING_TYPES":  //ประเภทสินค้า
                    sqltext = "select BUYING_TYPE_CODE from M_BUYING_TYPES where DELETED=0 order by BUYING_TYPE_CODE desc";
                    break;
                    case "CATEGORIES":  //หมวดหมู่สินค้า
                    sqltext = "select CATEGORY_CODE from M_CATEGORIES where DELETED=0 order by CATEGORY_CODE desc";
                    break;
                    case "COMPLEMENTARIES":  //กลุ่มสินค้าใช้ด้วยกัน
                    sqltext = "select COMPLEMENTARY_CODE from M_COMPLEMENTARIES where DELETED=0 order by COMPLEMENTARY_CODE desc";
                    break;
                    case "COMPLEMENTARIES_SUB1":  //กลุ่มสินค้าเฉพาะใช้ด้วยกัน 1
                    sqltext = "select SUB_CODE from M_COMPLEMENTARIES_SUB1 where DELETED=0 order by SUB_CODE desc";
                    break;
                    case "COMPLEMENTARIES_SUB2":  //กลุ่มสินค้าเฉพาะใช้ด้วยกัน 2
                    sqltext = "select SUB_CODE from M_COMPLEMENTARIES_SUB2 where DELETED=0 order by SUB_CODE desc";
                    break;
                    case "COMPLEMENTARIES_SUB3":  //กลุ่มสินค้าเฉพาะใช้ด้วยกัน 3
                    sqltext = "select SUB_CODE from M_COMPLEMENTARIES_SUB3 where DELETED=0 order by SUB_CODE desc";
                    break;
                    case "CUSTOMERS":  //ลูกค้า
                    sqltext = "select CUSTOMER_CODE from M_CUSTOMERS where DELETED=0 order by CUSTOMER_CODE desc";
                    break;
                    case "JOB_TYPES":  //ประเภทงาน
                    sqltext = "select JOB_TYPE_CODE from M_JOB_TYPES where DELETED=0 order by JOB_TYPE_CODE desc";
                    break;
                    case "ITEMS_SPECIALS":  //กลุ่มสินค้าเฉพาะ
                    sqltext = "select ITEMS_SPECIAL_CODE from M_ITEMS_SPECIALS where DELETED=0 order by ITEMS_SPECIAL_CODE desc";
                    break;
                    case "ITEMS_SPECIALS_SUB1":  //กลุ่มสินค้าเฉพาะ กลุ่มย่อยระดับที่ 1
                    sqltext = "select SUB_CODE from M_ITEMS_SPECIALS_SUB1 where DELETED=0 order by SUB_CODE desc";
                    break;
                    case "ITEMS_SPECIALS_SUB2":  //กลุ่มสินค้าเฉพาะ กลุ่มย่อยระดับที่ 2
                    sqltext = "select SUB_CODE from M_ITEMS_SPECIALS_SUB2 where DELETED=0 order by SUB_CODE desc";
                    break;
                    case "LOGISTIC":  //บริษัทขนส่งสินค้า
                        sqltext = "select LOGISTIC_CODE from M_LOGISTIC_COMPANIES where DELETED=0 order by LOGISTIC_CODE desc";
                        break;
                    case "PACKAGE_TYPES":  //ชนิดบรรจุสินค้า
                        sqltext = "select PACKAGE_TYPE_CODE from M_PACKAGE_TYPES where DELETED=0 order by PACKAGE_TYPE_CODE desc";
                        break;
                    case "M_TYPES":  //ประเภทสินค้า
                        sqltext = "select TYPE_ID AS _id, TYPE_CODE AS code, TYPE_NAME AS name from M_TYPES order by TYPE_CODE";
                        break;
          
                    case "M_VENDORS": //ผู้จำหน่ายสินค้า
                        sqltext = "select VENDOR_ID AS _id, VENDOR_CODE AS code, VENDOR_NAME AS name from M_VENDORS order by VENDOR_CODE";
                        break;
                    case "M_PROPERTIES":  //คุณลักษณะสินค้า
                        sqltext = "select PROPERTY_ID AS _id, PROPERTY_CODE AS code, PROPERTY_NAME AS name from M_PROPERTIES order by PROPERTY_CODE";
                        break;
                    case "M_PO_GROUPS":   //กลุ่มสั่งซื้อสินค้า
                        sqltext = "select PO_GROUP_ID AS _id, PO_GROUP_CODE AS code, PO_GROUP_NAME AS name from M_PO_GROUPS order by PO_GROUP_CODE";
                        break;
                    case "M_MODELS":  //รุ่นสินค้า
                        sqltext = "select MODEL_ID AS _id, MODEL_CODE AS code, MODEL_NAME AS name from M_MODELS order by MODEL_CODE";
                        break;
                    case "M_DOCUMENTS":   //เอกสารสินค้า
                        sqltext = "select DOCUMENT_ID AS _id, DOCUMENT_CODE AS code, DOCUMENT_NAME AS name from M_DOCUMENTS order by DOCUMENT_CODE";
                        break;
                    case "UNITS":  //หน่วยนับสินค้า
                        sqltext = "select UNIT_CODE from M_UNITS where DELETED=0 order by UNIT_CODE desc";
                        break;
                    case "M_BANKS":
                        sqltext = "select BANK_ID AS _id, ABBREVIATE_NAME AS code, FULL_NAME AS name from M_BANKS order by ABBREVIATE_NAME";
                        break;
                    case "SUBSTITUTES":  //กลุ่มสินค้าเฉพาะ
                        sqltext = "select SUBSTITUTE_CODE from M_SUBSTITUTES where DELETED=0 order by SUBSTITUTE_CODE desc";
                        break;
                    case "SUBSTITUTES_SUB1":  //กลุ่มสินค้าเฉพาะใช้แทนกัน 1
                        sqltext = "select SUB_CODE from M_SUBSTITUTES_SUB1 where DELETED=0 order by SUB_CODE desc";
                        break;
                    case "SUBSTITUTES_SUB2":  //กลุ่มสินค้าเฉพาะใช้แทนกัน 2
                        sqltext = "select SUB_CODE from M_SUBSTITUTES_SUB2 where DELETED=0 order by SUB_CODE desc";
                        break;
                    case "TRANSPORTS":  //หน่วยนับสินค้า
                        sqltext = "select TRANSPORT_CODE from M_TRANSPORTS where DELETED=0 order by TRANSPORT_CODE desc";
                        break;
                    case "M_USERS":
                        sqltext = "select USER_ID AS _id, USER_CODE AS code, USER_NAME AS name from M_USERS order by USER_CODE";
                        break;
                    case "VERSATILES":  //กลุ่มสินค้าอเนกประสงค์
                        sqltext = "select VERSATILE_CODE from M_VERSATILES where DELETED=0 order by VERSATILE_CODE desc";
                        break;
                    case "M_CUS_TAXINV":  //หน่วยนับสินค้า
                        sqltext = "select ADDRESS_CODE from M_CUS_TAXINV order by ADDRESS_CODE desc";
                        break;
                }
                da = new SqlDataAdapter(sqltext, cn);
                da.SelectCommand.Parameters.Clear();
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Xvnos = cls_Library.DBString(dt.Rows[0][0]);
                    if (cls_Library.IsNumeric(Xvnos))
                    {
                        iRun = cls_Library.DBInt(Xvnos);
                    }
                }
                else
                {
                    iRun = 0;
                }
                iRun++;
                Xdigit = "";
                for (int i = 0; i < nDigit; i++)
                {
                    Xdigit = Xdigit + "0";
                }
                Xvnos = iRun.ToString(Xdigit);
            }
            catch
            {
            dt = null;
            }
            finally
            {
            cls_Global_DB.CloseDB(ref cn);
            }
            return Xvnos;
        }

        public static DataTable GetLastPODataDT(int id)
        {
            DataTable dt = new DataTable("PO");
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastPO";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastPODataDT :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        public static DataTable GetLastRCDataDT(int id)
        {
            DataTable dt = new DataTable("RC");
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastRC";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastRCDataDT :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dt;
        }

        public static string GetLastPOData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string Xcap = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastPO";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Xcap = cls_Library.DBDateTime(dt.Rows[0]["T_DATE"]).ToShortDateString() + "  " + cls_Library.DBString(dt.Rows[0]["T_CODE"]) + "  " + cls_Library.DBDecimal(dt.Rows[0]["T_NET"]).ToString("#,##0.00");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastPOData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Xcap;
        }

        public static DateTime GetDateLastRCData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DateTime RCdate = DateTime.MinValue;
            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("SELECT A.RC_DATE FROM RCHEADER A INNER JOIN RCDETAIL B ON A.RCH_ID = B.RCD_PID where A.DELETED=0 and B.DELETED=0 and B.ITEM_ID = @ITEM_ID ");
                sb.AppendLine("Order By A.RC_DATE desc");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;

                _dataAdapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                RCdate = cls_Library.DBDateTime(dt.Rows[0]["RC_DATE"]);
                }
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetDateLastRCData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return RCdate;
        }

        public static DataTable GetCostLastRCData(int id)
        {
            DataTable dt = new DataTable();
            DataTable dtrow = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int i;
            decimal RCcost = 0;
            decimal RCcostNovat = 0;
            decimal RCBFcost = 0;
            decimal RCAVGcost = 0;
            double QTY = 0;
            decimal Rsum = 0;

            dtrow = new DataTable("COST");
            dtrow.Columns.Add("CostLast", typeof(decimal));
            dtrow.Columns.Add("CostLastNovat", typeof(decimal));
            dtrow.Columns.Add("CostBFLast", typeof(decimal));
            dtrow.Columns.Add("CostAverage", typeof(decimal));

            try
            {
        
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("SELECT B.COG_DOC,B.VAT_DOC,B.NET_DOC,B.QTY,B.CONV FROM RCHEADER A INNER JOIN RCDETAIL B ON A.RCH_ID = B.RCD_PID where A.DELETED=0 and B.DELETED=0 and B.QTY <> ISNULL(B.QTY_RETURN,0) and B.ITEM_ID = @ITEM_ID ");
                    sb.AppendLine("Order By A.RC_DATE desc,A.RC_NO desc");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;

                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        for (i=0; i <= dt.Rows.Count - 1;i++)
                        {
                            Rsum += cls_Library.DBDecimal(dt.Rows[i]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[i]["VAT_DOC"]);
                            if (cls_Library.DBDouble(dt.Rows[i]["CONV"]) > 0)
                            {
                                QTY += cls_Library.DBDouble(dt.Rows[i]["QTY"])/ cls_Library.DBDouble(dt.Rows[i]["CONV"]);
                            }
                            else
                            {
                                QTY += 0;
                            }
              
                            if (i==0)
                            {
                                if ((cls_Library.DBDouble(dt.Rows[i]["CONV"]) > 0) && (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) > 0))
                                {
                                    RCcost = (cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[0]["VAT_DOC"])) / (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) / cls_Library.DBDecimal(dt.Rows[i]["CONV"]));
                                    RCcostNovat = cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]) / (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) / cls_Library.DBDecimal(dt.Rows[i]["CONV"]));
                                    //RCcost = (cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[0]["VAT_DOC"]));
                                    //RCcostNovat = cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]);
                                }               
                            }
                            if (i == 1)
                            {
                                //RCBFcost = (cls_Library.DBDecimal(dt.Rows[1]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[1]["VAT_DOC"])) / (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) / cls_Library.DBDecimal(dt.Rows[i]["CONV"]));
                                if ((cls_Library.DBDouble(dt.Rows[i]["CONV"]) > 0) && (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) > 0))
                                {
                                    RCBFcost = (cls_Library.DBDecimal(dt.Rows[1]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[1]["VAT_DOC"])) / (cls_Library.DBDecimal(dt.Rows[i]["QTY"]) / cls_Library.DBDecimal(dt.Rows[i]["CONV"]));
                                    //RCBFcost = (cls_Library.DBDecimal(dt.Rows[1]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[1]["VAT_DOC"]));
                                }                                  
                            }
                        }

                        RCAVGcost = 0;
                        if (QTY > 0) RCAVGcost = Math.Round(Rsum / cls_Library.CDecimal(QTY), 2);

                        dtrow.Rows.Add();
                        dtrow.Rows[0]["CostLast"] = RCcost;
                        dtrow.Rows[0]["CostLastNovat"] = RCcostNovat;
                        dtrow.Rows[0]["CostBFLast"] = RCBFcost;
                        dtrow.Rows[0]["CostAverage"] = RCAVGcost;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetCostLastRCData :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return dtrow;
        }

        public static decimal GetCostMinRCData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            int i;
            decimal RCcost = 0;

            try
            {

            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("SELECT TOP 1 B.COG_DOC,B.VAT_DOC,B.QTY,B.CONV FROM RCHEADER A INNER JOIN RCDETAIL B ON A.RCH_ID = B.RCD_PID where A.DELETED=0 and B.DELETED=0 and YEAR(A.RC_DATE)=@RC_DATE and B.QTY <> ISNULL(B.QTY_RETURN,0) and B.ITEM_ID = @ITEM_ID ");
                sb.AppendLine("Order By B.COG_DOC");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                _dataAdapter.SelectCommand.Parameters.Add("@RC_DATE", SqlDbType.Int).Value = DateTime.Now.Year;
                _dataAdapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                        if ((cls_Library.DBDouble(dt.Rows[0]["CONV"]) > 0) && (cls_Library.DBDecimal(dt.Rows[0]["QTY"]) > 0))
                        {
                            RCcost = (cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[0]["VAT_DOC"])) / (cls_Library.DBDecimal(dt.Rows[0]["QTY"]) / cls_Library.DBDecimal(dt.Rows[0]["CONV"]));
                            //RCcost = (cls_Library.DBDecimal(dt.Rows[0]["COG_DOC"]) + cls_Library.DBDecimal(dt.Rows[0]["VAT_DOC"]));
                        }

                    }
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetCostLastRCData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return RCcost;
        }

        public static string GetLastRCData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string Xcap = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("SELECT A.RO_DATE, M.VENDOR_CODE, B.MARK_NO FROM ROHEADER A INNER JOIN RODETAIL B ON A.ROH_ID = B.ROD_PID INNER JOIN M_VENDORS AS M ON A.CUS_ID = M.VENDOR_ID");
                    //sb.AppendLine(" where B.ITEM_ID = @ITEM_ID");
                    //sb.AppendLine("Order By A.RO_DATE desc");

                    //_dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    //_dataAdapter.SelectCommand.Parameters.Clear();
                    //_dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastRC";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        // test
                        Xcap = cls_Library.DBDateTime(dt.Rows[0]["T_DATE"]).ToShortDateString() + "  " + cls_Library.DBString(dt.Rows[0]["T_CODE"]) + "  " + cls_Library.DBDecimal(dt.Rows[0]["T_NO"]).ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastPOData :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Xcap;
        }

        public static string GetLastROData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string Xcap = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //sb.AppendLine("SELECT A.RO_DATE, M.VENDOR_CODE, B.MARK_NO FROM ROHEADER A INNER JOIN RODETAIL B ON A.ROH_ID = B.ROD_PID INNER JOIN M_VENDORS AS M ON A.CUS_ID = M.VENDOR_ID");
                    //sb.AppendLine(" where B.ITEM_ID = @ITEM_ID");
                    //sb.AppendLine("Order By A.RO_DATE desc");

                    //_dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    //_dataAdapter.SelectCommand.Parameters.Clear();
                    //_dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastRO";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        // test
                        Xcap = cls_Library.DBDateTime(dt.Rows[0]["T_DATE"]).ToShortDateString() + "  " + cls_Library.DBString(dt.Rows[0]["T_CODE"]) + "  " + cls_Library.DBDecimal(dt.Rows[0]["T_QTY"]).ToString();
                    }
                }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetLastPOData :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return Xcap;
        }

        public static string GetLastSQData(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlCommand command = new SqlCommand();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            string Xcap = "";
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    command.Connection = conn;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = "SP_LastSQ";

                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("@ITEM_ID", id);

                    dt = new DataTable();
                    _dataAdapter = new SqlDataAdapter(command);
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Xcap = cls_Library.DBDateTime(dt.Rows[0]["T_DATE"]).ToShortDateString() + "  " + cls_Library.DBString(dt.Rows[0]["T_CODE"]) + "  " + cls_Library.DBDecimal(dt.Rows[0]["T_NET"]).ToString("#,##0.00");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastSQData :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Xcap;
        }

        public static DateTime GetLastStockBalance(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DateTime Xdate = DateTime.MinValue;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    sb.AppendLine("Select UPDATED_DATE");
                    sb.AppendLine(" From STOCKBALANCE Where ITEM_ID = @ITEM_ID");

                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    dt = new DataTable("STOCKBALANCE");
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Xdate = cls_Library.DBDateTime(dt.Rows[0]["UPDATED_DATE"]);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetLastStockBalance :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return Xdate;
        }

        public static bool UpdateLastTransfer(cls_Struct.VoucherType type, DataTable dt)
        {
            SqlConnection conn = new SqlConnection();
            SqlCommand cmd = conn.CreateCommand();
            SqlTransaction tran = null;
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            DataSet ds;
            string Scap = "";
            string Stb = "";
            bool AddOK = true;
            bool ret = false;
            string Tno,Tcode;
            DateTime Tdate = DateTime.Now;
            int VATTYPE = 0;
            double QTY = 0;
            double DISCOUNT = 0;
            decimal Tcog = 0;
            decimal Tvat = 0;
            decimal Tnet = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    tran = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    foreach (DataRow dr in dt.Rows)
                    {
                        Tno = "";
                        Tcode = "";
                        switch (type)
                        {
                            case cls_Struct.VoucherType.PO:
                                ds = cls_Data.GetPOById(cls_Library.DBInt(dr["POD_PID"]));
                                if (ds.Tables["POHEADER"].Rows.Count > 0)
                                {
                                    Tno = cls_Library.DBString(ds.Tables["POHEADER"].Rows[0]["PO_NO"]);
                                    Tdate = cls_Library.DBDateTime(ds.Tables["POHEADER"].Rows[0]["PO_DATE"]);
                                    Tcode = GetNameFromTBname(cls_Library.DBInt(ds.Tables["POHEADER"].Rows[0]["CUS_ID"]), "VENDORS", "VENDOR_CODE");
                                    VATTYPE = 1;
                                    QTY = cls_Library.DBDouble(dr["QTY"]) / cls_Library.DBDouble(dr["CONV"]);
                                    DISCOUNT = 0;
                                    Tcog = cls_Library.DBDecimal(dr["COG"]);
                                    Tvat = cls_Library.DBDecimal(dr["PRICEVAT"]);
                                    Tnet = cls_Library.DBDecimal(dr["PRICESUM"]);
                                }
                                break;
                            case cls_Struct.VoucherType.RC:
                                ds = cls_Data.GetRCById(cls_Library.DBInt(dr["RCD_PID"]));
                                if (ds.Tables["RCHEADER"].Rows.Count > 0)
                                {
                                    Tno = cls_Library.DBString(ds.Tables["RCHEADER"].Rows[0]["RC_NO"]);
                                    Tdate = cls_Library.DBDateTime(ds.Tables["RCHEADER"].Rows[0]["RC_DATE"]);
                                    Tcode = cls_Library.DBString(ds.Tables["RCHEADER"].Rows[0]["VENDOR_CODE"]);
                                    VATTYPE = cls_Library.DBInt(ds.Tables["RCHEADER"].Rows[0]["VAT_STATUS"]);
                                    QTY = cls_Library.DBDouble(dr["QTY"]) / cls_Library.DBDouble(dr["CONV"]);
                                    DISCOUNT = cls_Library.DBDouble(dr["DISCOUNT"]);
                                    Tcog = cls_Library.DBDecimal(dr["PRICE_DOC"]);
                                    Tvat = cls_Library.DBDecimal(dr["VAT_REAL"]);
                                    Tnet = cls_Library.DBDecimal(dr["NET_REAL"]);
                                }
                                break;
                            case cls_Struct.VoucherType.JOB:

                                break;
                            case cls_Struct.VoucherType.RO:
                                ds = cls_Data.GetROById(cls_Library.DBInt(dr["ROD_PID"]));
                                if (ds.Tables["ROHEADER"].Rows.Count > 0)
                                {
                                    Tno = cls_Library.DBString(ds.Tables["ROHEADER"].Rows[0]["RO_NO"]);
                                    Tdate = cls_Library.DBDateTime(ds.Tables["ROHEADER"].Rows[0]["RO_DATE"]);
                                    Tcode = cls_Library.DBString(ds.Tables["ROHEADER"].Rows[0]["VENDOR_CODE"]);
                                    VATTYPE = cls_Library.DBInt(ds.Tables["ROHEADER"].Rows[0]["VAT_STATUS"]);
                                    QTY = cls_Library.DBDouble(dr["MARK_NO"]) / cls_Library.DBDouble(dr["CONV"]);
                                    DISCOUNT = cls_Library.DBDouble(dr["DISCOUNT"]);
                                    Tcog = cls_Library.DBDecimal(dr["COG"]);
                                    Tvat = cls_Library.DBDecimal(dr["PRICEVAT"]);
                                    Tnet = cls_Library.DBDecimal(dr["NET_DOC"]);
                                }
                                break;
                            case cls_Struct.VoucherType.SQ:
                                ds = cls_Data.GetSQById(cls_Library.DBInt(dr["SQD_PID"]));
                                if (ds.Tables["SQHEADER"].Rows.Count > 0)
                                {
                                    Tno = cls_Library.DBString(ds.Tables["SQHEADER"].Rows[0]["SQ_NO"]);
                                    Tdate = cls_Library.DBDateTime(ds.Tables["SQHEADER"].Rows[0]["SQ_DATE"]);
                                    Tcode = cls_Library.DBString(ds.Tables["SQHEADER"].Rows[0]["VENDOR_CODE"]);
                                    VATTYPE = cls_Library.DBInt(ds.Tables["SQHEADER"].Rows[0]["VAT_STATUS"]);
                                    QTY = cls_Library.DBDouble(dr["QTY"]) / cls_Library.DBDouble(dr["CONV"]);
                                    DISCOUNT = cls_Library.DBDouble(dr["DISCOUNT"]);
                                    Tcog = cls_Library.DBDecimal(dr["COG"]);
                                    Tvat = 0; // cls_Library.DBDecimal(dr["PRICEVAT"]);
                                    Tnet = cls_Library.DBDecimal(dr["NETPRICE"]);
                                }
                                break;
                        }

                        if (Tno.Length == 0)
                        {
                            ret = false;
                            return ret;
                        }

                        AddOK = true;
                        switch (type)
                        {
                            case cls_Struct.VoucherType.PO:
                                Scap = GetLastPOData(cls_Library.DBInt(dr["ITEM_ID"]));
                                Stb = "T_LASTRECPO";
                                break;
                            case cls_Struct.VoucherType.RC:
                                Scap = GetLastRCData(cls_Library.DBInt(dr["ITEM_ID"]));
                                Stb = "T_LASTRECRC";
                                break;
                            case cls_Struct.VoucherType.JOB:

                                break;
                            case cls_Struct.VoucherType.RO:
                                Scap = GetLastROData(cls_Library.DBInt(dr["ITEM_ID"]));
                                Stb = "T_LASTRECRO";
                                break;
                            case cls_Struct.VoucherType.SQ:
                                Scap = GetLastSQData(cls_Library.DBInt(dr["ITEM_ID"]));
                                Stb = "T_LASTRECSQ";
                                break;
                        }
                        if (Scap.Length > 0) AddOK = false;

                        

                        sb.Clear();
                        if (AddOK)
                        {
                            sb.AppendLine("INSERT INTO " + Stb + " WITH (UPDLOCK) (");
                            sb.AppendLine("T_NO,");
                            sb.AppendLine("T_DATE,");
                            sb.AppendLine("T_CODE,");
                            sb.AppendLine("ITEM_ID,");
                            sb.AppendLine("T_QTY,");
                            sb.AppendLine("T_DISCOUNT,");
                            sb.AppendLine("T_COG,");
                            sb.AppendLine("T_VAT,");
                            sb.AppendLine("T_NET");
                            sb.AppendLine(") VALUES (");
                            sb.AppendLine("@T_NO,");
                            sb.AppendLine("@T_DATE,");
                            sb.AppendLine("@T_CODE,");
                            sb.AppendLine("@ITEM_ID,");
                            sb.AppendLine("@T_QTY,");
                            sb.AppendLine("@T_DISCOUNT,");
                            sb.AppendLine("@T_COG,");
                            sb.AppendLine("@T_VAT,");
                            sb.AppendLine("@T_NET");
                            sb.AppendLine(")");
                        }
                        else
                        {
                            sb.AppendLine("UPDATE " + Stb + " WITH (UPDLOCK) SET ");
                            sb.AppendLine("T_NO = @T_NO,");
                            sb.AppendLine("T_DATE = @T_DATE,");
                            sb.AppendLine("T_CODE = @T_CODE,");
                            sb.AppendLine("T_QTY = @T_QTY,");
                            sb.AppendLine("T_DISCOUNT = @T_DISCOUNT,");
                            sb.AppendLine("T_COG = @T_COG,");
                            sb.AppendLine("T_VAT = @T_VAT,");
                            sb.AppendLine("T_NET = @T_NET");
                            sb.AppendLine("WHERE ITEM_ID = @ITEM_ID");
                        }

                        cmd = new SqlCommand();
                        cmd.Connection = conn;
                        cmd.CommandText = sb.ToString();
                        cmd.CommandTimeout = 30;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.Clear();
                        cmd.Transaction = tran;

                        cmd.Parameters.Add("@T_NO", SqlDbType.VarChar, 50).Value = Tno;
                        cmd.Parameters.Add("@T_DATE", SqlDbType.DateTime).Value = Tdate;
                        cmd.Parameters.Add("@T_CODE", SqlDbType.Char, 10).Value = Tcode;
                        cmd.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = cls_Library.DBInt(dr["ITEM_ID"]);
                        cmd.Parameters.Add("@T_QTY", SqlDbType.Float).Value = QTY;
                        cmd.Parameters.Add("@T_DISCOUNT", SqlDbType.Float).Value = DISCOUNT;
                        cmd.Parameters.Add("@T_COG", SqlDbType.Decimal).Value = Tcog;
                        cmd.Parameters.Add("@T_VAT", SqlDbType.Decimal).Value = Tvat;
                        cmd.Parameters.Add("@T_NET", SqlDbType.Decimal).Value = Tnet;
                        cmd.ExecuteNonQuery();
                        tran.Commit();
                    }
                    
                    ret = true;
                }
            }
            catch (Exception ex)
            {
                ret = false;
                tran.Rollback();
                XtraMessageBox.Show("UpdateLastTransfer :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn); conn.Dispose();
            }
            return ret;
        }
        #endregion

        #region Quantity
        public static decimal GetSumRCquantity(int id,bool Vatok = false)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal RCsum = 0;

            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    //SUM RC
                    sb.AppendLine("SELECT sum(B.QTY * B.CONV) as QTY, sum(B.QTY_RETURN) as QTY_RETURN from RCHEADER A inner join RCDETAIL B on A.RCH_ID = B.RCD_PID");
                    sb.AppendLine(" where A.DELETED=0 and B.DELETED=0 and B.ITEM_ID = @ITEM_ID");
                    if (Vatok)
                    {
                        sb.AppendLine(" and A.VAT_STATUS <> 3");
                    }
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    dt = new DataTable("RC");
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        RCsum = cls_Library.DBDecimal(dt.Rows[0]["QTY"]) - cls_Library.DBDecimal(dt.Rows[0]["QTY_RETURN"]);
                    }

                    //SUM BS
                    sb.Clear();
                    sb.AppendLine("SELECT Top 1 BSsumQTY FROM  Vw_BSsumQTY where ITEM_ID = @ITEM_ID");
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    dt = new DataTable("BS");
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        RCsum = RCsum -(cls_Library.DBDecimal(dt.Rows[0]["BSsumQTY"]));
                    }

                    //SUM Stock Balance
                    sb.Clear();
                    sb.AppendLine("SELECT (SUM(QTY) - SUM(QTY_ORIGINAL)) as QTY from STOCKONHAND where ITEM_ID = @ITEM_ID ");
                   
                    _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                    _dataAdapter.SelectCommand.Parameters.Clear();
                    _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;
                    dt = new DataTable("stockonhand");
                    _dataAdapter.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        RCsum = RCsum + cls_Library.DBDecimal(dt.Rows[0]["QTY"]);
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetSumRCquantity :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
            return RCsum;
        }

        public static decimal GetSumRCreturnquantity(int id)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            StringBuilder sb = new StringBuilder();
            decimal RCsum = 0;

            try
            {
            if (cls_Global_DB.ConnectDatabase(ref conn))
            {
                sb.AppendLine("SELECT sum(QTY_RETURN) as QTY_RETURN from RCDETAIL");
                sb.AppendLine(" where DELETED=0 and ITEM_ID = @ITEM_ID");

                _dataAdapter.SelectCommand = new SqlCommand(sb.ToString(), conn);
                _dataAdapter.SelectCommand.Parameters.Clear();
                _dataAdapter.SelectCommand.Parameters.Add("@ITEM_ID", SqlDbType.Int).Value = id;

                _dataAdapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                RCsum = cls_Library.DBDecimal(dt.Rows[0]["QTY_RETURN"]);
                }
            }
            }
            catch (Exception ex)
            {
            MessageBox.Show("GetSumRCreturnquantity :" + ex.Message);
            }
            finally
            {
            cls_Global_DB.CloseDB(ref conn);
            conn.Dispose();
            }
            return RCsum;
        }
        #endregion

        #region BUY_Discount
        public static void GetBrandBuyDiscountByID(ref decimal Discount, ref int VatType, int BrandID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            int i = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    dt = GetDataTable("D_BRAND_REFERENCE_DISCOUNTS", BrandID);
                    for (i=0;i < dt.Rows.Count;i++)
                    {
                        if (cls_Library.DBInt(dt.Rows[i]["ACTIVE_STATUS"]) == 1)
                        {
                            Discount = cls_Library.DBDecimal(dt.Rows[i]["DISCOUNT_RATE"]);
                            VatType = cls_Library.DBInt(dt.Rows[i]["VAT_STATUS"]);
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetBrandBuyDiscountByID :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
        }
        #endregion

        #region SALE_Discount
        public static void GetBrandSaleDiscountByID(ref decimal Discount, ref int VatType, int BrandID)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            SqlDataAdapter _dataAdapter = new SqlDataAdapter();
            int i = 0;
            try
            {
                if (cls_Global_DB.ConnectDatabase(ref conn))
                {
                    dt = GetDataTable("D_BRAND_SALE_DISCOUNT_STEPS", BrandID);
                    for (i = 0; i < dt.Rows.Count; i++)
                    {
                        if (cls_Library.DBInt(dt.Rows[i]["ENABLED_STATUS"]) == 1)
                        {
                            Discount = cls_Library.DBDecimal(dt.Rows[i]["DISCOUNT_RATE_STEP1"]);
                            VatType = cls_Library.DBInt(dt.Rows[i]["VAT_STATUS"]);
                            break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("GetBrandSaleDiscountByID :" + ex.Message);
            }
            finally
            {
                cls_Global_DB.CloseDB(ref conn);
                conn.Dispose();
            }
        }
        #endregion
    }

    public class Class_ImageResize
    {
        #region "  Variables declaration  "

        const int maxwidth = 400;
        const int maxpixel = 128;

        MemoryStream ms;
        System.Drawing.Bitmap image = null;

        int mode;
        int width;
        int height;
        bool HorzFlag = true;

        #endregion

        public Class_ImageResize()
        {
            ms = new MemoryStream();
        }

        public byte[] imageToByteArray(System.Drawing.Image imageIn)
        {
            MemoryStream ms = new MemoryStream();
            imageIn.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
            return ms.ToArray();
        }

        public byte[] ResizeImage(string _filename)
        {
            mode = 1;
            LoadImage(_filename);
            return ms.ToArray();
        }

        private void LoadImage(string _filename)
        {
            if (!File.Exists(_filename)) return;

            image = (Bitmap)Bitmap.FromFile(_filename);
            height = image.Height;
            width = image.Width;

            switch (mode)
            {
            case 1:
                if (width > maxwidth)
                {
                // format image
                AForge.Imaging.Image.FormatImage(ref image);
                ImageResizing();
                }
                else
                {
                image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                }
                break;

            case 2:
                // format image
                HorzFlag = width > height;
                AForge.Imaging.Image.FormatImage(ref image);
                ImageResizing();
                break;
            }
        }

        private int AspectRatio(int _mode, ref int refsize)
        {
            int retinteger = 0;

            switch (_mode)
            {
            case 1:
                // Calculate height from width
                try
                {
                retinteger = Math.Max(1, Math.Min(5000, (int)(refsize * height / width)));
                }
                catch (Exception)
                {
                }
                break;

            case 2:
                // Calculate width from height
                try
                {
                retinteger = Math.Max(1, Math.Min(5000, (int)(refsize * width / height)));
                }
                catch (Exception)
                {
                }
                break;
            }

            return retinteger;
        }

        // Resize image to new size
        private void ImageResizing()
        {
            FilterResize filter = null;
            int _width = maxwidth;
            int _height = 600;

            switch (mode)
            {
            case 1:
                _height = AspectRatio(1, ref _width);
                break;

            case 2:
                if (HorzFlag)
                {
                _width = maxpixel;
                _height = AspectRatio(1, ref _width);
                }
                else
                {
                _height = maxpixel;
                _width = AspectRatio(2, ref _height);
                }

                break;
            }

            filter = new ResizeBilinear(_width, _height);
            ApplyFilter(filter);

        }

        // Apply filter on the image
        private void ApplyFilter(IFilter filter)
        {
            try
            {
            // apply filter to the image
            Bitmap newImage = filter.Apply(image);
            newImage.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
            }
            catch (ArgumentException)
            {
            }
        }

        public static byte[] ReadFile(string sPath)
        {
            //Initialize byte array with a null value initially.
            byte[] data = null;

            //Use FileInfo object to get file size.
            FileInfo fInfo = new FileInfo(sPath);
            long numBytes = fInfo.Length;

            //Open FileStream to read file
            FileStream fStream = new FileStream(sPath, FileMode.Open, FileAccess.Read);

            //Use BinaryReader to read file stream into byte array.
            BinaryReader br = new BinaryReader(fStream);

            //When you use BinaryReader, you need to supply number of bytes to read from file.
            //In this case we want to read entire file. So supplying total number of bytes.
            data = br.ReadBytes((int)numBytes);
            return data;
        }

        public byte[] Resize64pixelImage(string _filename)
        {
            mode = 2;
            LoadImage(_filename);
            return ms.ToArray();
        }

        public Image Resize(Image img, int percentage)
        {
            //get the height and width of the image
            int originalW = img.Width;
            int originalH = img.Height;

            //get the new size based on the percentage change
            int resizedW = (int)(originalW * percentage);
            int resizedH = (int)(originalH * percentage);

            //create a new Bitmap the size of the new image
            Bitmap bmp = new Bitmap(resizedW, resizedH);
            //create a new graphic from the Bitmap
            Graphics graphic = Graphics.FromImage((Image)bmp);
            graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
            //draw the newly resized image
            graphic.DrawImage(img, 0, 0, resizedW, resizedH);
            //dispose and free up the resources
            graphic.Dispose();
            //return the image
            return (Image)bmp;
        }
    }

}
